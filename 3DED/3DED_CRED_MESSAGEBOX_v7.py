# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '3DED.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '3DED.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import csv

import tifffile
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap, QDesktopServices, QPainter
from PyQt5.QtCore import Qt, QUrl, QMetaObject, QTimer
from PyQt5.QtWidgets import QGraphicsPixmapItem, QGraphicsScene, QDialog, \
    QDesktopWidget, QVBoxLayout, QLabel, QFileDialog, QTableWidgetItem, \
    QAbstractItemView, QHeaderView, QWidget, QGraphicsView, QApplication, QMessageBox
from temscript import NullMicroscope
from temscript import Microscope
import math
import datetime
import tkinter as tk
from tkinter import filedialog
import os
import subprocess
import numpy as np
from PIL import Image
import cv2
import re
import time
import threading
import scipy.signal as sig
from Util.TiltRangeFind import TiltRangeFinder
from Util.ImageThread import ImageThread
import json
from PIL import Image, ImageEnhance
from Util.ImageView import ImageProcessor
from Util.LogViewer import LogViewer
from Util.emd2pets import Emd2Pet
from Util.Advanced_Stage import MicroscopeController
from PyQt5.QtCore import QObject, pyqtSignal

# defocus 系数
defocus_factor = 1.2
# 米转毫米
m_to_mm = 1e3
# 毫米转米
mm_to_m = 1e-3
# 米转微米
m_to_um = 1e6
# 米转纳米
m_to_nm = 1e9
# 微米转米
um_to_m = 1e-6
# 纳米转米
nm_to_m = 1e-9
# label显示位数
label_zfill = 3
# 图片显示位数
image_zfill = 3
# ###############################################################
import datetime
import json
import math
import os
import shutil
import time
import tkinter.messagebox
from threading import Thread
from time import sleep
import numpy as np
import psutil
import scipy.signal as sig
from PIL import Image
import pyautogui
from temscript import microscope
from temscript import null_microscope
import matplotlib.pyplot as plt
from multiprocessing import Process

#TEM = Microscope()
TEM = NullMicroscope()

# 全局变量声明
global cameraname, exposuretime, binning, rotationspeed, startangle, endangle, degreespeed, stepangle
global filesavepath, freetime, anglerange, num, drift_step, drift_num, drift_exposuretime, drift_binning, drift_image_save, beamstop, is_save, current_path
with open("configuration.json", "r") as f:
    # 获取 json 数据
    configuration_data = json.load(f)
# Run 全局参数
image_label = None
# update startangle endangle stepangle
image_update_flag = True
# 预测时间
image_forecast_time = None
# drift 文件夹
image_working_path_drift = None
# red cred scred 文件夹
image_working_path_red = None


# 定义全局变量
def read_input_value(filename, key):
    with open(filename, 'r') as file:
        data = json.load(file)
        return data[key]
    return None


codepath = os.getcwd()
inputfile = codepath + '/params.json'
cameraname = read_input_value(str(inputfile), 'cameraname')
exposuretime = float(read_input_value(str(inputfile), 'Exposure_Time'))
binning = int(read_input_value(str(inputfile), 'binning'))
degreespeed = float(read_input_value(str(inputfile), 'Degree_Speed'))  # degreespeed range from 0.03 to 0.6 degrees/s
stepangle = exposuretime * degreespeed
rotationspeed = degreespeed / 29.332
startangle = int(read_input_value(str(inputfile), 'Start_Angle'))
endangle = int(read_input_value(str(inputfile), 'End_Angle'))
filesavepath = read_input_value(str(inputfile), 'filesavepath')
freetime = float(read_input_value(str(inputfile), 'Free_Time'))
anglerange = abs(startangle - endangle)
stepangle = degreespeed * exposuretime
num = int(anglerange / stepangle)
drift_step = float(read_input_value(str(inputfile), 'drift_step'))

drift_num = int(anglerange / drift_step)
drift_exposuretime = float(read_input_value(str(inputfile), 'Drift_Exposure_Time'))
drift_binning = int(read_input_value(str(inputfile), 'drift_binning'))
drift_image_save = int(read_input_value(str(inputfile), 'drift_image_save'))

beamstop = read_input_value(str(inputfile), 'beamstop')
is_save = read_input_value(str(inputfile), 'is_save')
current_path = read_input_value(str(inputfile), 'current_path')
screen_coordinates = read_input_value(str(inputfile), 'screen_coordinates')
Methods_3DED = read_input_value(str(inputfile), 'Methods_3DED')
# print(cameraname)
# print(exposuretime)
# print(binning)
# print(degreespeed)
# print("cred", startangle)
# print("drift_step", drift_step)
# print(endangle)
if startangle > endangle:
    drift_step = - drift_step
    stepangle = -stepangle
elif startangle < endangle:
    stepangle = stepangle
    drift_step = drift_step


def update_input():
    try:
        global cameraname, exposuretime, binning, degreespeed, rotationspeed, startangle, endangle, stepangle
        global filesavepath, freetime, anglerange, num, drift_step, drift_num, drift_exposuretime, drift_binning, drift_image_save, beamstop, is_save, current_path

        codepath = os.getcwd()
        inputfile = codepath + '/params.json'
        cameraname = read_input_value(str(inputfile), 'cameraname')
        exposuretime = float(read_input_value(str(inputfile), 'Exposure_Time'))
        binning = int(read_input_value(str(inputfile), 'binning'))
        stepangle = exposuretime * degreespeed
        rotationspeed = degreespeed / 29.332
        filesavepath = read_input_value(str(inputfile), 'filesavepath')
        freetime = float(read_input_value(str(inputfile), 'Free_Time'))
        anglerange = abs(startangle - endangle)
        num = int(anglerange / stepangle)
        drift_step = float(read_input_value(str(inputfile), 'drift_step'))
        drift_num = int(anglerange / drift_step)
        drift_exposuretime = float(read_input_value(str(inputfile), 'Drift_Exposure_Time'))
        drift_binning = int(read_input_value(str(inputfile), 'drift_binning'))
        drift_image_save = int(read_input_value(str(inputfile), 'drift_image_save'))
        beamstop = read_input_value(str(inputfile), 'beamstop')
        is_save = read_input_value(str(inputfile), 'is_save')
        current_path = read_input_value(str(inputfile), 'current_path')
        screen_coordinates = read_input_value(str(inputfile), 'screen_coordinates')
        Methods_3DED = read_input_value(str(inputfile), 'Methods_3DED')
        if image_update_flag:
            startangle = int(read_input_value(str(inputfile), 'Start_Angle'))
            endangle = int(read_input_value(str(inputfile), 'End_Angle'))
            degreespeed = float(
                read_input_value(str(inputfile), 'Degree_Speed'))  # degreespeed range from 0.03 to 0.6 degrees/s
            stepangle = degreespeed * exposuretime
        # print(cameraname)
        # print("degreespeed", degreespeed)
        # print("stepangle", stepangle)
        # print(cameraname)
        # print(exposuretime)
        # print("binning", binning)
        # print(degreespeed)
        # print(startangle)
        # print(endangle)
        if startangle > endangle:
            drift_step = - drift_step
            stepangle = -stepangle
        elif startangle < endangle:
            stepangle = stepangle
            drift_step = drift_step
    except Exception as e:
        print(f"update_input:{e}")


class initwork:
    def __init__(self):
        self.filesavepath = filesavepath

    def setup_workingpath(self):
        now = datetime.datetime.now()
        foldertime = now.strftime("%Y%m%d-%H%M%S")
        ###Setup time-dependent path in the working path###
        self.workingpath = self.filesavepath + '\\' + str(foldertime)
        # print(self.workingpath)
        os.mkdir(self.workingpath)
        # self.redpath = filesavepath
        # self.credpath = filesavepath
        # self.driftpath = filesavepath
        workingpath = self.workingpath
        return workingpath

    def setup_redpath(self, workingpath):
        self.redpath = str(workingpath) + '\\red'
        os.mkdir(self.redpath)
        redpath = self.redpath
        return redpath

    def setup_credpath(self, workingpath):
        self.credpath = workingpath + '\\cred'
        os.mkdir(self.credpath)
        credpath = self.credpath
        return credpath

    def setup_driftpath(self, workingpath):
        self.driftpath = str(workingpath) + '\\drift'
        os.mkdir(self.driftpath)
        driftpath = self.driftpath
        global image_working_path_drift
        image_working_path_drift = driftpath
        return driftpath

    def setup_scredpath(self, workingpath):
        self.scredpath = workingpath + '\\scred'
        os.mkdir(self.scredpath)
        scredpath = self.scredpath
        return scredpath

    def setup_edpath(self, workingpath):
        self.edpath = workingpath + '\\EDpatterns'
        os.mkdir(self.edpath)
        edpath = self.edpath
        global image_working_path_red
        image_working_path_red = edpath
        return edpath

    def setup_veloxpath(self, workingpath):
        self.edpath = workingpath + '\\velox'
        os.mkdir(self.edpath)
        edpath = self.edpath
        global image_working_path_red
        image_working_path_red = edpath
        return edpath


from PyQt5.QtCore import QObject, pyqtSignal
from PyQt5.QtWidgets import QMessageBox

# 弹窗线程相关
thread_event = None
thread_event_is_exit = False


class MessageBox(QObject):
    show_drift_correction_signal = pyqtSignal()
    show_ed_acquire_signal = pyqtSignal()
    show_offline_correction_signal = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.show_drift_correction_signal.connect(self.before_drift_correction)
        self.show_ed_acquire_signal.connect(self.before_ed_acquire)
        self.show_offline_correction_signal.connect(self.before_offline_correction)

    def before_drift_correction(self):
        global thread_event, thread_event_is_exit
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Warning)  # 设置图标
        reply = msgBox.question(None, 'Warning！',
                                'The automatic drift measurement will be executed.\n'
                                'Please make sure:\n'
                                '1) the TEM is under IMAGE mode;\n'
                                '2) the sample is in the screen center at the start angle.\n'
                                '3) the optical condition is suitable!\n'
                                'YES to continue!',
                                QMessageBox.Yes | QMessageBox.No,
                                QMessageBox.No)  # 设置默认按钮
        if reply == QMessageBox.No:
            thread_event_is_exit = True
            thread_event.set()
            # sys.exit()
            return
        mode = TEM.get_projection_mode()
        if mode == 'DIFFRACTION':
            TEM.set_projection_mode('IMAGING')
            reply = QMessageBox.question(None, 'Warning！',
                                         'The TEM is not in IMAGE mode！！！\n'
                                         'Please adjust the TEM to suitable optical conditions.\n'
                                         'If you want to stop this run, click NO!',
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.Warning)
            if reply == QMessageBox.No:
                thread_event_is_exit = True
                thread_event.set()
                # sys.exit()
                return
        if thread_event is not None:
            thread_event.set()

    def before_ed_acquire(self):
        global thread_event, thread_event_is_exit
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Warning)  # 设置图标
        reply = msgBox.question(None, 'Warning！',
                                'The automatic 3DED measurement will be executed.\n'
                                'Please make sure:\n'
                                '1) the TEM is under DIFFRACTION mode;\n'
                                '2) the diffraction intensity has been checked!',
                                QMessageBox.Yes | QMessageBox.No,
                                QMessageBox.No)  # 设置默认按钮
        if reply == QMessageBox.No:
            thread_event_is_exit = True
            thread_event.set()
            # sys.exit()
            return
        mode = TEM.get_projection_mode()
        if mode == 'IMAGING':
            reply = msgBox.question(None, 'Warning！',
                                    'The TEM is not in DIFFRACTION mode！！！.\n'
                                    'Please adjust the TEM to suitable optical conditions.\n'
                                    'If you want to stop this run, click NO!',
                                    QMessageBox.Yes | QMessageBox.No,
                                    QMessageBox.No)  # 设置默认按钮
            if reply == QMessageBox.No:
                thread_event_is_exit = True
                thread_event.set()
                # sys.exit()
                return
        if thread_event is not None:
            thread_event.set()

    def before_offline_correction(self):
        global thread_event, thread_event_is_exit
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Warning)  # 设置图标
        reply = msgBox.question(None, 'Warning！',
                                'The offline corrected 3DED measurement will be executed.\n'
                                "Please make sure that the 'drift_value.txt' file is in the "
                                'root of the file saving path.',
                                QMessageBox.Yes | QMessageBox.No,
                                QMessageBox.No)  # 设置默认按钮
        if reply == QMessageBox.No:
            thread_event_is_exit = True
            thread_event.set()
            # sys.exit()
            return
        if thread_event is not None:
            thread_event.set()


def round_to_two_decimals(num):
    # 保留两位小数
    try:
        num = float(num)
        return "{:.2f}".format(num)
    except Exception as e:
        print(f"round_to_two_decimals:{e}")


class drift_measure:
    def __init__(self):
        self.cameraname = str(cameraname)
        self.exposuretime = exposuretime
        self.binning = drift_binning
        self.rotationspeed = rotationspeed
        self.startangle = startangle
        self.drift_exposuretime = drift_exposuretime
        self.drift_num = drift_num
        self.drift_step = drift_step
        self.drift_image_save = drift_image_save

    def plot_drift_value(self):
        try:
            with open('drift_value.txt', 'r') as file:
                data = file.readlines()
            angle = []
            xshift = []
            yshift = []
            for line in data:
                values = line.strip().split(' ')
                # print("values:",values)
                angle.append(float(values[1]))
                xshift.append(float(values[3]))
                yshift.append(float(values[4]))
            # print("angle:",angle)
            plt.figure()
            plt.plot(angle, xshift, label='x_shift')
            plt.plot(angle, yshift, label='y_shift')
            plt.xlabel('Tilt angle (degrees)')
            plt.ylabel('Drift value (nm)')
            plt.legend()
            while True:
                plt.draw()
                plt.pause(0.1)
        except Exception as e:
            print(f"plot_drift_value:{e}")

    def get_pixel_size(self):
        try:
            global configuration_data, binning, m_to_nm
            # 获取显微镜相机的像素尺寸
            pixel_size = 1
            pixel_data = json.loads(json.dumps(configuration_data["pixel_data"]))
            for item in pixel_data:
                # 四舍五入到整数比较，如果一样则赋值退出循环
                if round(item["magnification"], 0) == round(TEM.get_indicated_magnification(), 0):
                    pixel_size = float(item["pixel_size(nm)"]) * float(binning)
                    # print(pixel_size)
                    break
            return pixel_size
        except Exception as e:
            print(f"get_pixel_size:{e}")

    def generate_image_with_metadata(self, img_name, img):
        # 生成tif图像，并存储属性
        try:
            metadata = {}
            # Names
            # metadata['Image'] = str()
            metadata['File'] = str(img_name)
            # Data Size
            metadata['Size (X)'] = str(img.shape[1])
            metadata['Size (Y)'] = str(img.shape[0])
            # Calibration
            pixel_size = float(self.get_pixel_size())
            metadata['Pixel Size (X)'] = f"{pixel_size} nm"
            metadata['Pixel Size (Y)'] = f"{pixel_size} nm"
            metadata['Total Size (X)'] = str(img.shape[1] * pixel_size)
            metadata['Total Size (Y)'] = str(img.shape[0] * pixel_size)
            # Acquisition
            metadata['Camera Name'] = self.cameraname
            metadata['Date'] = datetime.datetime.now().strftime("%a %b %d %H:%M:%S %Y")
            # metadata['Integration Time'] = ''
            metadata['Range (X)'] = f"0 to {img.shape[1]} pixels"
            metadata['Range (Y)'] = f"0 to {img.shape[0]} pixels"
            metadata['Binning'] = self.binning
            metadata['Mode'] = TEM.get_projection_mode()
            metadata['Defocus'] = round_to_two_decimals(TEM.get_defocus() * m_to_mm * defocus_factor)
            metadata['Magnification'] = round_to_two_decimals(TEM.get_indicated_magnification())
            metadata['Spot size'] = int(TEM.get_spot_size_index())
            metadata['Intensity'] = round_to_two_decimals(TEM.get_intensity())
            metadata['Image shift X'] = round_to_two_decimals(float(TEM.get_image_shift()[0]))
            metadata['Image shift Y'] = round_to_two_decimals(float(TEM.get_image_shift()[1]))
            metadata['Stage X'] = f"{round_to_two_decimals(TEM.get_stage_position()['x'] * m_to_um)} um"
            metadata['Stage Y'] = f"{round_to_two_decimals(TEM.get_stage_position()['y'] * m_to_um)} um"
            metadata['Stage Z'] = f"{round_to_two_decimals(TEM.get_stage_position()['z'] * m_to_um)} um"
            metadata['Stage A'] = f"{round_to_two_decimals(math.degrees(TEM.get_stage_position()['a']))} degree"
            metadata['Stage B'] = f"{round_to_two_decimals(math.degrees(TEM.get_stage_position()['b']))} degree"
            metadata['Exposure Time'] = drift_exposuretime
            metadata['Rotation Speed '] = self.rotationspeed
            metadata['Start Angle '] = self.startangle
            metadata['Drift Exposure Time'] = self.drift_exposuretime
            metadata['Drift Step '] = self.drift_step
            img = (img).astype(np.uint16)
            with tifffile.TiffWriter(img_name) as tif:
                # tif.save(img, metadata=metadata, photometric='MINISWHITE', bitspersample=16)
                tif.save(img, metadata=metadata, photometric='MINISBLACK', bitspersample=16)
        except Exception as e:
            print(f"generate_image_with_metadata:{e}")

    def get_image_xyshift(self, image1, image2):
        try:
            # 对输入的图像进行均值归一化处理
            image1 = image1 - np.mean(image1)
            image2 = image2 - np.mean(image2)
            # 利用快速傅里叶变换（FFT）计算图像的自相关和互相关，得到相关性矩阵
            fftself = sig.fftconvolve(image1, image1[::-1, ::-1], mode='same')
            fftcomp = sig.fftconvolve(image1, image2[::-1, ::-1], mode='same')
            # 找到相关性矩阵中具有最大值的位置，即相关性的峰值位置
            selfcenter = np.unravel_index(np.argmax(fftself), fftself.shape)
            # print(selfcenter[0])
            compcenter = np.unravel_index(np.argmax(fftcomp), fftcomp.shape)
            # print(compcenter[0])
            # 获取显微镜相机的像素尺寸
            pixel_size = 1
            # 读取配置文件 configuration.json
            cfgpath = codepath + '/configuration.json'
            with open(cfgpath, "r") as f:
                data = json.load(f)
            pixel_data = json.loads(json.dumps(data["pixel_data"]))
            # print(pixel_data)
            for item in pixel_data:
                # 四舍五入到整数比较，如果一样则赋值退出循环
                # print(round(TEM.get_indicated_magnification(), 0))
                # print(round(item["magnification"], 0))
                if round(item["magnification"], 0) == round(TEM.get_indicated_magnification(), 0):
                    # print(round(item["magnification"], 0))
                    pixel_size = item["pixel_size(nm)"] * self.binning
                    # print(self.binning)
                    # print(pixel_size)
                    break
            # print(pixel_size)
            # 计算图像在 x 和 y 方向上的偏移量，乘以像素尺寸
            xsh = (compcenter[0] - selfcenter[0]) * pixel_size
            # print(xsh)
            ysh = (-(compcenter[1] - selfcenter[1])) * pixel_size
            # 根据偏移量计算出 u 和 v 的值。这些值代表了图像在水平和垂直方向上的偏移量
            # u = 0.8904 * xsh + 0.4636 * ysh
            # v = 0.4636 * xsh - 0.8904 * ysh
            return (xsh, ysh)
        except Exception as e:
            print(f"get_image_xyshift:{e}")

    def xy_shift(self):
        try:
            log = open("exp_log", "a+")
            print('Drift Measurement start......', file=log, flush=True)
            goalangle = self.startangle
            arcgoalangle = goalangle * math.pi / 180
            TEM.set_stage_position(a=arcgoalangle, method='GO')
            init_param = TEM.get_camera_param(self.cameraname)
            param = dict(init_param)
            param["image_size"] = "FULL"
            param["exposure(s)"] = self.drift_exposuretime
            param["binning"] = self.binning
            TEM.set_camera_param(self.cameraname, param)
            acq = TEM.acquire(self.cameraname)
            img = acq[self.cameraname]
            # img = Image.fromarray(img).convert('I;16')
            # print("drift_image_save ", drift_image_save)
            if drift_image_save == 1:
                imgfilename = "00001.tif"
                global image_label
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                # img.save(imgfilename)
                self.generate_image_with_metadata(imgfilename, img)
                print(f'Image {imgfilename} has been saved', file=log, flush=True)
            else:
                print('One image has been acquired, but not been saved! ', file=log, flush=True)
            # refimgfilename = imgfilename
            refimg = np.array(acq[self.cameraname])
            # refimg = Image.open(refimgfilename)
            # refimg = np.array(refimg)
            # print(refimg)
            # xyshift_array = ['xshift(nm)', 'yshift(nm)']
            # zshift_array = ['zshift(nm)']
            currentstagepos = TEM.get_stage_position()
            initialx = currentstagepos['x'] * 1e9
            # initialx = format(currentx, '.2f')
            initialy = currentstagepos['y'] * 1e9
            # initialy = format(currenty, '.2f')
            arccurrenta = currentstagepos['a']
            arccurrentb = currentstagepos['b']
            currenta = arccurrenta * 180 / math.pi
            currenta = format(currenta, '.2f')
            currentb = arccurrentb * 180 / math.pi
            currentb = format(currentb, '.2f')
            xshift = 0
            yshift = 0
            # totalshiftx = 0
            # totalshifty = 0
            writelog = "1" + ' ' + str(currenta) + ' ' + str(currentb) + ' ' + str(xshift) + " " + str(yshift) + " 0 0"
            with open('drift_value.txt', 'a+') as f:
                f.write(str(writelog))
            f.close()
            # p = Process(target=self.plot_drift_value)
            # # thread.daemon = True
            # p.start()
            global image_forecast_time
            image_forecast_time_arr = []
            image_all_time = None
            image_cur_time = 3
            for i in range(2, int(self.drift_num + 2)):
                image_start_time = time.time()
                goalangle = goalangle + self.drift_step
                # print("goalangle", goalangle)
                arcgoalangle = goalangle * math.pi / 180
                print('Stage is moving to ' + str(goalangle) + ' degrees', file=log, flush=True)
                TEM.set_stage_position(a=arcgoalangle, method='GO')
                sleep(1)
                acq = TEM.acquire(self.cameraname)
                img = acq[self.cameraname]
                # img = Image.fromarray(img).convert('I;16')
                if drift_image_save == 1:
                    imgfilename = str(i).zfill(5) + '.tif'
                    label = "None" if image_label is None else image_label
                    imgfilename = f"{label}_{imgfilename}"
                    self.generate_image_with_metadata(imgfilename, img)
                    print('Image ' + str(imgfilename) + ' has been saved', file=log, flush=True)
                else:
                    print('One image has been acquired, but not been saved! ', file=log, flush=True)
                img0 = np.array(acq[self.cameraname])
                # print(img0)
                currentstage = TEM.get_stage_position()
                currentx = currentstage['x'] * 1e9
                currenty = currentstage['y'] * 1e9
                stageshiftx = currentx - initialx
                stageshifty = currenty - initialy
                initialx = currentx
                initialy = currenty
                stageshiftx = format(stageshiftx, '.2f')
                stageshifty = format(stageshifty, '.2f')
                xyshift = self.get_image_xyshift(refimg, img0)
                print('The measured drift values are: ' + str(xyshift), file=log, flush=True)
                xs = float(xyshift[0])
                ys = float(xyshift[1])
                xs = format(xs, '.2f')
                ys = format(ys, '.2f')
                # totalshiftx = xs + float(totalshiftx)
                # totalshifty = ys + float(totalshifty)
                # xshift = totalshiftx - stageshiftx
                # yshift = totalshifty - stageshifty
                # xshift = format(xshift, '.2f')
                # yshift = format(yshift, '.2f')
                refimg = img0
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currentalpha = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentbeta = format(currentbeta, '.2f')
                writelog = str(i) + ' ' + str(currentalpha) + ' ' + str(currentbeta) + ' ' + str(xs) + " " + str(ys) \
                           + " " + str(stageshiftx) + " " + str(stageshifty)
                with open('drift_value.txt', 'a+') as f:
                    f.write('\n' + str(writelog))
                f.close()
                if image_all_time is None:
                    image_all_time = int(self.drift_num + 2)
                    # print(f"image_all_time:{image_all_time}")
                image_end_time = time.time()
                image_forecast_time_arr.append(abs(image_start_time - image_end_time))
                image_forecast_time = (sum(image_forecast_time_arr) / len(image_forecast_time_arr)) * (
                        image_all_time - image_cur_time)
                image_cur_time += 1
            # self.plot_drift_value()
        except Exception as e:
            print(f"xy_shift:{e}")


class synchro_tilt_acquire:
    def __init__(self):
        self.TEM = 'microscope.Microscope()'
        self.cameraname = cameraname
        self.exposuretime = exposuretime
        self.binning = binning
        self.stepangle = stepangle
        self.rotationspeed = rotationspeed
        self.freetime = freetime

    def search_pid(self):
        pidlist = psutil.pids()
        for sub_pid in pidlist:
            process_info = psutil.Process(sub_pid)
            if process_info.name() == 'cmd.exe':
                pid = sub_pid
                return pid

    def backgroundacquire(self):
        with open('backgroundcamera.py', 'w') as f:
            f.write('from temscript import null_microscope')
            f.write('\nfrom temscript import microscope')
            f.write('\nimport numpy as np')
            f.write('\nfrom PIL import Image')
            f.write('\nTEM = ' + str(self.TEM))
            f.write("\ncameraname =" + "'" + self.cameraname + "'")
            f.write("\ninit_param = TEM.get_camera_param(cameraname)")
            f.write("\nparam= dict(init_param)")
            f.write("\nparam['image_size'] = 'FULL'")
            f.write("\nparam['exposure(s)'] = " + str(self.exposuretime))
            f.write("\nparam['binning'] = " + str(self.binning))
            f.write("\nTEM.set_camera_param(cameraname, param)")
            f.write('\nacq = TEM.acquire(cameraname)')
            f.write("\nimg = acq[cameraname]")
            f.write("\nnp.save('image.npy', img)")
            # f.write("\nimg = Image.fromarray(acq[cameraname]).convert('I;16')")
            # f.write("\nimg.save('img.tif')")

        def asyn1(f):
            def wrapper(*args, **kwargs):
                thr = Thread(target=f, args=args, kwargs=kwargs)
                thr.start()

            return wrapper

        @asyn1
        def backgroundcamera():
            os.system("python backgroundcamera.py")

        #      self.img = acq
        def killcmd1():
            pid = self.search_pid()
            os.system("taskkill /F /PID {}".format(pid))

        backgroundcamera()
        try:
            killcmd1()
            # os.remove('backgroundcamera.py')
        except Exception as e:
            print(e)

    def backgroundrotation(self, goalangle):
        arcgoalangle = goalangle * math.pi / 180
        with open('backgroundtilt.py', 'w') as f:
            f.write('from temscript import null_microscope')
            f.write('\nfrom temscript import microscope')
            f.write('\nTEM = ' + str(self.TEM))
            f.write('\ngoalangle = ' + str(arcgoalangle))
            f.write('\nrotationspeed = ' + str(self.rotationspeed))
            f.write("\nTEM.set_stage_position(a=goalangle,method='GO',speed=rotationspeed)")

        def asyn(f):
            def wrapper(*args, **kwargs):
                thr = Thread(target=f, args=args, kwargs=kwargs)
                thr.start()

            return wrapper

        @asyn
        def backgroundtilt():
            os.system("python backgroundtilt.py")

        def killcmd():
            pid = self.search_pid()
            os.system("taskkill /F /PID {}".format(pid))

        backgroundtilt()
        try:
            killcmd()
        except Exception as e:
            print(e)

    def backgroundrotation_correction(self):
        arcgoalangle = endangle * math.pi / 180
        arcstartangle = startangle * math.pi / 180
        TEM.set_stage_position(a=arcstartangle, method='GO')
        with open('backgroundtilt.py', 'w') as f:
            f.write('from temscript import null_microscope')
            f.write('\nfrom temscript import microscope')
            f.write('\nTEM = ' + str(self.TEM))
            f.write('\ngoalangle = ' + str(arcgoalangle))
            f.write('\nrotationspeed = ' + str(self.rotationspeed))
            f.write("\nTEM.set_stage_position(a=goalangle,method='GO',speed=rotationspeed)")

        def asyn(f):
            def wrapper(*args, **kwargs):
                thr = Thread(target=f, args=args, kwargs=kwargs)
                thr.start()

            return wrapper

        @asyn
        def backgroundtilt():
            os.system("python backgroundtilt.py")

        def killcmd():
            pid = self.search_pid()
            os.system("taskkill /F /PID {}".format(pid))

        log = open("exp_log", "a+")
        print('Background tilt with drift correction start......', file=log, flush=True)
        drift_time = drift_step / degreespeed
        startstage = TEM.get_stage_position()
        startx = startstage['x']
        starty = startstage['y']

        backgroundtilt()
        try:
            killcmd()
            for i in range(1, drift_num):
                sleep(drift_time)
                drift_value = np.loadtxt('drift_value.txt')
                deltax = drift_value[i, 3] * 1e-9
                deltay = drift_value[i, 4] * 1e-9
                newx = startx - deltax
                newy = starty + deltay
                TEM.set_stage_position(x=newx, y=newy, method='GO')
                sleep(1)
            log.close
        except Exception as e:
            print(e)

    def camera_delay_time(self):
        if self.binning == 1:
            camera_delay_time = 2.7568 + 0.9848 * self.exposuretime
        elif self.binning == 2:
            camera_delay_time = 1.64 + 0.99999 * self.exposuretime
        elif self.binning == 4:
            camera_delay_time = 1.3688 + 1.0005 * self.exposuretime
        elif self.binning == 8:
            camera_delay_time = 1.2925 + 1.002 * self.exposuretime
        return camera_delay_time

    def cr_acq(self, goalangle):
        # TEM = self.TEM
        TEM.set_beam_blanked(True)
        delay_time = self.camera_delay_time()
        real_delay_time = delay_time - self.freetime
        self.backgroundacquire()
        sleep(real_delay_time)
        # print(real_delay_time)
        self.backgroundrotation(goalangle=goalangle)
        TEM.set_beam_blanked(False)
        sleep(self.exposuretime)
        TEM.set_beam_blanked(True)

    def test_freetime(self):
        num = 1
        freetime_result = open("free_time_test_result.txt", "w+")
        for i in (0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5):
            self.freetime = i
            self.cr_acq(0.4 * num)
            num = num + 1
            img = Image.open('img.tif')
            img = np.array(img)
            mean_intensity = np.mean(img)
            print(str(i) + '  ' + str(mean_intensity), file=freetime_result, flush=True)


class stepwise_acquire:
    def __init__(self):
        self.cameraname = cameraname
        self.exposuretime = exposuretime
        self.binning = binning
        self.stepangle = stepangle
        self.rotationspeed = rotationspeed
        self.startangle = startangle
        self.endangle = endangle
        self.filesavepath = filesavepath
        self.num = num

    def get_pixel_size(self):
        try:
            global configuration_data, binning
            # 获取显微镜相机的像素尺寸
            pixel_size = 1
            # 读取配置文件 configuration.json
            pixel_data = json.loads(json.dumps(configuration_data["ed_pixel_size(1/A)"]))
            for item in pixel_data:
                # 四舍五入到整数比较，如果一样则赋值退出循环
                if round(item["cameralength"], 2) == round(TEM.get_indicated_camera_length(), 2):
                    pixel_size = float(item["pixel_size(1/A)"]) * float(binning)
                    # print(pixel_size)
                    break
            return pixel_size
        except Exception as e:
            print(f"get_pixel_size:{e}")

    def generate_image_with_metadata(self, img_name, img):
        # 生成tif图像，并存储属性
        try:
            metadata = {}
            # Names
            # metadata['Image'] = str()
            metadata['File'] = str(img_name)
            # Data Size
            metadata['Size (X)'] = str(img.shape[1])
            metadata['Size (Y)'] = str(img.shape[0])
            # Calibration
            pixel_size = self.get_pixel_size()
            metadata['Pixel Size (X)'] = f"{pixel_size} 1/A"
            metadata['Pixel Size (Y)'] = f"{pixel_size} 1/A"
            metadata['Total Size (X)'] = str(img.shape[1] * pixel_size)
            metadata['Total Size (Y)'] = str(img.shape[0] * pixel_size)
            # Acquisition
            metadata['Camera Name'] = self.cameraname
            metadata['Date'] = datetime.datetime.now().strftime("%a %b %d %H:%M:%S %Y")
            # metadata['Integration Time'] = ''
            metadata['Range (X)'] = f"0 to {img.shape[1]} pixels"
            metadata['Range (Y)'] = f"0 to {img.shape[0]} pixels"
            metadata['Binning'] = self.binning
            metadata['Mode'] = TEM.get_projection_mode()
            metadata['Defocus'] = round_to_two_decimals(TEM.get_defocus() * m_to_mm * defocus_factor)
            metadata['Magnification'] = round_to_two_decimals(TEM.get_indicated_magnification())
            metadata['Spot size'] = int(TEM.get_spot_size_index())
            metadata['Intensity'] = round_to_two_decimals(TEM.get_intensity())
            metadata['Image shift X'] = round_to_two_decimals(float(TEM.get_image_shift()[0]))
            metadata['Image shift Y'] = round_to_two_decimals(float(TEM.get_image_shift()[1]))
            metadata['Stage X'] = f"{round_to_two_decimals(TEM.get_stage_position()['x'] * m_to_um)} um"
            metadata['Stage Y'] = f"{round_to_two_decimals(TEM.get_stage_position()['y'] * m_to_um)} um"
            metadata['Stage Z'] = f"{round_to_two_decimals(TEM.get_stage_position()['z'] * m_to_um)} um"
            metadata['Stage A'] = f"{round_to_two_decimals(math.degrees(TEM.get_stage_position()['a']))} degree"
            metadata['Stage B'] = f"{round_to_two_decimals(math.degrees(TEM.get_stage_position()['b']))} degree"
            metadata['Exposure Time'] = self.exposuretime
            metadata['Rotation Speed '] = self.rotationspeed
            metadata['Start Angle'] = self.startangle
            metadata['End Angle'] = self.endangle
            metadata['Step Angle'] = self.stepangle
            img = (img).astype(np.uint16)
            with tifffile.TiffWriter(img_name) as tif:
                # tif.save(img, metadata=metadata, photometric='MINISWHITE', bitspersample=16)
                tif.save(img, metadata=metadata, photometric='MINISBLACK', bitspersample=16)
        except Exception as e:
            print(f"generate_image_with_metadata:{e}")

    def loop_scred(self):
        try:
            global image_forecast_time
            log = open("exp_log", "a+")
            print('SCRED data collecting start......', file=log, flush=True)
            print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            current_angle = self.startangle  # 当前角度
            image_counter = 1  # 图像计数器
            image_forecast_time_arr = []
            image_all_time = None
            image_cur_time = 0
            while True:
                image_start_time = time.time()
                goalangle = self.startangle + self.stepangle * image_counter
                print('Stage is moving to the ' + str(goalangle) +
                      ' degrees while camera exposure......', file=log, flush=True)
                synchro_tilt_acquire().cr_acq(goalangle=goalangle)
                print('Waiting ' + str(exposuretime) + ' s for the ' + str(image_counter) +
                      '/' + str(self.num) + ' exposure cycle......', file=log, flush=True)
                sleep(exposuretime)
                img = np.load('image.npy')
                imgfilename = str(image_counter).zfill(4) + '.tif'
                global image_label
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                self.generate_image_with_metadata(imgfilename, img)
                if os.path.exists('image.npy'):
                    os.remove('image.npy')
                print('Image ' + str(imgfilename) + ' has been saved', file=log, flush=True)
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                # print(str(currentalpha) + '  ' + str(currentbeta))
                framealpha = currentalpha + stepangle / 2
                framealpha = format(framealpha, '.2f')
                writelog = '''EDpatterns\\''' + imgfilename + ' ' + str(framealpha) + ' ' + str(currentb)
                with open('ImageList.txt', 'a+') as f:
                    f.write('\n' + str(writelog))
                print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                      file=log, flush=True)
                current_angle += self.stepangle
                # 更新图像计数器
                image_counter += 1
                # 判断是否达到结束条件
                if self.endangle - abs(self.stepangle) < current_angle < self.endangle + abs(self.stepangle):
                    break
                if image_all_time is None:
                    image_all_time = math.ceil(abs(self.endangle - self.startangle) / abs(self.stepangle))
                    # print(f"image_all_time:{image_all_time}")
                image_end_time = time.time()
                image_forecast_time_arr.append(abs(image_start_time - image_end_time))
                image_forecast_time = abs(sum(image_forecast_time_arr) / len(image_forecast_time_arr)) * (
                        image_all_time - image_cur_time)
                image_cur_time += 1
        except Exception as e:
            print(f"loop_scred:{e}")

    def loop_red(self):
        try:
            global image_forecast_time, image_label
            log = open("exp_log", "a+")
            print('RED data collecting start......', file=log, flush=True)
            print('Moving to the start angle......', file=log, flush=True)
            init_param = TEM.get_camera_param(self.cameraname)
            param = dict(init_param)
            param["image_size"] = "FULL"
            param["exposure(s)"] = self.exposuretime
            param["binning"] = self.binning
            TEM.set_camera_param(self.cameraname, param)
            print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            image_forecast_time_arr = []
            image_all_time = None
            for i in range(1, int(self.num + 2)):
                image_start_time = time.time()
                print('Waiting ' + str(exposuretime) + ' s for the ' + str(i) + '/' + str(
                    self.num + 1) + ' exposure cycle......', file=log, flush=True)
                TEM.set_beam_blanked(False)
                acq = TEM.acquire(self.cameraname)
                TEM.set_beam_blanked(True)
                img = acq[self.cameraname]
                # img = Image.fromarray(img).convert('I;16')
                imgfilename = str(i).zfill(4) + '.tif'
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                self.generate_image_with_metadata(imgfilename, img)
                print('Image ' + str(imgfilename) + ' has been saved', file=log, flush=True)
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currenta = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                writelog = '''EDpatterns\\''' + imgfilename + ' ' + str(currenta) + ' ' + str(currentb)
                with open('ImageList.txt', 'a+') as f:
                    f.write(str(writelog) + '\n')
                print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                      file=log, flush=True)
                nextangle = currentalpha + self.stepangle
                if abs(nextangle) < abs(endangle):
                    print('Stage is moving to the ' + str(nextangle) + ' degrees......', file=log, flush=True)
                    arcnextangle = nextangle * math.pi / 180
                    TEM.set_stage_position(a=arcnextangle, method='GO')
                else:
                    print('Collecting task finished! All the images have been saved!', file=log, flush=True)
                if image_all_time is None:
                    image_all_time = int(self.num + 2)
                    # print(f"image_all_time:{image_all_time}")
                image_end_time = time.time()
                image_forecast_time_arr.append(abs(image_start_time - image_end_time))
                image_forecast_time = abs(sum(image_forecast_time_arr) / len(image_forecast_time_arr)) * (
                        image_all_time - i)
        except Exception as e:
            print(f"loop_red:{e}")

    def loop_velox(self):
        try:
            global image_forecast_time
            # log = open("exp_log", "a+")
            # print('CRED data collecting start with velox......', file=log, flush=True)
            # print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            sleep(3)
            # print('Start to move to the end angle with the speed = ' + str(degreespeed) + ' degrees/s', file=log,
            #      flush=True)
            synchro_tilt_acquire().backgroundrotation(self.endangle)
            x, y = screen_coordinates
            # 开始前点击屏幕
            pyautogui.click(x, y)
            image_forecast_time = abs(endangle - startangle) / degreespeed
            for num1 in range(0, 10000):
                # print('Acquiring ' + str(num1) + ' of 10000 max frames...', file=log, flush=True)
                # now = datetime.datetime.now()
                # acquiretime = now.strftime("%Y%m%d-%H:%M:%S")
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currenta = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                # print('Current tilt angle is ' + str(currentalpha), file=log, flush=True)
                #  print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                #      file=log, flush=True)
                # print('Image' + str(num1) + ' was acquired at ' + str(acquiretime), file=log, flush=True)
                sleep(exposuretime)
                if startangle > endangle:
                    if endangle - 0.2 < currentalpha < endangle + 0.2:
                        break
                    else:
                        continue
                else:
                    if endangle - 0.2 < currentalpha < endangle + 0.2:
                        break
                    else:
                        continue
            # 结束后点击屏幕
            pyautogui.click(x, y)
        except Exception as e:
            print(f"loop_velox:{e}")

    def loop_scred_drift_correct(self):
        try:
            log = open("exp_log", "a+")
            print('SCRED data collecting start......', file=log, flush=True)
            print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            drift_count = 1
            num_ed_pre_drift = drift_step / stepangle
            startstage = TEM.get_stage_position()
            startx = startstage['x']
            starty = startstage['y']
            print('The initial stage x and y positions are: ' + str(startx) + ',' + str(starty), file=log, flush=True)
            global image_forecast_time
            image_forecast_time_arr = []
            image_all_time = None
            for i in range(1, int(self.num + 1)):
                image_start_time = time.time()
                goalangle = self.startangle + self.stepangle * i
                # print(goalangle)
                print('Stage is moving to the ' + str(goalangle) +
                      ' degrees while camera exposure......', file=log, flush=True)
                synchro_tilt_acquire().cr_acq(goalangle=goalangle)
                print('Waiting ' + str(exposuretime) + ' s for the ' + str(i) +
                      '/' + str(self.num) + ' exposure cycle......', file=log, flush=True)
                sleep(exposuretime)
                img = np.load('image.npy')
                imgfilename = str(i).zfill(4) + '.tif'
                global image_label
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                self.generate_image_with_metadata(imgfilename, img)
                if os.path.exists('image.npy'):
                    os.remove('image.npy')
                print('Image ' + str(imgfilename) + ' has been saved', file=log, flush=True)
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                currentx = currentstage['x']
                currenty = currentstage['y']
                # print(str(currentalpha) + '  ' + str(currentbeta))
                framealpha = currentalpha + stepangle / 2
                framealpha = format(framealpha, '.2f')
                writelog = '''EDpatterns\\''' + imgfilename + ' ' + str(framealpha) + ' ' + str(currentb)
                with open('ImageList.txt', 'a+') as f:
                    f.write('\n' + str(writelog))
                print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                      file=log, flush=True)
                if image_all_time is None:
                    image_all_time = int(self.num + 1)
                image_end_time = time.time()
                image_forecast_time_arr.append(abs(image_start_time - image_end_time))
                image_forecast_time = abs(sum(image_forecast_time_arr) / len(image_forecast_time_arr)) * (
                        image_all_time - i)
                if int(i) % num_ed_pre_drift == 0:
                    with open('drift_value.txt', 'r') as file:
                        lines = file.readlines()
                        for line in lines:
                            data = line.split()
                            stored_angle = float(data[1])
                            drift_value_x = (float(data[3]) + float(data[5])) * 1e-9
                            drift_value_y = (float(data[4]) - float(data[6])) * 1e-9
                            if round(stored_angle) == round(currentalpha):
                                print('The No.' + str(drift_count) + ' drift cycle started',
                                      file=log, flush=True)
                                print('The drift values in nanometers are: ' + str(data[3]) + ',' + str(data[4]),
                                      file=log, flush=True)
                                drift_count += 1
                                newx = currentx - drift_value_x
                                newy = currenty + drift_value_y
                                TEM.set_stage_position(x=newx, y=newy, method='GO')
                                print('The corrected stage x and y positions are: ' + str(newx) + ',' + str(newy),
                                      file=log, flush=True)
                    file.close()
                else:
                    continue
        except Exception as e:
            print(f"loop_scred_drift_correct:{e}")

    def loop_red_drift_correct(self):
        try:
            global image_forecast_time
            log = open("exp_log", "a+")
            print('RED data collecting start......', file=log, flush=True)
            print('Moving to the start angle......', file=log, flush=True)
            init_param = TEM.get_camera_param(self.cameraname)
            param = dict(init_param)
            param["image_size"] = "FULL"
            param["exposure(s)"] = self.exposuretime
            param["binning"] = self.binning
            TEM.set_camera_param(self.cameraname, param)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            num_ed_pre_drift = drift_step / stepangle
            startstage = TEM.get_stage_position()
            startx = startstage['x']
            starty = startstage['y']
            drift_count = 1
            print('The initial stage x and y positions are: ' + str(startx) + ',' + str(starty), file=log, flush=True)
            image_forecast_time_arr = []
            image_all_time = None
            for i in range(1, int(self.num + 2)):
                image_start_time = time.time()
                print('Waiting ' + str(exposuretime) + ' s for the ' + str(i) + '/' + str(
                    self.num + 1) + ' exposure cycle......', file=log, flush=True)
                TEM.set_beam_blanked(False)
                acq = TEM.acquire(self.cameraname)
                TEM.set_beam_blanked(True)
                img = acq[self.cameraname]
                # img = Image.fromarray(img).convert('I;16')
                imgfilename = str(i).zfill(4) + '.tif'
                global image_label
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                self.generate_image_with_metadata(imgfilename, img)
                print('Image ' + str(imgfilename) + ' has been saved', file=log, flush=True)
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currenta = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                writelog = '''EDpatterns\\''' + imgfilename + ' ' + str(currenta) + ' ' + str(currentb)
                with open('ImageList.txt', 'a+') as f:
                    f.write('\n' + str(writelog))
                print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                      file=log, flush=True)
                nextangle = currentalpha + self.stepangle
                arcnextangle = nextangle * math.pi / 180
                print('Stage is moving to the ' + str(nextangle) + ' degrees......', file=log, flush=True)
                TEM.set_stage_position(a=arcnextangle, method='GO')
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                currentalpha = arccurrentalpha * 180 / math.pi
                currentx = currentstage['x']
                currenty = currentstage['y']
                if image_all_time is None:
                    image_all_time = int(self.num + 2)
                    # print(f"image_all_time:{image_all_time}")
                image_end_time = time.time()
                image_forecast_time_arr.append(abs(image_start_time - image_end_time))
                image_forecast_time = abs(sum(image_forecast_time_arr) / len(image_forecast_time_arr)) * (
                        image_all_time - i)
                if int(i) % num_ed_pre_drift == 0:
                    with open('drift_value.txt', 'r') as file:
                        lines = file.readlines()
                        for line in lines:
                            data = line.split()
                            stored_angle = float(data[1])
                            drift_value_x = (float(data[3]) + float(data[5])) * 1e-9
                            drift_value_y = (float(data[4]) - float(data[6])) * 1e-9
                            if round(stored_angle) == round(currentalpha):
                                print('The No.' + str(drift_count) + ' drift cycle started',
                                      file=log, flush=True)
                                print('The drift values in nanometers are: ' + str(data[3]) + ',' + str(data[4]),
                                      file=log, flush=True)
                                drift_count += 1
                                newx = currentx - drift_value_x
                                newy = currenty + drift_value_y
                                TEM.set_stage_position(x=newx, y=newy, method='GO')
                                print('The corrected stage x and y positions are: ' + str(newx) + ',' + str(newy),
                                      file=log, flush=True)
                    file.close()
                else:
                    continue
        except Exception as e:
            print(f"loop_red_drift_correct:{e}")

    def loop_velox_drift_correct(self):
        try:
            global image_forecast_time
            # log = open("exp_log", "a+")
            # print('RED data collecting start......', file=log, flush=True)
            # print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            num_ed_pre_drift = drift_step / stepangle
            startstage = TEM.get_stage_position()
            startx = startstage['x']
            starty = startstage['y']
            drift_count = 1
            # print('The initial stage x and y positions are: ' + str(startx) + ',' + str(starty), file=log, flush=True)
            image_forecast_time_arr = []
            image_all_time = None
            x, y = screen_coordinates
            # 开始前点击屏幕
            pyautogui.click(x, y)
            for i in range(1, int(self.num + 2)):
                image_start_time = time.time()
                # print('Waiting ' + str(exposuretime) + ' s for the ' + str(i) + '/' + str(
                #   self.num + 1) + ' exposure cycle......', file=log, flush=True)
                # TEM.set_beam_blanked(False)
                # 是否要删除这个相机保存图片代码
                # acq = TEM.acquire(self.cameraname)
                # TEM.set_beam_blanked(True)
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currenta = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                # print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                #       file=log, flush=True)
                nextangle = currentalpha + self.stepangle
                arcnextangle = nextangle * math.pi / 180
                print('Stage is moving to the ' + str(nextangle) + ' degrees......', file=log, flush=True)
                TEM.set_stage_position(a=arcnextangle, method='GO')
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                currentalpha = arccurrentalpha * 180 / math.pi
                currentx = currentstage['x']
                currenty = currentstage['y']
                if image_all_time is None:
                    image_all_time = int(self.num + 2)
                    # print(f"image_all_time:{image_all_time}")
                image_end_time = time.time()
                image_forecast_time_arr.append(abs(image_start_time - image_end_time))
                image_forecast_time = abs(sum(image_forecast_time_arr) / len(image_forecast_time_arr)) * (
                        image_all_time - i)
                if int(i) % num_ed_pre_drift == 0:
                    with open('drift_value.txt', 'r') as file:
                        lines = file.readlines()
                        for line in lines:
                            data = line.split()
                            stored_angle = float(data[1])
                            drift_value_x = (float(data[3]) + float(data[5])) * 1e-9
                            drift_value_y = (float(data[4]) - float(data[6])) * 1e-9
                            if round(stored_angle) == round(currentalpha):
                                print('The No.' + str(drift_count) + ' drift cycle started',
                                      file=log, flush=True)
                                print('The drift values in nanometers are: ' + str(data[3]) + ',' + str(data[4]),
                                      file=log, flush=True)
                                drift_count += 1
                                newx = currentx - drift_value_x
                                newy = currenty + drift_value_y
                                TEM.set_stage_position(x=newx, y=newy, method='GO')
                                print('The corrected stage x and y positions are: ' + str(newx) + ',' + str(newy),
                                      file=log, flush=True)
                    file.close()
                else:
                    continue
            # 结束后点击屏幕
            pyautogui.click(x, y)
        except Exception as e:
            print(f"loop_velox_drift_correct:{e}")

    def loop_cred(self):
        try:
            global image_forecast_time, image_label
            log = open("exp_log", "a+")
            print('CRED data collecting start......', file=log, flush=True)
            print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            sleep(3)
            print('Start to move to the end angle with the speed = ' + str(degreespeed) + ' degrees/s', file=log,
                  flush=True)
            image_forecast_time = abs(endangle - startangle) / degreespeed
            synchro_tilt_acquire().backgroundrotation(self.endangle)
            for num1 in range(0, 10000):
                print('Acquiring ' + str(num1) + ' of 10000 max frames...', file=log, flush=True)
                init_param = TEM.get_camera_param(cameraname)
                param = dict(init_param)
                param["image_size"] = "FULL"
                param["exposure(s)"] = exposuretime
                param["binning"] = binning
                TEM.set_camera_param(cameraname, param)
                acq = TEM.acquire(cameraname)
                img = acq['BM-Ceta']
                now = datetime.datetime.now()
                acquiretime = now.strftime("%Y%m%d-%H:%M:%S")
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currenta = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                imgfilename = str(num1 + 1).zfill(4) + '.tif'
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                self.generate_image_with_metadata(imgfilename, img)
                writelog = '''EDpatterns\\''' + imgfilename + ' ' + str(currenta) + ' ' + str(currentb)
                with open('ImageList.txt', 'a+') as f:
                    f.write('\n' + str(writelog))
                print('Current tilt angle is ' + str(currentalpha), file=log, flush=True)
                print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                      file=log, flush=True)
                print('Image' + str(num1) + ' was acquired at ' + str(acquiretime), file=log, flush=True)
                if startangle > endangle:
                    if endangle - 0.2 < currentalpha < endangle + 0.2:
                        break
                    else:
                        continue
                else:
                    if endangle - 0.2 < currentalpha < endangle + 0.2:
                        break
                    else:
                        continue
        except Exception as e:
            print(f"loop_cred:{e}")

    def loop_cred_drift_correct(self):
        try:
            global image_forecast_time
            log = open("exp_log", "a+")
            print('CRED data collecting with drift correction start......', file=log, flush=True)
            print('Moving to the start angle......', file=log, flush=True)
            arcstartangle = self.startangle * math.pi / 180
            TEM.set_stage_position(a=arcstartangle, method='GO')
            sleep(3)
            print('Start to move to the end angle with the speed = ' + str(degreespeed) + ' degrees/s', file=log,
                  flush=True)
            image_forecast_time = abs(endangle - startangle) / float(degreespeed)
            synchro_tilt_acquire().backgroundrotation(self.endangle)
            drift_count = 1
            startstage = TEM.get_stage_position()
            startx = startstage['x']
            starty = startstage['y']
            for num1 in range(0, 10000):
                print('Acquiring ' + str(num1) + ' of 10000 max frames...', file=log, flush=True)
                init_param = TEM.get_camera_param(cameraname)
                param = dict(init_param)
                param["image_size"] = "FULL"
                param["exposure(s)"] = exposuretime
                param["binning"] = binning
                TEM.set_camera_param(cameraname, param)
                acq = TEM.acquire(cameraname)
                img = acq['BM-Ceta']
                # img = Image.fromarray(img).convert('I;16')
                now = datetime.datetime.now()
                acquiretime = now.strftime("%Y%m%d-%H:%M:%S")
                currentstage = TEM.get_stage_position()
                arccurrentalpha = currentstage['a']
                arccurrentbeta = currentstage['b']
                currentalpha = arccurrentalpha * 180 / math.pi
                currenta = format(currentalpha, '.2f')
                currentbeta = arccurrentbeta * 180 / math.pi
                currentb = format(currentbeta, '.2f')
                currentx = currentstage['x']
                currenty = currentstage['y']
                imgfilename = str(num1 + 1).zfill(4) + '.tif'
                global image_label
                label = "None" if image_label is None else image_label
                imgfilename = f"{label}_{imgfilename}"
                self.generate_image_with_metadata(imgfilename, img)
                writelog = '''EDpatterns\\''' + imgfilename + ' ' + str(currenta) + ' ' + str(currentb)
                with open('ImageList.txt', 'a+') as f:
                    f.write('\n' + str(writelog))
                print('Current tilt angle is ' + str(currentalpha), file=log, flush=True)
                print('Image file name and current alpha and beta angles have been saved to ImageList.txt',
                      file=log, flush=True)
                print('Image' + str(num1) + ' was acquired at ' + str(acquiretime), file=log, flush=True)
                with open('drift_value.txt', 'r') as file:
                    lines = file.readlines()
                    for line in lines:
                        data = line.split()
                        stored_angle = float(data[1])
                        drift_value_x = (float(data[3]) + float(data[5])) * 1e-9
                        drift_value_y = (float(data[4]) - float(data[6])) * 1e-9
                        if round(stored_angle) == round(currentalpha):
                            print('The No.' + str(drift_count) + ' drift cycle started',
                                  file=log, flush=True)
                            print('The drift values in nanometers are: ' + str(data[3]) + ',' + str(data[4]),
                                  file=log, flush=True)
                            drift_count += 1
                            newx = currentx - drift_value_x
                            newy = currenty + drift_value_y
                            TEM.set_stage_position(x=newx, y=newy, method='GO')
                            print('The corrected stage x and y positions are: ' + str(newx) + ',' + str(newy),
                                  file=log, flush=True)
                file.close()

                if startangle > endangle:
                    if endangle - 0.2 < currentalpha < endangle + 0.2:
                        break
                    else:
                        continue
                else:
                    if endangle - 0.2 < currentalpha < endangle + 0.2:
                        break
                    else:
                        continue
        except Exception as e:
            print(f"loop_cred_drift_correct:{e}")


class credcollecting:

    def __init__(self):
        with open('beamstop.json', 'r') as file:
            self.beamstop_data = json.load(file)
        with open("configuration.json", 'r') as file:
            self.configuration_data = json.load(file)
        codepath = os.getcwd()
        inputfile = codepath + '/params.json'
        cameraname = read_input_value(str(inputfile), 'cameraname')
        exposuretime = float(read_input_value(str(inputfile), 'Exposure_Time'))
        binning = int(read_input_value(str(inputfile), 'binning'))
        degreespeed = float(
            read_input_value(str(inputfile), 'Degree_Speed'))  # degreespeed range from 0.03 to 0.6 degrees/s
        stepangle = exposuretime * degreespeed
        rotationspeed = degreespeed / 29.332
        startangle = int(read_input_value(str(inputfile), 'Start_Angle'))
        endangle = int(read_input_value(str(inputfile), 'End_Angle'))
        filesavepath = read_input_value(str(inputfile), 'filesavepath')
        freetime = float(read_input_value(str(inputfile), 'Free_Time'))
        anglerange = abs(startangle - endangle)
        stepangle = degreespeed * exposuretime
        num = int(anglerange / stepangle)
        drift_step = float(read_input_value(str(inputfile), 'drift_step'))
        drift_num = int(anglerange / drift_step)
        drift_exposuretime = float(read_input_value(str(inputfile), 'drift_exposuretime'))
        drift_binning = int(read_input_value(str(inputfile), 'drift_binning'))
        drift_image_save = int(read_input_value(str(inputfile), 'drift_image_save'))

        beamstop = read_input_value(str(inputfile), 'beamstop')

        self.cameraname = cameraname
        self.exposuretime = exposuretime
        self.binning = binning
        self.stepangle = stepangle
        self.rotationspeed = rotationspeed
        self.freetime = freetime
        self.degreespeed = degreespeed
        self.startangle = startangle
        self.endangle = endangle
        self.num = num
        self.drift_num = drift_num
        self.drift_binning = drift_binning
        self.beamstop = beamstop

    def copyfile(self, srcfile, dstpath):  # 复制函数
        try:
            if not os.path.isfile(srcfile):
                print("%s not exist!" % (srcfile))
            else:
                fpath, fname = os.path.split(srcfile)  # 分离文件名和路径
                if not os.path.exists(dstpath):
                    os.makedirs(dstpath)  # 创建路径
                shutil.copy(srcfile, dstpath + '/' + fname)  # 复制文件
                # print("copy %s -> %s" % (srcfile, dstpath + fname))
        except Exception as e:
            print(f"copyfile:{e}")

    def runhead(self):
        try:
            now = datetime.datetime.now()
            starttime = now.strftime("%Y%m%d-%H:%M:%S")
            instrument = TEM.get_family()
            ###Setup log file###
            log = open("exp_log", "w+")

            ###Now start  3dED experiment###
            print('''
                                 ============================================================================
                                 |       _____  ______ _____            _ _           _   _                  |
                                 |      |  __ \|  ____|  __ \          | | |         | | (_)                 |
                                 |   ___| |__) | |__  | |  | | ___ ___ | | | ___  ___| |_ _ _ __   __ _      |
                                 |  / __|  _  /|  __| | |  | |/ __/ _ \| | |/ _ \/ __| __| | '_ \ / _` |     |
                                 | | (__| | \ \| |____| |__| | (_| (_) | | |  __/ (__| |_| | | | | (_| |     |
                                 |  \___|_|  \_\______|_____/ \___\___/|_|_|\___|\___|\__|_|_| |_|\__, |v0.8 |
                                 |                                                                 __/ |     |
                                 |                                                                |___/      |
                                 |  cREDcollecting: A python code for 3DED data collecting on ThermoFisher/  |
                                 |                  FEI TEM with the TEMscripting interface.                 |
                                 |         Version: 0.8.2                                                    |
                                 |            Date: 2023-11-30                                               |
                                 |          Author: Haiyang XIAN                                             |
                                 |     Affiliation: EM center of Guangzhou Institute of Geochemistry, CAS    |
                                 ============================================================================
                                 ''', file=log, flush=True)
            print("                                                   ", file=log, flush=True)
            print("                                                   ", file=log, flush=True)

            ###Prepare optics for experiments###
            if TEM.get_beam_blanked() == 'True':
                TEM.set_beam_blanked('False')
            ###Get basic experimental conditions###
            workingvoltage = TEM.get_voltage()
            cameralength = TEM.get_indicated_camera_length()
            spotsize = TEM.get_spot_size_index()
            intensity = TEM.get_intensity()
            defocus = TEM.get_defocus()
            screencurrent = TEM.get_screen_current()
            currentpos = TEM.get_stage_position()
            ###write experimental conditions to log###
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Experimental conditions start+++++++', file=log, flush=True)
            print('WorkingVoltage = ' + str(workingvoltage) + ' kV', file=log, flush=True)
            print('SpotSize = ' + str(spotsize), file=log, flush=True)
            print('Intensity(C2) =' + str(intensity), file=log, flush=True)
            print('CameraLength = ' + str(cameralength) + ' m', file=log, flush=True)
            print('Defocus = ' + str(defocus), file=log, flush=True)
            print('ScreenCurrent = ' + str(screencurrent) + ' nA', file=log, flush=True)
            # print('ImageRotation = '+str(imagerotation)+' mrad',file=log,flush=True)
            print('Binning = ' + str(self.binning), file=log, flush=True)
            print('Drift_Binning = ' + str(self.drift_binning), file=log, flush=True)
            print('ExposureTime = ' + str(self.exposuretime) + ' s', file=log, flush=True)
            print('StartAngle = ' + str(self.startangle) + ' degrees', file=log, flush=True)
            print('EndAngle = ' + str(self.endangle) + ' degrees', file=log, flush=True)
            print('RotationSpeed = ' + str(self.degreespeed) + ' degree/s', file=log, flush=True)
            print('CurrentStagePosition = ' + str(currentpos), file=log, flush=True)
            # print('ImageHeight = '+str(imageheight),file=log,flush=True)
            # print('ImageWidth = '+str(imagewidth),file=log,flush=True)
            print('+++++++Experimental conditions end+++++++', file=log, flush=True)
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print("cRED was performed on a ThermoFisher/FEI " + instrument + " TEM", file=log, flush=True)
            print("Start time: " + starttime, file=log, flush=True)
            print("Working path is: " + filesavepath, file=log, flush=True)
            # print("A time-dependent folder has been created in the working path", file=log, flush=True)
            print("Experimental results will be saved to " + filesavepath, file=log, flush=True)
            print("A time-dependent folder has been created in the working path", file=log, flush=True)
            # print("Folders named 'red'/'cred'/'drift' are generated", file=log, flush=True)
            # print("Diffraction figures are saved in the 'red' and 'cred' folders", file=log, flush=True)
            # print("Drift_measurement results are saved in the 'drift' folder", file=log, flush=True)
        except Exception as e:
            print(f"runhead:{e}")

    def generate_pets_file(self):
        try:
            log = open("exp_log", "a+")
            Aprepixel = "0.00134 Please define by yourself!"
            pixel_data = json.loads(json.dumps(configuration_data["ed_pixel_size(1/A)"]))
            for item in pixel_data:
                # 四舍五入到整数比较，如果一样则赋值退出循环
                if round(item["cameralength"], 2) == round(TEM.get_indicated_camera_length(), 2):
                    Aprepixel = float(item["pixel_size(1/A)"]) * float(binning)
                    # print(pixel_size)
                    break
            if self.binning == 1:
                bin = 4

            elif self.binning == 2:
                bin = 2
            else:
                bin = 1

            if self.beamstop == 'no':
                beamstop = self.beamstop_data['no']
            else:
                beamstop = '\n'.join(self.beamstop_data[self.beamstop][str(self.binning)])

            f = open("new.pts", 'w')
            f.write("#####################")
            f.write("\n#                   #")
            f.write("\n#  PETS parameters  #")
            f.write("\n#                   #")
            f.write("\n#####################")
            f.write("\nlambda 0.0251")
            f.write("\nAperpixel " + str(Aprepixel))
            f.write("\nphi 1.00")
            f.write("\nomega 270.0")
            f.write("\nnoiseparameters 3.5 38")
            f.write("\ngeometry continuous")
            f.write("\nreflectionsize 12")
            f.write("\nbin " + str(bin))
            f.write("\ndstarmax  1.25")
            f.write("\ndstarmaxps  1.25")
            f.write("\n")
            f.write(str(beamstop))
            f.write("\n")
            f.write("imagelist\n")
            f.close()

            file1 = 'new.pts'
            file2 = 'ImageList.txt'

            def merge(file1, file2):
                f1 = open(file1, 'a', encoding='utf-8')
                with open(file2, 'r', encoding='utf-8') as f2:
                    for i in f2:
                        f1.write(i)

            merge(file1, file2)
            f = open("new.pts", 'a+')
            f.write("\nendimagelist")
            f.write("\n")
            f.write("\nreconstruction")
            f.write("\nhk0   1 0 0 0 1 0 0 0 0")
            f.write("\nhk1   1 0 0 0 1 0 0 0 1")
            f.write("\nhk2   1 0 0 0 1 0 0 0 2")
            f.write("\nhk3   1 0 0 0 1 0 0 0 3")
            f.write("\nh0l   1 0 0 0 0 1 0 0 0")
            f.write("\nh1l   1 0 0 0 0 1 0 1 0")
            f.write("\nh2l   1 0 0 0 0 1 0 2 0")
            f.write("\nh3l   1 0 0 0 0 1 0 3 0")
            f.write("\n0kl   0 1 0 0 0 1 0 0 0")
            f.write("\n1kl   0 1 0 0 0 1 1 0 0")
            f.write("\n2kl   0 1 0 0 0 1 2 0 0")
            f.write("\n3kl   0 1 0 0 0 1 3 0 0")
            f.write("\nhhl   1 1 0 0 0 1 0 0 0")
            f.write("\nh+1hl   1 1 0 0 0 1 1 0 0")
            f.write("\nh+2hl   1 1 0 0 0 1 2 0 0")
            f.write("\nendreconstruction")
            f.close()

            print("A 'new.pts' file has been generated, you can open it with the PETS2 software.", file=log, flush=True)
        except Exception as e:
            print(f"generate_pets_file:{e}")

    def red_no_correct_run(self):
        try:
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            redpath = initwork().setup_redpath(workingpath)
            edpath = initwork().setup_edpath(redpath)
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the stepwise rotation method without drift correction', file=log, flush=True)
            print(str(self.num) + " frames will be saved to the 'red' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_red()
            self.generate_pets_file()
            self.copyfile('new.pts', redpath)
            sleep(1)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', redpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
        except Exception as e:
            print(f"red_no_correct_run:{e}")

    def scred_no_correct_run(self):
        try:
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            scredpath = initwork().setup_scredpath(workingpath)
            edpath = initwork().setup_edpath(scredpath)
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the stepwise continuous rotation method without drift correction', file=log,
                  flush=True)
            print(str(self.num) + " frames will be saved to the 'scred' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_scred()
            self.generate_pets_file()
            self.copyfile('new.pts', scredpath)
            sleep(1)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', scredpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
            os.remove('backgroundtilt.py')
            os.remove('backgroundcamera.py')
        except Exception as e:
            print(f"scred_no_correct_run:{e}")

    def cred_no_correct_run(self):
        try:
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            credpath = initwork().setup_credpath(workingpath)
            edpath = initwork().setup_edpath(credpath)
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the continuous rotation method without drift correction', file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_cred()
            self.generate_pets_file()
            self.copyfile('new.pts', credpath)
            sleep(1)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', credpath)
            sleep(2)
            os.remove('exp_log')
            os.remove('new.pts')
            os.remove('backgroundtilt.py')
        except Exception as e:
            print(f"cred_no_correct_run:{e}")

    def velox_no_correct_run(self):
        try:
            # t0 = time.time()
            # workingpath = initwork().setup_workingpath()
            # veloxpath = initwork().setup_veloxpath(workingpath)
            # edpath = initwork().setup_edpath(veloxpath)
            # os.chdir(edpath)
            # self.runhead()
            if TEM.get_beam_blanked() == 'True':
                TEM.set_beam_blanked('False')
            # log = open("exp_log", "a+")
            # print('', file=log, flush=True)
            # print('', file=log, flush=True)
            # print('+++++++Acquire start+++++++', file=log, flush=True)
            # print('This run uses the continuous rotation method without drift correction', file=log, flush=True)
            # print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_velox()
            # self.generate_pets_file()
            # self.copyfile('new.pts', veloxpath)
            # sleep(1)
            # t1 = time.time()
            # dt = t1 - t0
            # dt = format(dt, '.2f')
            # print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            # print('+++++++Acquire end+++++++', file=log, flush=True)
            # log.close()
            # self.copyfile('exp_log', veloxpath)
            # sleep(2)
            # os.remove('exp_log')
            # os.remove('new.pts')
            # os.remove('backgroundtilt.py')
        except Exception as e:
            print(f"velox_no_correct_run:{e}")

    def cred_online_correct_run1(self):
        try:
            global image_forecast_time
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            credpath = initwork().setup_credpath(workingpath)
            driftpath = initwork().setup_driftpath(workingpath)
            edpath = initwork().setup_edpath(credpath)
            os.chdir(driftpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run measures the drift value', file=log, flush=True)
            print(str(self.drift_num + 1) + " frames will be saved to the 'drift' folder", file=log, flush=True)
            # messagebox().before_drift_correction()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            print('Start to measure the drift during rotating the stage with alpha......', file=log, flush=True)
            drift_measure().xy_shift()
            print('Drift measurement finished, a drift_value.txt file has been generated.', file=log, flush=True)
            t1 = time.time()
            dt1 = t1 - t0
            dt1 = format(dt1, '.2f')
            print('Total elapsed time for drift measurement: ' + str(dt1) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            self.copyfile('drift_value.txt', edpath)
            image_forecast_time = 0.0
            return t1, log, edpath, credpath  # 返回需要在下一个函数中使用的变量
        except Exception as e:
            print(f"cred_online_correct_run1:{e}")

    def cred_online_correct_run2(self, t1, log, edpath, credpath):
        try:
            os.chdir(edpath)
            self.runhead()
            TEM.set_screen_position('UP')
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the continuous rotation method with drift correction', file=log, flush=True)
            print(str(self.num) + " frames will be saved to the 'cred' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            stepwise_acquire().loop_cred_drift_correct()
            self.generate_pets_file()
            self.copyfile('new.pts', credpath)
            sleep(1)
            t2 = time.time()
            dt2 = t2 - t1
            dt2 = format(dt2, '.2f')
            print('Total elapsed time: ' + str(dt2) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', credpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
        except Exception as e:
            print(f"cred_online_correct_run2:{e}")

    def scred_online_correct_run1(self):
        try:
            global image_forecast_time
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            scredpath = initwork().setup_scredpath(workingpath)
            edpath = initwork().setup_edpath(scredpath)
            driftpath = initwork().setup_driftpath(workingpath)
            os.chdir(driftpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run measures the drift value', file=log, flush=True)
            print(str(self.drift_num + 1) + " frames will be saved to the 'drift' folder", file=log, flush=True)
            # messagebox().before_drift_correction()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            print('Start to measure the drift during rotating the stage with alpha......', file=log, flush=True)
            drift_measure().xy_shift()
            print('Drift measurement finished, a drift_value.txt file has been generated.', file=log, flush=True)
            t1 = time.time()
            dt1 = t1 - t0
            dt1 = format(dt1, '.2f')
            print('Total elapsed time for drift measurement: ' + str(dt1) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            self.copyfile('drift_value.txt', edpath)
            image_forecast_time = 0.0
            TEM.set_screen_position('DOWN')
            return t1, log, edpath, scredpath  # 返回需要在下一个函数中使用的变量
        except Exception as e:
            print(f"scred_online_correct_run1:{e}")

    def scred_online_correct_run2(self, t1, log, edpath, scredpath):
        try:
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the stepwise continuous rotation method with drift correction', file=log, flush=True)
            print(str(self.num) + " frames will be saved to the 'scred' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_scred_drift_correct()
            self.generate_pets_file()
            self.copyfile('new.pts', scredpath)
            sleep(1)
            t2 = time.time()
            dt2 = t2 - t1
            dt2 = format(dt2, '.2f')
            print('Total elapsed time: ' + str(dt2) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', scredpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
            os.remove('backgroundtilt.py')
            os.remove('backgroundcamera.py')
        except Exception as e:
            print(f"scred_online_correct_run2:{e}")

    def red_online_correct_run1(self):
        try:
            global image_forecast_time
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            driftpath = initwork().setup_driftpath(workingpath)
            redpath = initwork().setup_redpath(workingpath)
            edpath = initwork().setup_edpath(redpath)
            os.chdir(driftpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run measures the drift value', file=log, flush=True)
            print(str(self.drift_num + 1) + " frames will be saved to the 'drift' folder", file=log, flush=True)
            # messagebox().before_drift_correction()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            TEM.set_beam_blanked(False)
            print('Start to measure the drift during rotating the stage with alpha......', file=log, flush=True)
            drift_measure().xy_shift()
            print('Drift measurement finished, a drift_value.txt file has been generated.', file=log, flush=True)
            t1 = time.time()
            dt1 = t1 - t0
            dt1 = format(dt1, '.2f')
            print('Total elapsed time for drift measurement: ' + str(dt1) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            self.copyfile('drift_value.txt', edpath)
            image_forecast_time = 0.0
            return t1, log, edpath, redpath  # 返回需要在下一个函数中使用的变量
        except Exception as e:
            print(f"red_online_correct_run1:{e}")

    def red_online_correct_run2(self, t1, log, edpath, redpath):
        try:
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")  # 已在上一个函数中打开，这里不需要重复打开
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the stepwise rotation method with drift correction', file=log, flush=True)
            print(str(self.num) + " frames will be saved to the 'cred' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_red_drift_correct()
            self.generate_pets_file()
            self.copyfile('new.pts', redpath)
            sleep(1)
            t2 = time.time()
            dt2 = t2 - t1
            dt2 = format(dt2, '.2f')
            print('Total elapsed time: ' + str(dt2) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', redpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
        except Exception as e:
            print(f"red_online_correct_run2:{e}")

    def velox_online_correct_run1(self):
        try:
            global image_forecast_time
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            driftpath = initwork().setup_driftpath(workingpath)
            veloxpath = initwork().setup_veloxpath(workingpath)
            edpath = initwork().setup_edpath(veloxpath)
            os.chdir(driftpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run measures the drift value', file=log, flush=True)
            print(str(self.drift_num + 1) + " frames will be saved to the 'drift' folder", file=log, flush=True)
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            TEM.set_beam_blanked(False)
            print('Start to measure the drift during rotating the stage with alpha......', file=log, flush=True)
            drift_measure().xy_shift()
            print('Drift measurement finished, a drift_value.txt file has been generated.', file=log, flush=True)
            t1 = time.time()
            dt1 = t1 - t0
            dt1 = format(dt1, '.2f')
            print('Total elapsed time for drift measurement: ' + str(dt1) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            self.copyfile('drift_value.txt', edpath)
            image_forecast_time = 0.0
            return t1, log, edpath, veloxpath  # 返回需要在下一个函数中使用的变量
        except Exception as e:
            print(f"velox_online_correct_run1:{e}")

    def velox_online_correct_run2(self, t1, log, edpath, veloxpath):
        try:
            # os.chdir(edpath)
            # self.runhead()
            # log = open("exp_log", "a+")  # 已在上一个函数中打开，这里不需要重复打开
            # print('', file=log, flush=True)
            # print('', file=log, flush=True)
            # print('+++++++Acquire start+++++++', file=log, flush=True)
            # print('This run uses the stepwise rotation method with drift correction', file=log, flush=True)
            # print(str(self.num) + " frames will be saved to the 'velox' folder", file=log, flush=True)
            # print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_velox_drift_correct()
            # self.generate_pets_file()
            # self.copyfile('new.pts', veloxpath)
            sleep(1)
            # t2 = time.time()
            # dt2 = t2 - t1
            # dt2 = format(dt2, '.2f')
            # print('Total elapsed time: ' + str(dt2) + ' s.', file=log, flush=True)
            # print('+++++++Acquire end+++++++', file=log, flush=True)
            # log.close()
            # self.copyfile('exp_log', veloxpath)
            # sleep(2)
            # os.remove('new.pts')
            # os.remove('exp_log')
        except Exception as e:
            print(f"velox_online_correct_run2:{e}")

    def scred_offline_correct_run(self):
        try:
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            scredpath = initwork().setup_scredpath(workingpath)
            edpath = initwork().setup_edpath(scredpath)
            os.chdir(filesavepath)
            self.copyfile('drift_value.txt', edpath)
            # MyMessageBox().before_offline_correction()
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the stepwise continuous rotation method with drift correction', file=log, flush=True)
            print(str(self.num) + " frames will be saved to the 'scred' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_scred_drift_correct()
            self.generate_pets_file()
            self.copyfile('new.pts', scredpath)
            sleep(1)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', scredpath)
            sleep(2)
            print("ofline paht", os.getcwd())
            os.remove('new.pts')
            os.remove('exp_log')
            os.remove('backgroundtilt.py')
            os.remove('backgroundcamera.py')
        except Exception as e:
            print(f"scred_offline_correct_run:{e}")

    def cred_offline_correct_run(self):
        try:
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            credpath = initwork().setup_credpath(workingpath)
            edpath = initwork().setup_edpath(credpath)
            os.chdir(filesavepath)
            self.copyfile('drift_value.txt', edpath)
            # MyMessageBox().before_offline_correction()
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the continuous rotation method with drift correction', file=log, flush=True)
            print(str(self.num) + " frames will be saved to the 'cred' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_cred_drift_correct()
            self.generate_pets_file()
            self.copyfile('new.pts', credpath)
            sleep(1)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', credpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
        except Exception as e:
            print(f"cred_offline_correct_run:{e}")

    def red_offline_correct_run(self):
        try:
            t0 = time.time()
            workingpath = initwork().setup_workingpath()
            redpath = initwork().setup_redpath(workingpath)
            edpath = initwork().setup_edpath(redpath)
            os.chdir(filesavepath)
            # MyMessageBox().before_offline_correction()
            self.copyfile('drift_value.txt', edpath)
            os.chdir(edpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run uses the stepwise rotation method with drift correction', file=log, flush=True)
            print(str(self.num + 1) + " frames will be saved to the 'red' folder", file=log, flush=True)
            print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            # MyMessageBox().before_ed_acquire()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_red_drift_correct()
            self.generate_pets_file()
            self.copyfile('new.pts', redpath)
            sleep(1)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            self.copyfile('exp_log', redpath)
            sleep(2)
            os.remove('new.pts')
            os.remove('exp_log')
        except Exception as e:
            print(f"red_offline_correct_run:{e}")

    def velox_offline_correct_run(self):
        try:
            # t0 = time.time()
            # workingpath = initwork().setup_workingpath()
            # veloxpath = initwork().setup_veloxpath(workingpath)
            # edpath = initwork().setup_edpath(veloxpath)
            # os.chdir(filesavepath)
            # MyMessageBox().before_offline_correction()
            # self.copyfile('drift_value.txt', edpath)
            # os.chdir(edpath)
            # self.runhead()
            # log = open("exp_log", "a+")
            # print('', file=log, flush=True)
            # print('', file=log, flush=True)
            # print('+++++++Acquire start+++++++', file=log, flush=True)
            # print('This run uses the stepwise rotation method with drift correction', file=log, flush=True)
            # print(str(self.num + 1) + " frames will be saved to the 'velox' folder", file=log, flush=True)
            # print("The generated 'ImageList.txt' file records the file names and tilt angles.", file=log, flush=True)
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            stepwise_acquire().loop_velox_drift_correct()
            # self.generate_pets_file()
            # self.copyfile('new.pts', veloxpath)
            # sleep(1)
            # t1 = time.time()
            # dt = t1 - t0
            # dt = format(dt, '.2f')
            # print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            # print('+++++++Acquire end+++++++', file=log, flush=True)
            # log.close()
            # self.copyfile('exp_log', veloxpath)
            # sleep(2)
            # os.remove('new.pts')
            # os.remove('exp_log')
        except Exception as e:
            print(f"velox_offline_correct_run:{e}")

    def only_drift_run(self):
        try:
            t0 = time.time()
            self.workingpath = initwork().setup_workingpath()
            self.driftpath = initwork().setup_driftpath(self.workingpath)
            os.chdir(codepath)
            update_input()
            os.chdir(self.driftpath)
            self.runhead()
            log = open("exp_log", "a+")
            print('', file=log, flush=True)
            print('', file=log, flush=True)
            print('+++++++Acquire start+++++++', file=log, flush=True)
            print('This run only measures the drift value', file=log, flush=True)
            print(str(self.drift_num + 1) + " frames will be saved to the 'drift' folder", file=log, flush=True)
            # MyMessageBox().before_drift_correction()
            TEM.set_column_valves_open(True)
            TEM.set_screen_position('UP')
            TEM.set_beam_blanked(False)
            print('Start to measure the drift during rotating the stage with alpha......', file=log, flush=True)
            drift_measure().xy_shift()
            print('Drift measurement finished, a drift_value.txt file has been generated.', file=log, flush=True)
            t1 = time.time()
            dt = t1 - t0
            dt = format(dt, '.2f')
            print('Total elapsed time: ' + str(dt) + ' s.', file=log, flush=True)
            print('+++++++Acquire end+++++++', file=log, flush=True)
            log.close()
            TEM.set_beam_blanked(True)
            TEM.set_column_valves_open(False)
        except Exception as e:
            print(f"only_drift_run:{e}")


# ###############################################################

class Ui_MainWindow(object):
    def __init__(self, *args, **kwargs):
        super(Ui_MainWindow, self).__init__()
        self.root = tk.Tk()
        self.root.withdraw()  # 隐藏主窗口
        # self.microscope = Microscope()
        self.microscope = TEM  # 或者是你使用的具体显微镜类的构造方法
        with open('params.json', 'r') as config_file:
            config = json.load(config_file)
        self.Exposure_Time = config.get('Exposure_Time', 0.5)
        self.path = config.get('path', '')
        self.binning = config.get('binning', 1)
        self.output_dir = config.get('output_dir')
        self.messageBox = MessageBox()

        # UI 相关的设置
        self.Start_Angle = config.get('Start_Angle', 0)
        self.End_Angle = config.get('End_Angle', 0)
        self.Degree_Speed = config.get('Degree_Speed', 0)
        self.intensity_factor = config.get('intensity_factor', 0.01)
        self.fineinc = config.get('fineinc', 1)
        self.Start_tilt = config.get('StartTilt', 20)
        self.titl_max = config.get('Start_tilt', 85)
        self.Start_inc = config.get('Start_inc', 10)
        self.Free_Time = config.get('Free_Time', 0.15)
        self.drift_step = config.get("drift_step", 2)
        self.Drift_Exposure_Time = config.get("Drift_Exposure_Time", 0.15)
        self.methods = config.get("methods", "only_drift")
        self.Drift_Correction = config.get("Drift_Correction", "online_correct")
        self.drift_binning = config.get("drift_binning", 1)
        self.beamstop = config.get("beamstop", "half")
        # Camera是名字数组
        self.Camera = self.microscope.get_cameras().keys()
        self.imgWindow = None
        # 存储图片的数组
        self.scenes = []
        # 是否保存按钮
        self.drift_image_save = config.get("drift_image_save", 0)
        # 初始化输出目录为 None
        self.parent = None  # 新添加的属性，用于存储父窗口
        self.current_index = 0
        self.image_counter = 1

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1024, 720)
        MainWindow.setMinimumSize(QtCore.QSize(1024, 720))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("*{\n"
                                 "\n"
                                 "    color: #fff;\n"
                                 "}\n"
                                 "\n"
                                 "#MainWindow{\n"
                                 "    border-image: url(./img/main-bg.jpeg);\n"
                                 "    background-color :#002551;\n"
                                 "}\n"
                                 "\n"
                                 "QMenuBar{\n"
                                 "    min-width: 40px;\n"
                                 "    min-height: 30px;\n"
                                 "    padding: 5px;\n"
                                 "    background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 rgba(3, 155, 252, 0), stop:0.20 rgba(3, 43, 60, 88), stop:0.5 rgba(3,27, 55, 84), stop:0.80 rgba(3, 155, 252, 60), stop:1 rgba(3, 155, 252, 2));\n"
                                 "}\n"
                                 "\n"
                                 "QMenuBar::selected{background-color:transparent;}\n"
                                 "\n"
                                 "QMenu{\n"
                                 "    background-color: #fff;\n"
                                 "    border-radius: 5px;\n"
                                 "}\n"
                                 "QMenu::item{\n"
                                 "  padding:11px 32px;\n"
                                 "  color:rgba(51,51,51,1);\n"
                                 "  font-size:14px;\n"
                                 "}\n"
                                 "QMenu::item:hover{\n"
                                 "  background-color:#dff9fb;\n"
                                 "}\n"
                                 "QMenu::item:selected{\n"
                                 "  background-color: #dff9fb;\n"
                                 "}\n"
                                 "\n"
                                 "QRadioButton::indicator::checked {\n"
                                 "    background: #21be2b;\n"
                                 "    border-radius: 5px;\n"
                                 "}\n"
                                 "\n"
                                 "QToolTip {\n"
                                 "    border-image:  qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(1, 32, 66, 255), stop:1 rgba(26, 110, 180, 255));\n"
                                 "    border-radius: 5px;\n"
                                 "    color: #ddd;\n"
                                 "}")
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("*{\n"
                                         "    padding: 0;\n"
                                         "    margin: 0;\n"
                                         "    background-color: transparent;\n"
                                         "    border: none;\n"
                                         "    font: 9pt \"Arial\";\n"
                                         "    /*color: #c7ecee;*/\n"
                                         "}\n"
                                         "\n"
                                         "#centralwidget{\n"
                                         "    background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 rgba(3, 155, 252, 0), stop:0.20 rgba(3, 43, 60, 88), stop:0.5 rgba(3,27, 55, 84), stop:0.80 rgba(3, 155, 252, 60), stop:1 rgba(3, 155, 252, 2));\n"
                                         "\n"
                                         "}\n"
                                         "\n"
                                         "QTabWidget::pane { /* The tab widget frame */\n"
                                         "    border-top: 2px solid #C2C7CB;\n"
                                         "}\n"
                                         "\n"
                                         "QTabWidget::tab-bar {\n"
                                         "    left: 5px; /* move to the right by 5px */\n"
                                         "}\n"
                                         "\n"
                                         "/* Style the tab using the tab sub-control. Note that\n"
                                         "    it reads QTabBar _not_ QTabWidget */\n"
                                         "QTabBar::tab {\n"
                                         "    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                         "                                stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,\n"
                                         "                                stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);\n"
                                         "    border: 2px solid #C4C4C3;\n"
                                         "    border-bottom-color: #C2C7CB; /* same as the pane color */\n"
                                         "    border-radius: 0px;\n"
                                         "    border-top-left-radius: 5px;\n"
                                         "    border-top-right-radius: 5px;\n"
                                         "    min-width: 8ex;\n"
                                         "    padding: 2px;\n"
                                         "}\n"
                                         "\n"
                                         "QTabBar::tab:selected, QTabBar::tab:hover {\n"
                                         "    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
                                         "                                stop: 0 #fafafa, stop: 0.4 #f4f4f4,\n"
                                         "                                stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);\n"
                                         "}\n"
                                         "\n"
                                         "QTabBar::tab:selected {\n"
                                         "    border-color: #9B9B9B;\n"
                                         "    border-bottom-color: #C2C7CB; /* same as pane color */\n"
                                         "}\n"
                                         "\n"
                                         "QTabBar::tab:!selected {\n"
                                         "    margin-top: 2px; /* make non-selected tabs look smaller */\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton{\n"
                                         "    background-color:  qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(1, 32, 66, 255), stop:1 rgba(26, 110, 180, 255));\n"
                                         "    border-radius: 5px;\n"
                                         "    color: #ddd;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover{\n"
                                         "    background-color: #789abc;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed{\n"
                                         "    background-color: #89abcd;\n"
                                         "}\n"
                                         "\n"
                                         "QLineEdit,\n"
                                         "QComboBox,\n"
                                         "QLCDNumber,\n"
                                         "QSpinBox{\n"
                                         "    border-bottom-style: solid;\n"
                                         "    border-bottom-width: 1px;\n"
                                         "    border-bottom-color: #abcdef;\n"
                                         "}\n"
                                         "\n"
                                         "QHeaderView\n"
                                         "{\n"
                                         "    color: #fff;\n"
                                         "    background:transparent;\n"
                                         "}\n"
                                         "QHeaderView::section{\n"
                                         "    background:transparent;\n"
                                         "}\n"
                                         "\n"
                                         "#graphicsView_record,\n"
                                         "#textBrowser_log,\n"
                                         "#viewBox_2\n"
                                         "{\n"
                                         "    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(27, 119, 197, 200), stop:1 rgba(188, 219, 242, 200));\n"
                                         "    border-radius: 10%;    \n"
                                         "}\n"
                                         "\n"
                                         "\n"
                                         "\n"
                                         "")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_37 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_37.setSpacing(0)
        self.verticalLayout_37.setObjectName("verticalLayout_37")
        self.Form = QtWidgets.QWidget(self.centralwidget)
        self.Form.setStyleSheet("")
        self.Form.setObjectName("Form")
        self.horizontalLayout_53 = QtWidgets.QHBoxLayout(self.Form)
        self.horizontalLayout_53.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_53.setSpacing(0)
        self.horizontalLayout_53.setObjectName("horizontalLayout_53")
        self.horizontalLayout_65 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_65.setSpacing(0)
        self.horizontalLayout_65.setObjectName("horizontalLayout_65")
        self.groupBox_7 = QtWidgets.QGroupBox(self.Form)
        self.groupBox_7.setTitle("")
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayout_40 = QtWidgets.QVBoxLayout(self.groupBox_7)
        self.verticalLayout_40.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_40.setSpacing(0)
        self.verticalLayout_40.setObjectName("verticalLayout_40")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.tabWidget_2.sizePolicy().hasHeightForWidth())
        self.tabWidget_2.setSizePolicy(sizePolicy)
        self.tabWidget_2.setMaximumSize(QtCore.QSize(16777215, 350))
        self.tabWidget_2.setStyleSheet("QTabWidget::pane { /* The tab widget frame */\n"
                                       "    border-top: 1px solid #C2C7CB;\n"
                                       "}\n"
                                       "\n"
                                       "QTabWidget::tab-bar {\n"
                                       "    left: 0px; /* move to the right by 5px */\n"
                                       "}\n"
                                       "\n"
                                       "/* Style the tab using the tab sub-control. Note that\n"
                                       "    it reads QTabBar _not_ QTabWidget */\n"
                                       "QTabBar::tab {\n"
                                       "    border: none;\n"
                                       "    min-width: 34ex;\n"
                                       "    min-height: 6ex;\n"
                                       "    margin-left: 10px;\n"
                                       "    color: #f1f2f3;\n"
                                       "    font: bold 9pt \"Arial\";\n"
                                       "    border-radius: 5%;\n"
                                       "    background: transparent;\n"
                                       "}\n"
                                       "\n"
                                       "QTabBar::tab:selected, QTabBar::tab:hover {\n"
                                       "    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(27, 119, 197, 200), stop:1 rgba(6, 77, 157, 200));\n"
                                       "}\n"
                                       "\n"
                                       "QTabBar::tab:selected {\n"
                                       "}\n"
                                       "\n"
                                       "QTabBar::tab:!selected {\n"
                                       "    margin-top: 2px; /* make non-selected tabs look smaller */\n"
                                       "}\n"
                                       "\n"
                                       "#title_1,\n"
                                       "#title_2,\n"
                                       "#title_3,\n"
                                       "#title_4{\n"
                                       "    font-weight: bold;\n"
                                       "    color: rgb(223, 249, 251);\n"
                                       "    margin-top: 4px;\n"
                                       "    margin-bottom: 4px;\n"
                                       "}\n"
                                       "")
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setStyleSheet("")
        self.tab_4.setObjectName("tab_4")
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout(self.tab_4)
        self.horizontalLayout_30.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_30.setSpacing(0)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.groupBox_8 = QtWidgets.QGroupBox(self.tab_4)
        self.groupBox_8.setTitle("")
        self.groupBox_8.setObjectName("groupBox_8")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.groupBox_8)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_8)
        self.tableWidget.setStyleSheet("\n"
                                       "QHeaderView                   \n"
                                       "{\n"
                                       "    background:  rgba(127, 143, 166,0.7); \n"
                                       "    min-height: 35px;    \n"
                                       "    font-size:17px;    \n"
                                       "    color: #fff;\n"
                                       "}\n"
                                       "\n"
                                       "QHeaderView::section{\n"
                                       "\n"
                                       "}\n"
                                       "\n"
                                       "/* 表格设置*/ \n"
                                       "QTableView{  /** QTableView设置 */\n"
                                       "    color: #fff;\n"
                                       "    border: none;\n"
                                       "}\n"
                                       "\n"
                                       "QTableWidget::item\n"
                                       "{\n"
                                       "    border-bottom:1px solid #aaa ;\n"
                                       "}\n"
                                       "\n"
                                       "\n"
                                       "QTableWidget::item\n"
                                       "{\n"
                                       "    color:white;\n"
                                       "    background:transparent;\n"
                                       "}\n"
                                       "QTableWidget::item::selected\n"
                                       "{\n"
                                       "    color:white;\n"
                                       "    background: rgba(255,255,255,0.2);\n"
                                       "}")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(9)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(30)
        self.horizontalLayout_7.addWidget(self.tableWidget)
        self.verticalLayout_5.addWidget(self.groupBox_8)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setContentsMargins(10, -1, 10, -1)
        self.horizontalLayout_29.setSpacing(10)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.label_10 = QtWidgets.QLabel(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setMinimumSize(QtCore.QSize(72, 0))
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_29.addWidget(self.label_10)
        self.lineEdit_exptime2_2 = QtWidgets.QLineEdit(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_exptime2_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_exptime2_2.setSizePolicy(sizePolicy)
        self.lineEdit_exptime2_2.setMaximumSize(QtCore.QSize(16777215, 35))
        self.lineEdit_exptime2_2.setObjectName("lineEdit_exptime2_2")
        self.horizontalLayout_29.addWidget(self.lineEdit_exptime2_2)
        self.pushButton_open_particle_2 = QtWidgets.QPushButton(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_open_particle_2.sizePolicy().hasHeightForWidth())
        self.pushButton_open_particle_2.setSizePolicy(sizePolicy)
        self.pushButton_open_particle_2.setMaximumSize(QtCore.QSize(70, 30))
        self.pushButton_open_particle_2.setObjectName("pushButton_open_particle_2")
        self.horizontalLayout_29.addWidget(self.pushButton_open_particle_2)
        self.horizontalLayout_29.setStretch(1, 3)
        self.horizontalLayout_29.setStretch(2, 1)
        self.verticalLayout_5.addLayout(self.horizontalLayout_29)
        self.verticalLayout_5.setStretch(0, 7)
        self.verticalLayout_5.setStretch(1, 1)
        self.horizontalLayout_6.addLayout(self.verticalLayout_5)
        self.groupBox_5 = QtWidgets.QGroupBox(self.tab_4)
        self.groupBox_5.setStyleSheet("")
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_24.setContentsMargins(0, 11, 0, 0)
        self.verticalLayout_24.setSpacing(5)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.pushButton_Add = QtWidgets.QPushButton(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Add.sizePolicy().hasHeightForWidth())
        self.pushButton_Add.setSizePolicy(sizePolicy)
        self.pushButton_Add.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_Add.setStyleSheet("font-weight: 100;\n"
                                          "")
        self.pushButton_Add.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("svg/添加.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Add.setIcon(icon)
        self.pushButton_Add.setIconSize(QtCore.QSize(22, 22))
        self.pushButton_Add.setObjectName("pushButton_Add")
        self.verticalLayout_24.addWidget(self.pushButton_Add)
        self.pushButton_update_stage = QtWidgets.QPushButton(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_update_stage.sizePolicy().hasHeightForWidth())
        self.pushButton_update_stage.setSizePolicy(sizePolicy)
        self.pushButton_update_stage.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_update_stage.setStyleSheet("font-weight: 100;\n"
                                                   "\n"
                                                   "")
        self.pushButton_update_stage.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("svg/更新.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_update_stage.setIcon(icon1)
        self.pushButton_update_stage.setIconSize(QtCore.QSize(22, 22))
        self.pushButton_update_stage.setObjectName("pushButton_update_stage")
        self.verticalLayout_24.addWidget(self.pushButton_update_stage)
        self.pushButton_Remove = QtWidgets.QPushButton(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Remove.sizePolicy().hasHeightForWidth())
        self.pushButton_Remove.setSizePolicy(sizePolicy)
        self.pushButton_Remove.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_Remove.setStyleSheet("QPushButton{\n"
                                             "    font-weight: 100;\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:hover{\n"
                                             "    cursor: pointer;\n"
                                             "}\n"
                                             "\n"
                                             "")
        self.pushButton_Remove.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("svg/删除.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_Remove.setIcon(icon2)
        self.pushButton_Remove.setIconSize(QtCore.QSize(22, 22))
        self.pushButton_Remove.setObjectName("pushButton_Remove")
        self.verticalLayout_24.addWidget(self.pushButton_Remove)
        self.pushButton_save_particle = QtWidgets.QPushButton(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_save_particle.sizePolicy().hasHeightForWidth())
        self.pushButton_save_particle.setSizePolicy(sizePolicy)
        self.pushButton_save_particle.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_save_particle.setStyleSheet("font-weight: 100;\n"
                                                    "\n"
                                                    "")
        self.pushButton_save_particle.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("svg/保存.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_save_particle.setIcon(icon3)
        self.pushButton_save_particle.setIconSize(QtCore.QSize(22, 22))
        self.pushButton_save_particle.setObjectName("pushButton_save_particle")
        self.verticalLayout_24.addWidget(self.pushButton_save_particle)
        self.pushButton_open_particle = QtWidgets.QPushButton(self.groupBox_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_open_particle.sizePolicy().hasHeightForWidth())
        self.pushButton_open_particle.setSizePolicy(sizePolicy)
        self.pushButton_open_particle.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_open_particle.setStyleSheet("font-weight: 100;\n"
                                                    "\n"
                                                    "")
        self.pushButton_open_particle.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("svg/打开.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_open_particle.setIcon(icon4)
        self.pushButton_open_particle.setIconSize(QtCore.QSize(22, 22))
        self.pushButton_open_particle.setObjectName("pushButton_open_particle")
        self.verticalLayout_24.addWidget(self.pushButton_open_particle)
        self.horizontalLayout_6.addWidget(self.groupBox_5)
        self.horizontalLayout_6.setStretch(0, 9)
        self.horizontalLayout_6.setStretch(1, 1)
        self.horizontalLayout_30.addLayout(self.horizontalLayout_6)
        self.tabWidget_2.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setStyleSheet("#groupBox_2{\n"
                                 "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc03070e, stop:1 #aa267ab8);\n"
                                 "}\n"
                                 "\n"
                                 "#groupBox_9{\n"
                                 "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc113d61, stop:1 #cc021931);\n"
                                 "}\n"
                                 "\n"
                                 "QGroupBox\n"
                                 "{\n"
                                 "    border: 2px solid #4bbdda;\n"
                                 "    border-radius:5px;\n"
                                 "    margin-top:2ex;\n"
                                 "    font:bold 16px;\n"
                                 "}\n"
                                 " \n"
                                 "QGroupBox::title\n"
                                 "{\n"
                                 "    subcontrol-origin:margin;\n"
                                 "    subcontrol-position:top left;\n"
                                 "    padding:0 3px;\n"
                                 "    color: #4bbdda;\n"
                                 "}")
        self.tab_5.setObjectName("tab_5")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.tab_5)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_5)
        self.groupBox_2.setStyleSheet("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_20.setContentsMargins(-1, 20, -1, -1)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_41.setSpacing(0)
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.label_23 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_23.sizePolicy().hasHeightForWidth())
        self.label_23.setSizePolicy(sizePolicy)
        self.label_23.setMinimumSize(QtCore.QSize(100, 0))
        self.label_23.setStyleSheet("")
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_41.addWidget(self.label_23)
        self.lineEdit_tiltspeed = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_tiltspeed.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed.setObjectName("lineEdit_tiltspeed")
        self.horizontalLayout_41.addWidget(self.lineEdit_tiltspeed)
        self.verticalLayout_9.addLayout(self.horizontalLayout_41)
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_39.setSpacing(0)
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.label_19 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_19.sizePolicy().hasHeightForWidth())
        self.label_19.setSizePolicy(sizePolicy)
        self.label_19.setMinimumSize(QtCore.QSize(100, 0))
        self.label_19.setStyleSheet("")
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_39.addWidget(self.label_19)
        self.lineEdit_startangle = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_startangle.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_startangle.setObjectName("lineEdit_startangle")
        self.horizontalLayout_39.addWidget(self.lineEdit_startangle)
        self.verticalLayout_9.addLayout(self.horizontalLayout_39)
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_40.setSpacing(0)
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")
        self.label_22 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_22.sizePolicy().hasHeightForWidth())
        self.label_22.setSizePolicy(sizePolicy)
        self.label_22.setMinimumSize(QtCore.QSize(100, 0))
        self.label_22.setStyleSheet("")
        self.label_22.setObjectName("label_22")
        self.horizontalLayout_40.addWidget(self.label_22)
        self.lineEdit_endangle = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_endangle.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_endangle.setObjectName("lineEdit_endangle")
        self.horizontalLayout_40.addWidget(self.lineEdit_endangle)
        self.verticalLayout_9.addLayout(self.horizontalLayout_40)
        self.pushButton_findangle = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_findangle.sizePolicy().hasHeightForWidth())
        self.pushButton_findangle.setSizePolicy(sizePolicy)
        self.pushButton_findangle.setMaximumSize(QtCore.QSize(16777215, 100))
        self.pushButton_findangle.setStyleSheet("")
        self.pushButton_findangle.setObjectName("pushButton_findangle")
        self.verticalLayout_9.addWidget(self.pushButton_findangle)
        self.verticalLayout_20.addLayout(self.verticalLayout_9)
        self.horizontalLayout_23.addWidget(self.groupBox_2)
        self.groupBox_9 = QtWidgets.QGroupBox(self.tab_5)
        self.groupBox_9.setStyleSheet("font-size:14px;\n"
                                      "font-weight:100;")
        self.groupBox_9.setTitle("")
        self.groupBox_9.setObjectName("groupBox_9")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_9)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setSpacing(0)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_42.setSpacing(0)
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.label_24 = QtWidgets.QLabel(self.groupBox_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_24.sizePolicy().hasHeightForWidth())
        self.label_24.setSizePolicy(sizePolicy)
        self.label_24.setMinimumSize(QtCore.QSize(80, 0))
        self.label_24.setStyleSheet("font-size:14px;")
        self.label_24.setObjectName("label_24")
        self.horizontalLayout_42.addWidget(self.label_24)
        self.lineEdit_tiltspeed_2 = QtWidgets.QLineEdit(self.groupBox_9)
        self.lineEdit_tiltspeed_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_2.setObjectName("lineEdit_tiltspeed_2")
        self.horizontalLayout_42.addWidget(self.lineEdit_tiltspeed_2)
        self.verticalLayout_21.addLayout(self.horizontalLayout_42)
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_43.setSpacing(0)
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.label_25 = QtWidgets.QLabel(self.groupBox_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_25.sizePolicy().hasHeightForWidth())
        self.label_25.setSizePolicy(sizePolicy)
        self.label_25.setMinimumSize(QtCore.QSize(80, 0))
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_43.addWidget(self.label_25)
        self.lineEdit_tiltspeed_3 = QtWidgets.QLineEdit(self.groupBox_9)
        self.lineEdit_tiltspeed_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_3.setObjectName("lineEdit_tiltspeed_3")
        self.horizontalLayout_43.addWidget(self.lineEdit_tiltspeed_3)
        self.verticalLayout_21.addLayout(self.horizontalLayout_43)
        self.horizontalLayout_44 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_44.setSpacing(0)
        self.horizontalLayout_44.setObjectName("horizontalLayout_44")
        self.label_27 = QtWidgets.QLabel(self.groupBox_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_27.sizePolicy().hasHeightForWidth())
        self.label_27.setSizePolicy(sizePolicy)
        self.label_27.setMinimumSize(QtCore.QSize(80, 0))
        self.label_27.setObjectName("label_27")
        self.horizontalLayout_44.addWidget(self.label_27)
        self.lineEdit_tiltspeed_4 = QtWidgets.QLineEdit(self.groupBox_9)
        self.lineEdit_tiltspeed_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_4.setObjectName("lineEdit_tiltspeed_4")
        self.horizontalLayout_44.addWidget(self.lineEdit_tiltspeed_4)
        self.verticalLayout_21.addLayout(self.horizontalLayout_44)
        self.horizontalLayout_45 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_45.setSpacing(0)
        self.horizontalLayout_45.setObjectName("horizontalLayout_45")
        self.label_33 = QtWidgets.QLabel(self.groupBox_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_33.sizePolicy().hasHeightForWidth())
        self.label_33.setSizePolicy(sizePolicy)
        self.label_33.setMinimumSize(QtCore.QSize(80, 0))
        self.label_33.setObjectName("label_33")
        self.horizontalLayout_45.addWidget(self.label_33)
        self.lineEdit_tiltspeed_5 = QtWidgets.QLineEdit(self.groupBox_9)
        self.lineEdit_tiltspeed_5.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_5.setObjectName("lineEdit_tiltspeed_5")
        self.horizontalLayout_45.addWidget(self.lineEdit_tiltspeed_5)
        self.verticalLayout_21.addLayout(self.horizontalLayout_45)
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_46.setSpacing(0)
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        self.label_34 = QtWidgets.QLabel(self.groupBox_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_34.sizePolicy().hasHeightForWidth())
        self.label_34.setSizePolicy(sizePolicy)
        self.label_34.setMinimumSize(QtCore.QSize(80, 0))
        self.label_34.setObjectName("label_34")
        self.horizontalLayout_46.addWidget(self.label_34)
        self.lineEdit_tiltspeed_6 = QtWidgets.QLineEdit(self.groupBox_9)
        self.lineEdit_tiltspeed_6.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_6.setObjectName("lineEdit_tiltspeed_6")
        self.horizontalLayout_46.addWidget(self.lineEdit_tiltspeed_6)
        self.verticalLayout_21.addLayout(self.horizontalLayout_46)
        self.verticalLayout_8.addLayout(self.verticalLayout_21)
        self.horizontalLayout_23.addWidget(self.groupBox_9)
        self.tabWidget_2.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setStyleSheet("/*\n"
                                 "#groupBox_10{\n"
                                 "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc03070e, stop:1 #aa267ab8);\n"
                                 "}\n"
                                 "\n"
                                 "#groupBox_11{\n"
                                 "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc113d61, stop:1 #cc021931);\n"
                                 "}\n"
                                 "\n"
                                 "*/\n"
                                 "\n"
                                 "#groupBox,\n"
                                 "#groupBox_10,\n"
                                 "#groupBox_11\n"
                                 "{\n"
                                 "    border: 1px solid #4bbdda;\n"
                                 "    border-radius:5px;\n"
                                 "    margin-top:2ex;\n"
                                 "    font:bold 14px;\n"
                                 "}\n"
                                 " \n"
                                 "#groupBox::title,\n"
                                 "#groupBox_10::title,\n"
                                 "#groupBox_11::title\n"
                                 "{\n"
                                 "    subcontrol-origin:margin;\n"
                                 "    subcontrol-position:top left;\n"
                                 "    padding:0 3px;\n"
                                 "    color: #4bbdda;\n"
                                 "}")
        self.tab_6.setObjectName("tab_6")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.tab_6)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setSpacing(20)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.groupBox = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_36 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_36.setObjectName("verticalLayout_36")
        self.verticalLayout_45 = QtWidgets.QVBoxLayout()
        self.verticalLayout_45.setSpacing(7)
        self.verticalLayout_45.setObjectName("verticalLayout_45")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_38 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_38.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_38.setSpacing(0)
        self.verticalLayout_38.setObjectName("verticalLayout_38")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout()
        self.verticalLayout_35.setSpacing(1)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self.horizontalLayout_49 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_49.setSpacing(11)
        self.horizontalLayout_49.setObjectName("horizontalLayout_49")
        self.label_32 = QtWidgets.QLabel(self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_32.sizePolicy().hasHeightForWidth())
        self.label_32.setSizePolicy(sizePolicy)
        self.label_32.setMinimumSize(QtCore.QSize(100, 0))
        self.label_32.setStyleSheet("")
        self.label_32.setObjectName("label_32")
        self.horizontalLayout_49.addWidget(self.label_32)
        self.lineEdit_tiltspeed_7 = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_tiltspeed_7.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_7.setObjectName("lineEdit_tiltspeed_7")
        self.horizontalLayout_49.addWidget(self.lineEdit_tiltspeed_7)
        self.label_13 = QtWidgets.QLabel(self.groupBox_6)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_49.addWidget(self.label_13)
        self.verticalLayout_35.addLayout(self.horizontalLayout_49)
        self.horizontalLayout_52 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_52.setSpacing(11)
        self.horizontalLayout_52.setObjectName("horizontalLayout_52")
        self.label_42 = QtWidgets.QLabel(self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_42.sizePolicy().hasHeightForWidth())
        self.label_42.setSizePolicy(sizePolicy)
        self.label_42.setMinimumSize(QtCore.QSize(100, 0))
        self.label_42.setStyleSheet("")
        self.label_42.setObjectName("label_42")
        self.horizontalLayout_52.addWidget(self.label_42)
        self.lineEdit_tiltspeed_8 = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_tiltspeed_8.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_8.setObjectName("lineEdit_tiltspeed_8")
        self.horizontalLayout_52.addWidget(self.lineEdit_tiltspeed_8)
        self.label_14 = QtWidgets.QLabel(self.groupBox_6)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_52.addWidget(self.label_14)
        self.verticalLayout_35.addLayout(self.horizontalLayout_52)
        self.horizontalLayout_55 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_55.setSpacing(11)
        self.horizontalLayout_55.setObjectName("horizontalLayout_55")
        self.label_43 = QtWidgets.QLabel(self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_43.sizePolicy().hasHeightForWidth())
        self.label_43.setSizePolicy(sizePolicy)
        self.label_43.setMinimumSize(QtCore.QSize(150, 0))
        self.label_43.setStyleSheet("")
        self.label_43.setObjectName("label_43")
        self.horizontalLayout_55.addWidget(self.label_43)
        self.lineEdit_tiltspeed_9 = QtWidgets.QLineEdit(self.groupBox_6)
        self.lineEdit_tiltspeed_9.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_tiltspeed_9.setObjectName("lineEdit_tiltspeed_9")
        self.horizontalLayout_55.addWidget(self.lineEdit_tiltspeed_9)
        self.label_15 = QtWidgets.QLabel(self.groupBox_6)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_55.addWidget(self.label_15)
        self.verticalLayout_35.addLayout(self.horizontalLayout_55)
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.label_16 = QtWidgets.QLabel(self.groupBox_6)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_36.addWidget(self.label_16)
        self.comboBox = QtWidgets.QComboBox(self.groupBox_6)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_36.addWidget(self.comboBox)
        self.verticalLayout_35.addLayout(self.horizontalLayout_36)
        self.horizontalLayout_81 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_81.setContentsMargins(-1, 5, -1, 5)
        self.horizontalLayout_81.setObjectName("horizontalLayout_81")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())
        self.checkBox.setSizePolicy(sizePolicy)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_81.addWidget(self.checkBox)
        self.verticalLayout_35.addLayout(self.horizontalLayout_81)
        self.verticalLayout_38.addLayout(self.verticalLayout_35)
        self.verticalLayout_45.addWidget(self.groupBox_6)
        self.verticalLayout_44 = QtWidgets.QVBoxLayout()
        self.verticalLayout_44.setObjectName("verticalLayout_44")
        self.horizontalLayout_60 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_60.setObjectName("horizontalLayout_60")
        self.label_18 = QtWidgets.QLabel(self.groupBox)
        self.label_18.setObjectName("label_18")
        self.horizontalLayout_60.addWidget(self.label_18)
        self.comboBox_4 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.horizontalLayout_60.addWidget(self.comboBox_4)
        self.verticalLayout_44.addLayout(self.horizontalLayout_60)
        self.horizontalLayout_61 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_61.setObjectName("horizontalLayout_61")
        self.label_44 = QtWidgets.QLabel(self.groupBox)
        self.label_44.setObjectName("label_44")
        self.horizontalLayout_61.addWidget(self.label_44)
        self.comboBox_5 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.horizontalLayout_61.addWidget(self.comboBox_5)
        self.verticalLayout_44.addLayout(self.horizontalLayout_61)
        self.horizontalLayout_62 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_62.setObjectName("horizontalLayout_62")
        self.label_45 = QtWidgets.QLabel(self.groupBox)
        self.label_45.setObjectName("label_45")
        self.horizontalLayout_62.addWidget(self.label_45)
        self.comboBox_6 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.horizontalLayout_62.addWidget(self.comboBox_6)
        self.verticalLayout_44.addLayout(self.horizontalLayout_62)
        self.verticalLayout_45.addLayout(self.verticalLayout_44)
        self.verticalLayout_36.addLayout(self.verticalLayout_45)
        self.horizontalLayout_17.addWidget(self.groupBox)
        self.verticalLayout_34 = QtWidgets.QVBoxLayout()
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.groupBox_10 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_10.setStyleSheet("")
        self.groupBox_10.setObjectName("groupBox_10")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.groupBox_10)
        self.verticalLayout_25.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_35 = QtWidgets.QLabel(self.groupBox_10)
        self.label_35.setObjectName("label_35")
        self.horizontalLayout_8.addWidget(self.label_35)
        self.lineEdit_exptime = QtWidgets.QLineEdit(self.groupBox_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_exptime.sizePolicy().hasHeightForWidth())
        self.lineEdit_exptime.setSizePolicy(sizePolicy)
        self.lineEdit_exptime.setMaximumSize(QtCore.QSize(16777215, 35))
        self.lineEdit_exptime.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_exptime.setObjectName("lineEdit_exptime")
        self.horizontalLayout_8.addWidget(self.lineEdit_exptime)
        self.verticalLayout_22.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_48 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_48.setObjectName("horizontalLayout_48")
        self.label_36 = QtWidgets.QLabel(self.groupBox_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_36.sizePolicy().hasHeightForWidth())
        self.label_36.setSizePolicy(sizePolicy)
        self.label_36.setObjectName("label_36")
        self.horizontalLayout_48.addWidget(self.label_36)
        self.radioButton_binning1 = QtWidgets.QRadioButton(self.groupBox_10)
        self.radioButton_binning1.setObjectName("radioButton_binning1")
        self.horizontalLayout_48.addWidget(self.radioButton_binning1)
        self.radioButton_binning2 = QtWidgets.QRadioButton(self.groupBox_10)
        self.radioButton_binning2.setObjectName("radioButton_binning2")
        self.horizontalLayout_48.addWidget(self.radioButton_binning2)
        self.radioButton_binning4 = QtWidgets.QRadioButton(self.groupBox_10)
        self.radioButton_binning4.setObjectName("radioButton_binning4")
        self.horizontalLayout_48.addWidget(self.radioButton_binning4)
        self.radioButton_binning8 = QtWidgets.QRadioButton(self.groupBox_10)
        self.radioButton_binning8.setObjectName("radioButton_binning8")
        self.horizontalLayout_48.addWidget(self.radioButton_binning8)
        self.verticalLayout_22.addLayout(self.horizontalLayout_48)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setSpacing(0)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.label_30 = QtWidgets.QLabel(self.groupBox_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_30.sizePolicy().hasHeightForWidth())
        self.label_30.setSizePolicy(sizePolicy)
        self.label_30.setMinimumSize(QtCore.QSize(35, 0))
        self.label_30.setObjectName("label_30")
        self.horizontalLayout_21.addWidget(self.label_30)
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setMaximumSize(QtCore.QSize(16777215, 30))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.horizontalLayout_21.addWidget(self.comboBox_2)
        self.verticalLayout_22.addLayout(self.horizontalLayout_21)
        self.verticalLayout_25.addLayout(self.verticalLayout_22)
        self.verticalLayout_34.addWidget(self.groupBox_10)
        self.groupBox_11 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_11.setStyleSheet("")
        self.groupBox_11.setObjectName("groupBox_11")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.groupBox_11)
        self.verticalLayout_28.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(11, 1, 11, 11)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_17 = QtWidgets.QLabel(self.groupBox_11)
        self.label_17.setMinimumSize(QtCore.QSize(0, 35))
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_9.addWidget(self.label_17)
        self.lineEdit_workpath = QtWidgets.QLineEdit(self.groupBox_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_workpath.sizePolicy().hasHeightForWidth())
        self.lineEdit_workpath.setSizePolicy(sizePolicy)
        self.lineEdit_workpath.setMaximumSize(QtCore.QSize(16777215, 30))
        self.lineEdit_workpath.setObjectName("lineEdit_workpath")
        self.horizontalLayout_9.addWidget(self.lineEdit_workpath)
        self.pushButton_workpath = QtWidgets.QPushButton(self.groupBox_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_workpath.sizePolicy().hasHeightForWidth())
        self.pushButton_workpath.setSizePolicy(sizePolicy)
        self.pushButton_workpath.setMaximumSize(QtCore.QSize(50, 30))
        self.pushButton_workpath.setBaseSize(QtCore.QSize(0, 0))
        self.pushButton_workpath.setStyleSheet("    padding-left: 10px;\n"
                                               "    padding-right: 10px;")
        self.pushButton_workpath.setObjectName("pushButton_workpath")
        self.horizontalLayout_9.addWidget(self.pushButton_workpath)
        self.verticalLayout_23.addLayout(self.horizontalLayout_9)
        self.verticalLayout_28.addLayout(self.verticalLayout_23)
        self.verticalLayout_34.addWidget(self.groupBox_11)
        self.verticalLayout_34.setStretch(0, 2)
        self.verticalLayout_34.setStretch(1, 1)
        self.horizontalLayout_17.addLayout(self.verticalLayout_34)
        self.horizontalLayout_18.addLayout(self.horizontalLayout_17)
        self.tabWidget_2.addTab(self.tab_6, "")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout(self.tab_7)
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout()
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.listWidget_particle_searching = QtWidgets.QTextBrowser(self.tab_7)
        self.listWidget_particle_searching.setMaximumSize(QtCore.QSize(675, 295))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.listWidget_particle_searching.setFont(font)
        self.listWidget_particle_searching.setStyleSheet("border:none;\n"
                                                         "background: #121234;")
        self.listWidget_particle_searching.setObjectName("listWidget_particle_searching")
        self.verticalLayout_31.addWidget(self.listWidget_particle_searching)
        self.horizontalLayout_26.addLayout(self.verticalLayout_31)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setSpacing(7)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout()
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.pushButton_summary = QtWidgets.QPushButton(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_summary.sizePolicy().hasHeightForWidth())
        self.pushButton_summary.setSizePolicy(sizePolicy)
        self.pushButton_summary.setMinimumSize(QtCore.QSize(0, 29))
        self.pushButton_summary.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_summary.setFont(font)
        self.pushButton_summary.setStyleSheet("")
        self.pushButton_summary.setObjectName("pushButton_summary")
        self.verticalLayout_33.addWidget(self.pushButton_summary)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout()
        self.verticalLayout_32.setSpacing(5)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.pushButton_singlerun = QtWidgets.QPushButton(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_singlerun.sizePolicy().hasHeightForWidth())
        self.pushButton_singlerun.setSizePolicy(sizePolicy)
        self.pushButton_singlerun.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_singlerun.setFont(font)
        self.pushButton_singlerun.setStyleSheet("")
        self.pushButton_singlerun.setCheckable(False)
        self.pushButton_singlerun.setObjectName("pushButton_singlerun")
        self.verticalLayout_32.addWidget(self.pushButton_singlerun)
        self.pushButton_batchrun = QtWidgets.QPushButton(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_batchrun.sizePolicy().hasHeightForWidth())
        self.pushButton_batchrun.setSizePolicy(sizePolicy)
        self.pushButton_batchrun.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_batchrun.setFont(font)
        self.pushButton_batchrun.setStyleSheet("")
        self.pushButton_batchrun.setCheckable(False)
        self.pushButton_batchrun.setObjectName("pushButton_batchrun")
        self.verticalLayout_32.addWidget(self.pushButton_batchrun)
        self.horizontalLayout_2.addLayout(self.verticalLayout_32)
        self.pushButton_stop = QtWidgets.QPushButton(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stop.sizePolicy().hasHeightForWidth())
        self.pushButton_stop.setSizePolicy(sizePolicy)
        self.pushButton_stop.setMaximumSize(QtCore.QSize(90, 90))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_stop.setFont(font)
        self.pushButton_stop.setStyleSheet("    color: #dff9fb;\n"
                                           "    font-size: 17px;\n"
                                           "    font-weight: bold;")
        self.pushButton_stop.setIconSize(QtCore.QSize(30, 30))
        self.pushButton_stop.setCheckable(False)
        self.pushButton_stop.setObjectName("pushButton_stop")
        self.horizontalLayout_2.addWidget(self.pushButton_stop)
        self.verticalLayout_33.addLayout(self.horizontalLayout_2)
        self.verticalLayout_33.setStretch(0, 1)
        self.verticalLayout_33.setStretch(1, 1)
        self.verticalLayout_17.addLayout(self.verticalLayout_33)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_12 = QtWidgets.QLabel(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setStyleSheet("font-weight: bold;\n"
                                    "color: #2980b9;")
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_3.addWidget(self.label_12)
        self.lineEdit = QtWidgets.QLineEdit(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setMaximumSize(QtCore.QSize(50, 16777215))
        self.lineEdit.setStyleSheet("    border: none;\n"
                                    "font-weight: bold;\n"
                                    "color: #2980b9;")
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_3.addWidget(self.lineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_3)
        self.progressBar = QtWidgets.QProgressBar(self.tab_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progressBar.sizePolicy().hasHeightForWidth())
        self.progressBar.setSizePolicy(sizePolicy)
        self.progressBar.setMaximumSize(QtCore.QSize(16777215, 70))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.progressBar.setFont(font)
        self.progressBar.setStyleSheet("QProgressBar {\n"
                                       "    border: 2px solid grey;\n"
                                       "    border-radius: 10px;\n"
                                       "    qproperty-alignment:AlignCenter;\n"
                                       "    background-color: #90dff9fb;\n"
                                       "}\n"
                                       "\n"
                                       "QProgressBar::chunk {\n"
                                       "    background-color: #0fbcf9;\n"
                                       "    width: 10px;\n"
                                       "    border-radius: 20px;\n"
                                       "}")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_10.addWidget(self.progressBar)
        self.verticalLayout_17.addLayout(self.verticalLayout_10)
        self.verticalLayout_17.setStretch(0, 2)
        self.verticalLayout_17.setStretch(1, 1)
        self.horizontalLayout_26.addLayout(self.verticalLayout_17)
        self.horizontalLayout_26.setStretch(0, 3)
        self.horizontalLayout_26.setStretch(1, 2)
        self.horizontalLayout_33.addLayout(self.horizontalLayout_26)
        self.tabWidget_2.addTab(self.tab_7, "")
        self.verticalLayout_2.addWidget(self.tabWidget_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setMaximumSize(QtCore.QSize(16777215, 250))
        self.groupBox_3.setStyleSheet("")
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_29.setContentsMargins(-1, -1, -1, 0)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.label_7 = QtWidgets.QLabel(self.groupBox_3)
        self.label_7.setStyleSheet("    color: #bcdbf2;\n"
                                   "    font-size: 17px;\n"
                                   "    font-weight: bold;")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_29.addWidget(self.label_7)
        self.tabWidget_3 = QtWidgets.QTabWidget(self.groupBox_3)
        self.tabWidget_3.setStyleSheet("QTabWidget::pane { /* The tab widget frame */\n"
                                       "    border-top: 1px solid #C2C7CB;\n"
                                       "}\n"
                                       "\n"
                                       "QTabWidget::tab-bar {\n"
                                       "    left: 0px; /* move to the right by 5px */\n"
                                       "}\n"
                                       "\n"
                                       "/* Style the tab using the tab sub-control. Note that\n"
                                       "    it reads QTabBar _not_ QTabWidget */\n"
                                       "QTabBar::tab {\n"
                                       "    border: none;\n"
                                       "    min-width: 30ex;\n"
                                       "    min-height: 5ex;\n"
                                       "    margin-left: 10px;\n"
                                       "    font: bold 10pt \"Arial\";\n"
                                       "    border-radius: 5%;\n"
                                       "    background: transparent;\n"
                                       "}\n"
                                       "\n"
                                       "QTabBar::tab:selected, QTabBar::tab:hover {\n"
                                       "\n"
                                       "    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(27, 119, 197, 200), stop:1 rgba(6, 77, 157, 200));\n"
                                       "}\n"
                                       "\n"
                                       "QTabBar::tab:selected {\n"
                                       "}\n"
                                       "\n"
                                       "QTabBar::tab:!selected {\n"
                                       "    margin-top: 2px; /* make non-selected tabs look smaller */\n"
                                       "}\n"
                                       "\n"
                                       "QLabel{    \n"
                                       "    font: 9pt \"Arial\";\n"
                                       "    font-weight: 100;\n"
                                       "}")
        self.tabWidget_3.setObjectName("tabWidget_3")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.tab_8)
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.pushButton_openvalve = QtWidgets.QPushButton(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_openvalve.sizePolicy().hasHeightForWidth())
        self.pushButton_openvalve.setSizePolicy(sizePolicy)
        self.pushButton_openvalve.setMaximumSize(QtCore.QSize(16777215, 70))
        self.pushButton_openvalve.setStyleSheet("font-size:14px;\n"
                                                "font-weight:bold;\n"
                                                "")
        self.pushButton_openvalve.setObjectName("pushButton_openvalve")
        self.horizontalLayout_10.addWidget(self.pushButton_openvalve)
        self.pushButton_closevalve = QtWidgets.QPushButton(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_closevalve.sizePolicy().hasHeightForWidth())
        self.pushButton_closevalve.setSizePolicy(sizePolicy)
        self.pushButton_closevalve.setMaximumSize(QtCore.QSize(16777215, 70))
        self.pushButton_closevalve.setStyleSheet("font-size:14px;\n"
                                                 "font-weight:bold;\n"
                                                 "")
        self.pushButton_closevalve.setObjectName("pushButton_closevalve")
        self.horizontalLayout_10.addWidget(self.pushButton_closevalve)
        self.pushButton_screenup = QtWidgets.QPushButton(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_screenup.sizePolicy().hasHeightForWidth())
        self.pushButton_screenup.setSizePolicy(sizePolicy)
        self.pushButton_screenup.setMaximumSize(QtCore.QSize(16777215, 70))
        self.pushButton_screenup.setStyleSheet("font-size:14px;\n"
                                               "font-weight:bold;\n"
                                               "")
        self.pushButton_screenup.setObjectName("pushButton_screenup")
        self.horizontalLayout_10.addWidget(self.pushButton_screenup)
        self.pushButton_10 = QtWidgets.QPushButton(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_10.sizePolicy().hasHeightForWidth())
        self.pushButton_10.setSizePolicy(sizePolicy)
        self.pushButton_10.setMaximumSize(QtCore.QSize(16777215, 70))
        self.pushButton_10.setStyleSheet("font-size:14px;\n"
                                         "font-weight:bold;\n"
                                         "")
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout_10.addWidget(self.pushButton_10)
        self.verticalLayout_15.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_5 = QtWidgets.QLabel(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_11.addWidget(self.label_5)
        self.lcdNumber_HT = QtWidgets.QLCDNumber(self.tab_8)
        self.lcdNumber_HT.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lcdNumber_HT.setFont(font)
        self.lcdNumber_HT.setObjectName("lcdNumber_HT")
        self.horizontalLayout_11.addWidget(self.lcdNumber_HT)
        self.label_6 = QtWidgets.QLabel(self.tab_8)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_11.addWidget(self.label_6)
        self.horizontalLayout_11.setStretch(0, 4)
        self.horizontalLayout_11.setStretch(1, 5)
        self.horizontalLayout_11.setStretch(2, 1)
        self.verticalLayout_7.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_4 = QtWidgets.QLabel(self.tab_8)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_12.addWidget(self.label_4)
        self.lineEdit_vacuumstates = QtWidgets.QLineEdit(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_vacuumstates.sizePolicy().hasHeightForWidth())
        self.lineEdit_vacuumstates.setSizePolicy(sizePolicy)
        self.lineEdit_vacuumstates.setMaximumSize(QtCore.QSize(16777215, 35))
        self.lineEdit_vacuumstates.setObjectName("lineEdit_vacuumstates")
        self.horizontalLayout_12.addWidget(self.lineEdit_vacuumstates)
        self.horizontalLayout_12.setStretch(0, 2)
        self.horizontalLayout_12.setStretch(1, 3)
        self.verticalLayout_7.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_13.addLayout(self.verticalLayout_7)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.pushButton_getHT = QtWidgets.QPushButton(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_getHT.sizePolicy().hasHeightForWidth())
        self.pushButton_getHT.setSizePolicy(sizePolicy)
        self.pushButton_getHT.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_getHT.setObjectName("pushButton_getHT")
        self.verticalLayout_6.addWidget(self.pushButton_getHT)
        self.pushButton_getvacuum = QtWidgets.QPushButton(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_getvacuum.sizePolicy().hasHeightForWidth())
        self.pushButton_getvacuum.setSizePolicy(sizePolicy)
        self.pushButton_getvacuum.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_getvacuum.setObjectName("pushButton_getvacuum")
        self.verticalLayout_6.addWidget(self.pushButton_getvacuum)
        self.horizontalLayout_13.addLayout(self.verticalLayout_6)
        self.horizontalLayout_13.setStretch(0, 5)
        self.horizontalLayout_13.setStretch(1, 1)
        self.verticalLayout_15.addLayout(self.horizontalLayout_13)
        self.verticalLayout_15.setStretch(0, 1)
        self.verticalLayout_15.setStretch(1, 2)
        self.horizontalLayout_37.addLayout(self.verticalLayout_15)
        self.tabWidget_3.addTab(self.tab_8, "")
        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tab_9.sizePolicy().hasHeightForWidth())
        self.tab_9.setSizePolicy(sizePolicy)
        self.tab_9.setMinimumSize(QtCore.QSize(547, 129))
        self.tab_9.setObjectName("tab_9")
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout(self.tab_9)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setContentsMargins(11, -1, 11, -1)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setSpacing(0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_38.setSpacing(1)
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.label_11 = QtWidgets.QLabel(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setMinimumSize(QtCore.QSize(79, 0))
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_38.addWidget(self.label_11)
        self.lineEdit_alpha = QtWidgets.QLineEdit(self.tab_9)
        self.lineEdit_alpha.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.lineEdit_alpha.setFont(font)
        self.lineEdit_alpha.setObjectName("lineEdit_alpha")
        self.horizontalLayout_38.addWidget(self.lineEdit_alpha)
        self.pushButton_getalpha = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_getalpha.sizePolicy().hasHeightForWidth())
        self.pushButton_getalpha.setSizePolicy(sizePolicy)
        self.pushButton_getalpha.setMaximumSize(QtCore.QSize(70, 30))
        self.pushButton_getalpha.setObjectName("pushButton_getalpha")
        self.horizontalLayout_38.addWidget(self.pushButton_getalpha)
        self.pushButton_setalpha = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_setalpha.sizePolicy().hasHeightForWidth())
        self.pushButton_setalpha.setSizePolicy(sizePolicy)
        self.pushButton_setalpha.setMaximumSize(QtCore.QSize(70, 30))
        self.pushButton_setalpha.setObjectName("pushButton_setalpha")
        self.horizontalLayout_38.addWidget(self.pushButton_setalpha)
        self.verticalLayout_16.addLayout(self.horizontalLayout_38)
        self.verticalLayout_26 = QtWidgets.QVBoxLayout()
        self.verticalLayout_26.setSpacing(0)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setSpacing(10)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.label_8 = QtWidgets.QLabel(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_25.addWidget(self.label_8)
        self.comboBox_stage_stepsize = QtWidgets.QComboBox(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_stage_stepsize.sizePolicy().hasHeightForWidth())
        self.comboBox_stage_stepsize.setSizePolicy(sizePolicy)
        self.comboBox_stage_stepsize.setMaximumSize(QtCore.QSize(16777215, 30))
        self.comboBox_stage_stepsize.setEditable(True)
        self.comboBox_stage_stepsize.setCurrentText("")
        self.comboBox_stage_stepsize.setMaxVisibleItems(500)
        self.comboBox_stage_stepsize.setMaxCount(1000)
        self.comboBox_stage_stepsize.setMinimumContentsLength(20)
        self.comboBox_stage_stepsize.setDuplicatesEnabled(False)
        self.comboBox_stage_stepsize.setObjectName("comboBox_stage_stepsize")
        self.horizontalLayout_25.addWidget(self.comboBox_stage_stepsize)
        self.label_9 = QtWidgets.QLabel(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setMinimumSize(QtCore.QSize(60, 0))
        self.label_9.setMaximumSize(QtCore.QSize(70, 16777215))
        self.label_9.setSizeIncrement(QtCore.QSize(0, 0))
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_25.addWidget(self.label_9)
        self.horizontalLayout_25.setStretch(1, 3)
        self.horizontalLayout_25.setStretch(2, 1)
        self.verticalLayout_26.addLayout(self.horizontalLayout_25)
        self.verticalLayout_26.setStretch(0, 2)
        self.verticalLayout_16.addLayout(self.verticalLayout_26)
        self.horizontalLayout_20.addLayout(self.verticalLayout_16)
        self.verticalLayout_30 = QtWidgets.QVBoxLayout()
        self.verticalLayout_30.setSpacing(0)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.horizontalLayout_56 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_56.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout_56.setObjectName("horizontalLayout_56")
        self.pushButton_stageup = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stageup.sizePolicy().hasHeightForWidth())
        self.pushButton_stageup.setSizePolicy(sizePolicy)
        self.pushButton_stageup.setMinimumSize(QtCore.QSize(40, 40))
        self.pushButton_stageup.setMaximumSize(QtCore.QSize(40, 40))
        self.pushButton_stageup.setBaseSize(QtCore.QSize(0, 0))
        self.pushButton_stageup.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.pushButton_stageup.setStyleSheet("")
        self.pushButton_stageup.setObjectName("pushButton_stageup")
        self.horizontalLayout_56.addWidget(self.pushButton_stageup)
        self.verticalLayout_30.addLayout(self.horizontalLayout_56)
        self.horizontalLayout_54 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_54.setSpacing(1)
        self.horizontalLayout_54.setObjectName("horizontalLayout_54")
        self.pushButton_stageleft = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stageleft.sizePolicy().hasHeightForWidth())
        self.pushButton_stageleft.setSizePolicy(sizePolicy)
        self.pushButton_stageleft.setMinimumSize(QtCore.QSize(40, 40))
        self.pushButton_stageleft.setMaximumSize(QtCore.QSize(40, 40))
        self.pushButton_stageleft.setObjectName("pushButton_stageleft")
        self.horizontalLayout_54.addWidget(self.pushButton_stageleft)
        self.pushButton_stage_gotolist = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stage_gotolist.sizePolicy().hasHeightForWidth())
        self.pushButton_stage_gotolist.setSizePolicy(sizePolicy)
        self.pushButton_stage_gotolist.setMinimumSize(QtCore.QSize(40, 40))
        self.pushButton_stage_gotolist.setMaximumSize(QtCore.QSize(40, 40))
        self.pushButton_stage_gotolist.setObjectName("pushButton_stage_gotolist")
        self.horizontalLayout_54.addWidget(self.pushButton_stage_gotolist)
        self.pushButton_stageright = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stageright.sizePolicy().hasHeightForWidth())
        self.pushButton_stageright.setSizePolicy(sizePolicy)
        self.pushButton_stageright.setMinimumSize(QtCore.QSize(40, 40))
        self.pushButton_stageright.setMaximumSize(QtCore.QSize(40, 40))
        self.pushButton_stageright.setObjectName("pushButton_stageright")
        self.horizontalLayout_54.addWidget(self.pushButton_stageright)
        self.verticalLayout_30.addLayout(self.horizontalLayout_54)
        self.horizontalLayout_57 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_57.setContentsMargins(-1, -1, -1, 11)
        self.horizontalLayout_57.setObjectName("horizontalLayout_57")
        self.pushButton_stagedown = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stagedown.sizePolicy().hasHeightForWidth())
        self.pushButton_stagedown.setSizePolicy(sizePolicy)
        self.pushButton_stagedown.setMinimumSize(QtCore.QSize(40, 40))
        self.pushButton_stagedown.setMaximumSize(QtCore.QSize(40, 40))
        self.pushButton_stagedown.setObjectName("pushButton_stagedown")
        self.horizontalLayout_57.addWidget(self.pushButton_stagedown)
        self.verticalLayout_30.addLayout(self.horizontalLayout_57)
        self.horizontalLayout_20.addLayout(self.verticalLayout_30)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setSpacing(7)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.pushButton_gotostartangle = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_gotostartangle.sizePolicy().hasHeightForWidth())
        self.pushButton_gotostartangle.setSizePolicy(sizePolicy)
        self.pushButton_gotostartangle.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton_gotostartangle.setObjectName("pushButton_gotostartangle")
        self.verticalLayout_11.addWidget(self.pushButton_gotostartangle)
        self.pushButton_gotoendangle = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_gotoendangle.sizePolicy().hasHeightForWidth())
        self.pushButton_gotoendangle.setSizePolicy(sizePolicy)
        self.pushButton_gotoendangle.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton_gotoendangle.setObjectName("pushButton_gotoendangle")
        self.verticalLayout_11.addWidget(self.pushButton_gotoendangle)
        self.pushButton_homealpha_2 = QtWidgets.QPushButton(self.tab_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_homealpha_2.sizePolicy().hasHeightForWidth())
        self.pushButton_homealpha_2.setSizePolicy(sizePolicy)
        self.pushButton_homealpha_2.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_homealpha_2.setMaximumSize(QtCore.QSize(100, 50))
        self.pushButton_homealpha_2.setObjectName("pushButton_homealpha_2")
        self.verticalLayout_11.addWidget(self.pushButton_homealpha_2)
        self.horizontalLayout_20.addLayout(self.verticalLayout_11)
        self.horizontalLayout_24.addLayout(self.horizontalLayout_20)
        self.tabWidget_3.addTab(self.tab_9, "")
        self.tab_10 = QtWidgets.QWidget()
        self.tab_10.setObjectName("tab_10")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.tab_10)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.label_20 = QtWidgets.QLabel(self.tab_10)
        self.label_20.setObjectName("label_20")
        self.horizontalLayout_32.addWidget(self.label_20)
        self.lineEdit_exptime2 = QtWidgets.QLineEdit(self.tab_10)
        self.lineEdit_exptime2.setObjectName("lineEdit_exptime2")
        self.horizontalLayout_32.addWidget(self.lineEdit_exptime2)
        self.horizontalLayout_32.setStretch(0, 2)
        self.horizontalLayout_32.setStretch(1, 5)
        self.verticalLayout_4.addLayout(self.horizontalLayout_32)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_21 = QtWidgets.QLabel(self.tab_10)
        self.label_21.setMinimumSize(QtCore.QSize(103, 0))
        self.label_21.setObjectName("label_21")
        self.horizontalLayout_16.addWidget(self.label_21)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.radioButton_binning2_1 = QtWidgets.QRadioButton(self.tab_10)
        self.radioButton_binning2_1.setObjectName("radioButton_binning2_1")
        self.horizontalLayout_15.addWidget(self.radioButton_binning2_1)
        self.radioButton_binning2_2 = QtWidgets.QRadioButton(self.tab_10)
        self.radioButton_binning2_2.setObjectName("radioButton_binning2_2")
        self.horizontalLayout_15.addWidget(self.radioButton_binning2_2)
        self.radioButton_binning2_4 = QtWidgets.QRadioButton(self.tab_10)
        self.radioButton_binning2_4.setObjectName("radioButton_binning2_4")
        self.horizontalLayout_15.addWidget(self.radioButton_binning2_4)
        self.radioButton_binning2_8 = QtWidgets.QRadioButton(self.tab_10)
        self.radioButton_binning2_8.setObjectName("radioButton_binning2_8")
        self.horizontalLayout_15.addWidget(self.radioButton_binning2_8)
        self.horizontalLayout_16.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16.setStretch(0, 2)
        self.horizontalLayout_16.setStretch(1, 5)
        self.verticalLayout_4.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.label_28 = QtWidgets.QLabel(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_28.sizePolicy().hasHeightForWidth())
        self.label_28.setSizePolicy(sizePolicy)
        self.label_28.setMinimumSize(QtCore.QSize(103, 0))
        self.label_28.setObjectName("label_28")
        self.horizontalLayout_34.addWidget(self.label_28)
        self.comboBox_3 = QtWidgets.QComboBox(self.tab_10)
        self.comboBox_3.setMinimumSize(QtCore.QSize(165, 0))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.horizontalLayout_34.addWidget(self.comboBox_3)
        self.horizontalLayout_34.setStretch(0, 2)
        self.horizontalLayout_34.setStretch(1, 5)
        self.verticalLayout_4.addLayout(self.horizontalLayout_34)
        self.horizontalLayout_19.addLayout(self.verticalLayout_4)
        self.verticalLayout_19 = QtWidgets.QVBoxLayout()
        self.verticalLayout_19.setSpacing(7)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.pushButton_acquireimage = QtWidgets.QPushButton(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_acquireimage.sizePolicy().hasHeightForWidth())
        self.pushButton_acquireimage.setSizePolicy(sizePolicy)
        self.pushButton_acquireimage.setObjectName("pushButton_acquireimage")
        self.verticalLayout_19.addWidget(self.pushButton_acquireimage)
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.pushButton_screenup2 = QtWidgets.QPushButton(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_screenup2.sizePolicy().hasHeightForWidth())
        self.pushButton_screenup2.setSizePolicy(sizePolicy)
        self.pushButton_screenup2.setObjectName("pushButton_screenup2")
        self.horizontalLayout_35.addWidget(self.pushButton_screenup2)
        self.pushButton_screendown2 = QtWidgets.QPushButton(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_screendown2.sizePolicy().hasHeightForWidth())
        self.pushButton_screendown2.setSizePolicy(sizePolicy)
        self.pushButton_screendown2.setObjectName("pushButton_screendown2")
        self.horizontalLayout_35.addWidget(self.pushButton_screendown2)
        self.verticalLayout_19.addLayout(self.horizontalLayout_35)
        self.pushButton_beamblank = QtWidgets.QPushButton(self.tab_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_beamblank.sizePolicy().hasHeightForWidth())
        self.pushButton_beamblank.setSizePolicy(sizePolicy)
        self.pushButton_beamblank.setObjectName("pushButton_beamblank")
        self.verticalLayout_19.addWidget(self.pushButton_beamblank)
        self.horizontalLayout_19.addLayout(self.verticalLayout_19)
        self.horizontalLayout_19.setStretch(0, 2)
        self.horizontalLayout_19.setStretch(1, 1)
        self.horizontalLayout_22.addLayout(self.horizontalLayout_19)
        self.tabWidget_3.addTab(self.tab_10, "")
        self.tab_11 = QtWidgets.QWidget()
        self.tab_11.setObjectName("tab_11")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout(self.tab_11)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setContentsMargins(60, 10, 60, 10)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.label_29 = QtWidgets.QLabel(self.tab_11)
        self.label_29.setObjectName("label_29")
        self.horizontalLayout_27.addWidget(self.label_29)
        self.lineEdit_workpath_2 = QtWidgets.QLineEdit(self.tab_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_workpath_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_workpath_2.setSizePolicy(sizePolicy)
        self.lineEdit_workpath_2.setMaximumSize(QtCore.QSize(16777215, 35))
        self.lineEdit_workpath_2.setObjectName("lineEdit_workpath_2")
        self.horizontalLayout_27.addWidget(self.lineEdit_workpath_2)
        self.pushButton_workpath_2 = QtWidgets.QPushButton(self.tab_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_workpath_2.sizePolicy().hasHeightForWidth())
        self.pushButton_workpath_2.setSizePolicy(sizePolicy)
        self.pushButton_workpath_2.setMinimumSize(QtCore.QSize(30, 0))
        self.pushButton_workpath_2.setMaximumSize(QtCore.QSize(50, 30))
        self.pushButton_workpath_2.setObjectName("pushButton_workpath_2")
        self.horizontalLayout_27.addWidget(self.pushButton_workpath_2)
        self.verticalLayout_14.addLayout(self.horizontalLayout_27)
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.pushButton_Add_2 = QtWidgets.QPushButton(self.tab_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_Add_2.sizePolicy().hasHeightForWidth())
        self.pushButton_Add_2.setSizePolicy(sizePolicy)
        self.pushButton_Add_2.setMaximumSize(QtCore.QSize(200, 50))
        self.pushButton_Add_2.setObjectName("pushButton_Add_2")
        self.horizontalLayout_14.addWidget(self.pushButton_Add_2)
        self.horizontalLayout_28.addLayout(self.horizontalLayout_14)
        self.verticalLayout_14.addLayout(self.horizontalLayout_28)
        self.horizontalLayout_31.addLayout(self.verticalLayout_14)
        self.tabWidget_3.addTab(self.tab_11, "")
        self.verticalLayout_29.addWidget(self.tabWidget_3)
        self.verticalLayout_2.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setStyleSheet("")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_18.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setStyleSheet("    color: #bcdbf2;\n"
                                   "    font-size: 17px;\n"
                                   "    font-weight: bold;")
        self.label_3.setObjectName("label_3")
        self.verticalLayout_18.addWidget(self.label_3)
        self.logBox = QtWidgets.QFrame(self.groupBox_4)
        self.logBox.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logBox.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logBox.setObjectName("logBox")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.logBox)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.scrollArea = QtWidgets.QScrollArea(self.logBox)
        self.scrollArea.setMinimumSize(QtCore.QSize(0, 0))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 588, 140))
        self.scrollAreaWidgetContents_2.setMinimumSize(QtCore.QSize(0, 0))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents_2)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.textBrowser_log = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_2)
        self.textBrowser_log.setMinimumSize(QtCore.QSize(0, 0))
        self.textBrowser_log.setStyleSheet("    padding: 5px 10px;\n"
                                           "")
        self.textBrowser_log.setObjectName("textBrowser_log")
        self.horizontalLayout_4.addWidget(self.textBrowser_log)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_2)
        self.horizontalLayout_5.addWidget(self.scrollArea)
        self.verticalLayout_18.addWidget(self.logBox)
        self.verticalLayout_2.addWidget(self.groupBox_4)
        self.verticalLayout_2.setStretch(1, 3)
        self.verticalLayout_2.setStretch(2, 3)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.viewBox = QtWidgets.QGroupBox(self.groupBox_7)
        self.viewBox.setMaximumSize(QtCore.QSize(16777215, 500))
        self.viewBox.setStyleSheet("")
        self.viewBox.setTitle("")
        self.viewBox.setObjectName("viewBox")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.viewBox)
        self.verticalLayout_13.setContentsMargins(11, 11, 11, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.label_2 = QtWidgets.QLabel(self.viewBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setStyleSheet("    color: #bcdbf2;\n"
                                   "    font-size: 17px;\n"
                                   "    font-weight: bold;")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_13.addWidget(self.label_2)
        self.viewBox_2 = QtWidgets.QGroupBox(self.viewBox)
        self.viewBox_2.setStyleSheet("")
        self.viewBox_2.setTitle("")
        self.viewBox_2.setObjectName("viewBox_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.viewBox_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.listView_2 = QtWidgets.QListView(self.viewBox_2)
        self.listView_2.setObjectName("listView_2")
        self.verticalLayout_3.addWidget(self.listView_2)
        self.verticalLayout_13.addWidget(self.viewBox_2)
        self.verticalLayout.addWidget(self.viewBox)
        self.recordBox = QtWidgets.QGroupBox(self.groupBox_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.recordBox.sizePolicy().hasHeightForWidth())
        self.recordBox.setSizePolicy(sizePolicy)
        self.recordBox.setMaximumSize(QtCore.QSize(16777215, 500))
        self.recordBox.setStyleSheet("")
        self.recordBox.setTitle("")
        self.recordBox.setObjectName("recordBox")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.recordBox)
        self.verticalLayout_12.setContentsMargins(-1, -1, -1, 11)
        self.verticalLayout_12.setSpacing(7)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label = QtWidgets.QLabel(self.recordBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setStyleSheet("    color: #bcdbf2;\n"
                                 "    font-size: 17px;\n"
                                 "    font-weight: bold;")
        self.label.setObjectName("label")
        self.verticalLayout_12.addWidget(self.label)
        self.graphicsView_record = QtWidgets.QGroupBox(self.recordBox)
        self.graphicsView_record.setStyleSheet("#scrollArea_2{\n"
                                               "    background: transparent;\n"
                                               "}\n"
                                               "\n"
                                               "\n"
                                               "#listView{\n"
                                               "    background: #55ffffff;\n"
                                               "    border-bottom-left-radius:10px;\n"
                                               "}\n"
                                               "\n"
                                               "#listView_3{\n"
                                               "    background: #99ffffff;\n"
                                               "    border-bottom-right-radius: 10px;\n"
                                               "}\n"
                                               "\n"
                                               "QFrame{\n"
                                               "    background: #fff;\n"
                                               "}\n"
                                               "\n"
                                               "QFrame:hover{\n"
                                               "    background: #cce8ff;\n"
                                               "}\n"
                                               "\n"
                                               "QLabel{\n"
                                               "    color: #000;\n"
                                               "}")
        self.graphicsView_record.setTitle("")
        self.graphicsView_record.setObjectName("graphicsView_record")
        self.verticalLayout_43 = QtWidgets.QVBoxLayout(self.graphicsView_record)
        self.verticalLayout_43.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_43.setSpacing(0)
        self.verticalLayout_43.setObjectName("verticalLayout_43")
        self.groupBox_12 = QtWidgets.QGroupBox(self.graphicsView_record)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_12.sizePolicy().hasHeightForWidth())
        self.groupBox_12.setSizePolicy(sizePolicy)
        self.groupBox_12.setMinimumSize(QtCore.QSize(0, 30))
        self.groupBox_12.setStyleSheet("background: rgba(4, 62, 122,0.2);")
        self.groupBox_12.setTitle("")
        self.groupBox_12.setObjectName("groupBox_12")
        self.pushButton_choose_file = QtWidgets.QPushButton(self.groupBox_12)
        self.pushButton_choose_file.setGeometry(QtCore.QRect(10, 10, 24, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_choose_file.sizePolicy().hasHeightForWidth())
        self.pushButton_choose_file.setSizePolicy(sizePolicy)
        self.pushButton_choose_file.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("svg/选择文件.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_choose_file.setIcon(icon5)
        self.pushButton_choose_file.setObjectName("pushButton_choose_file")
        self.verticalLayout_43.addWidget(self.groupBox_12)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.graphicsView_record)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 386, 254))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout_58 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout_58.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_58.setSpacing(0)
        self.horizontalLayout_58.setObjectName("horizontalLayout_58")
        self.listView = QtWidgets.QListWidget(self.scrollAreaWidgetContents)
        self.listView.setObjectName("listView")
        self.horizontalLayout_58.addWidget(self.listView)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_43.addWidget(self.scrollArea_2)
        self.verticalLayout_12.addWidget(self.graphicsView_record)
        self.verticalLayout.addWidget(self.recordBox)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.setStretch(0, 3)
        self.horizontalLayout.setStretch(1, 2)
        self.verticalLayout_40.addLayout(self.horizontalLayout)
        self.horizontalLayout_65.addWidget(self.groupBox_7)
        self.horizontalLayout_53.addLayout(self.horizontalLayout_65)
        self.verticalLayout_37.addWidget(self.Form)
        self.verticalLayout_27 = QtWidgets.QVBoxLayout()
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.verticalLayout_37.addLayout(self.verticalLayout_27)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1024, 46))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menuUtils = QtWidgets.QMenu(self.menubar)
        self.menuUtils.setObjectName("menuUtils")
        self.menuAfter_run = QtWidgets.QMenu(self.menuUtils)
        self.menuAfter_run.setObjectName("menuAfter_run")
        MainWindow.setMenuBar(self.menubar)
        self.actionTutorial = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.actionTutorial.setFont(font)
        self.actionTutorial.setObjectName("actionTutorial")
        self.actionExamples = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.actionExamples.setFont(font)
        self.actionExamples.setObjectName("actionExamples")
        self.actionAbout_this_software = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.actionAbout_this_software.setFont(font)
        self.actionAbout_this_software.setObjectName("actionAbout_this_software")
        self.actionAuto_fous = QtWidgets.QAction(MainWindow)
        self.actionAuto_fous.setObjectName("actionAuto_fous")
        self.actionAbout_3dED = QtWidgets.QAction(MainWindow)
        self.actionAbout_3dED.setObjectName("actionAbout_3dED")
        self.actionAbout_this_software_2 = QtWidgets.QAction(MainWindow)
        self.actionAbout_this_software_2.setObjectName("actionAbout_this_software_2")
        self.actionImage_View = QtWidgets.QAction(MainWindow)
        self.actionImage_View.setObjectName("actionImage_View")
        self.actionaaaa = QtWidgets.QAction(MainWindow)
        self.actionaaaa.setObjectName("actionaaaa")
        self.actionLog_Viewer = QtWidgets.QAction(MainWindow)
        self.actionLog_Viewer.setObjectName("actionLog_Viewer")
        self.actionEmd2pts = QtWidgets.QAction(MainWindow)
        self.actionEmd2pts.setObjectName("actionEmd2pts")
        self.actionOpen_Valve = QtWidgets.QAction(MainWindow)
        self.actionOpen_Valve.setObjectName("actionOpen_Valve")
        self.actionBeam_Blank = QtWidgets.QAction(MainWindow)
        self.actionBeam_Blank.setObjectName("actionBeam_Blank")
        self.menu.addAction(self.actionTutorial)
        self.menu.addSeparator()
        self.menu.addAction(self.actionExamples)
        self.menu.addSeparator()
        self.menu_2.addSeparator()
        # self.menu_2.addAction(self.actionAbout_3dED)
        self.menu_2.addAction(self.actionAbout_this_software_2)
        self.menuAfter_run.addAction(self.actionOpen_Valve)
        self.menuAfter_run.addAction(self.actionBeam_Blank)
        # self.menuUtils.addAction(self.actionAuto_fous)
        self.menuUtils.addAction(self.actionImage_View)
        self.menuUtils.addAction(self.actionaaaa)
        self.menuUtils.addAction(self.actionLog_Viewer)
        self.menuUtils.addAction(self.actionEmd2pts)
        self.menuUtils.addAction(self.menuAfter_run.menuAction())
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menuUtils.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget_2.setCurrentIndex(3)
        self.tabWidget_3.setCurrentIndex(2)
        self.comboBox_stage_stepsize.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 控制表格自适应
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.checked_button()
        self.module_init()
        # self.slider()
        self.parent = Ui_MainWindow

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "3DED"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "lable"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "x"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "y"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "z"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "a"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "b"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "start angle"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "end angle"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "speed"))
        self.label_10.setText(_translate("MainWindow", "Lable:"))
        self.pushButton_open_particle_2.setText(_translate("MainWindow", "Find"))
        self.pushButton_Add.setToolTip(_translate("MainWindow", "add"))
        self.pushButton_update_stage.setToolTip(_translate("MainWindow", "update"))
        self.pushButton_Remove.setToolTip(_translate("MainWindow", "remove"))
        self.pushButton_save_particle.setToolTip(_translate("MainWindow", "save"))
        self.pushButton_open_particle.setToolTip(_translate("MainWindow", "open file"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_4),
                                    _translate("MainWindow", "1. Particle Search"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Tilt Setting"))
        self.label_23.setText(_translate("MainWindow", "Degree Speed:"))
        self.lineEdit_tiltspeed.setText(_translate("MainWindow", str(self.Degree_Speed)))
        self.label_19.setText(_translate("MainWindow", "Start Angle(˚):"))
        self.lineEdit_startangle.setText(_translate("MainWindow", str(self.Start_Angle)))
        self.label_22.setText(_translate("MainWindow", "End Angle(˚):"))
        self.lineEdit_endangle.setText(_translate("MainWindow", str(self.End_Angle)))
        self.pushButton_findangle.setText(_translate("MainWindow", "Finding Max Angles (opt.)"))
        self.label_24.setText(_translate("MainWindow", "Intensity:"))
        self.lineEdit_tiltspeed_2.setText(_translate("MainWindow", str(self.intensity_factor)))
        self.label_25.setText(_translate("MainWindow", "FineInc:"))
        self.lineEdit_tiltspeed_3.setText(_translate("MainWindow", str(self.fineinc)))
        self.label_27.setText(_translate("MainWindow", "Start Tilt:"))
        self.lineEdit_tiltspeed_4.setText(_translate("MainWindow", str(self.Start_tilt)))
        self.label_33.setText(_translate("MainWindow", "Tilt Max:"))
        self.lineEdit_tiltspeed_5.setText(_translate("MainWindow", str(self.titl_max)))
        self.label_34.setText(_translate("MainWindow", "Start Inc:"))
        self.lineEdit_tiltspeed_6.setText(_translate("MainWindow", str(self.Start_inc)))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_5), _translate("MainWindow", "2. Find Angles"))
        self.label_32.setText(_translate("MainWindow", "Free Time :"))
        self.lineEdit_tiltspeed_7.setText(_translate("MainWindow", str(self.Free_Time)))
        self.label_13.setText(_translate("MainWindow", "seconds"))
        self.label_42.setText(_translate("MainWindow", "Drift Step:"))
        self.lineEdit_tiltspeed_8.setText(_translate("MainWindow", str(self.drift_step)))
        self.label_14.setText(_translate("MainWindow", "degrees"))
        self.label_43.setText(_translate("MainWindow", "Drift Exposure Time :"))
        self.lineEdit_tiltspeed_9.setText(_translate("MainWindow", str(self.Drift_Exposure_Time)))
        self.label_15.setText(_translate("MainWindow", "seconds"))
        self.label_16.setText(_translate("MainWindow", "Drift Binning"))
        self.comboBox.setCurrentText(_translate("MainWindow", "1"))
        self.comboBox.setItemText(0, _translate("MainWindow", "1"))
        self.comboBox.setItemText(1, _translate("MainWindow", "2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "4"))
        self.comboBox.setItemText(3, _translate("MainWindow", "8"))
        self.comboBox.setCurrentText(str(self.drift_binning))
        self.checkBox.setText(_translate("MainWindow", "Save drift images"))
        self.label_18.setText(_translate("MainWindow", "Beam Stop: "))
        self.comboBox_4.setCurrentText(_translate("MainWindow", "full"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "full"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "half"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "no"))
        self.comboBox_4.setCurrentText(self.beamstop)
        self.label_44.setText(_translate("MainWindow", "3D ED Methods:: "))
        self.comboBox_5.setCurrentText(_translate("MainWindow", "only_drift"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "only_drift"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "red"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "scred"))
        self.comboBox_5.setItemText(3, _translate("MainWindow", "cred"))
        method_name = ""
        for method in Methods_3DED:
            for key, value in method.items():
                method_name = key
                break
        self.comboBox_5.setItemText(4, _translate("MainWindow", method_name))
        self.comboBox_5.setCurrentText(str(self.methods))
        self.label_45.setText(_translate("MainWindow", "Drift Correction:"))
        self.comboBox_6.setCurrentText(_translate("MainWindow", "online_correct"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", "online_correct"))
        self.comboBox_6.setItemText(1, _translate("MainWindow", "offline_correct"))
        self.comboBox_6.setItemText(2, _translate("MainWindow", "no_correct"))
        self.comboBox_6.setCurrentText(self.Drift_Correction)
        self.groupBox_10.setTitle(_translate("MainWindow", "Camera Setting"))
        self.label_35.setText(_translate("MainWindow", "Exposure Time:"))
        self.lineEdit_exptime.setText(_translate("MainWindow", str(self.Exposure_Time)))
        self.label_36.setText(_translate("MainWindow", "Binning:"))
        self.radioButton_binning1.setText(_translate("MainWindow", "1"))
        self.radioButton_binning2.setText(_translate("MainWindow", "2"))
        self.radioButton_binning4.setText(_translate("MainWindow", "4"))
        self.radioButton_binning8.setText(_translate("MainWindow", "8"))
        self.label_30.setText(_translate("MainWindow", "Camera:"))
        for i, name in enumerate(self.Camera):
            self.comboBox_2.setItemText(i, _translate("MainWindow", name))
            self.comboBox_3.setItemText(i, _translate("MainWindow", name))
        self.groupBox_11.setTitle(_translate("MainWindow", "Input/Output"))
        self.label_17.setText(_translate("MainWindow", "Working Path:"))
        self.pushButton_workpath.setText(_translate("MainWindow", "...."))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_6), _translate("MainWindow", "3. ET Condition"))
        self.pushButton_summary.setText(_translate("MainWindow", "Experimental Summary"))
        self.pushButton_singlerun.setText(_translate("MainWindow", "Run on current"))
        self.pushButton_batchrun.setText(_translate("MainWindow", "Batch run "))
        self.pushButton_stop.setText(_translate("MainWindow", "STOP"))
        self.label_12.setText(_translate("MainWindow", "Remaning Time: "))
        self.lineEdit.setText(_translate("MainWindow", "0.0s"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), _translate("MainWindow", "4. Start Running"))
        self.label_7.setText(_translate("MainWindow", "Microscope Control"))
        self.pushButton_openvalve.setText(_translate("MainWindow", "Open Valve"))
        self.pushButton_closevalve.setText(_translate("MainWindow", "Close Valve"))
        self.pushButton_screenup.setText(_translate("MainWindow", "Screen Up"))
        self.pushButton_10.setText(_translate("MainWindow", "Screen Down"))
        self.label_5.setText(_translate("MainWindow", "High Tension:"))
        self.label_6.setText(_translate("MainWindow", "kV"))
        self.label_4.setText(_translate("MainWindow", "Vacuum States:"))
        self.pushButton_getHT.setText(_translate("MainWindow", "Get"))
        self.pushButton_getvacuum.setText(_translate("MainWindow", "Get"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_8), _translate("MainWindow", "setup"))
        self.label_11.setText(_translate("MainWindow", "Alpha:"))
        self.pushButton_getalpha.setText(_translate("MainWindow", "Get"))
        self.pushButton_setalpha.setText(_translate("MainWindow", "Set"))
        self.label_8.setText(_translate("MainWindow", "Step Size:"))
        self.label_9.setText(_translate("MainWindow", "um"))
        self.pushButton_stageup.setText(_translate("MainWindow", "▲"))
        self.pushButton_stageleft.setText(_translate("MainWindow", "◄"))
        self.pushButton_stage_gotolist.setText(_translate("MainWindow", "○"))
        self.pushButton_stageright.setText(_translate("MainWindow", "►"))
        self.pushButton_stagedown.setText(_translate("MainWindow", "▼"))
        self.pushButton_gotostartangle.setText(_translate("MainWindow", "Start"))
        self.pushButton_gotoendangle.setText(_translate("MainWindow", "End"))
        self.pushButton_homealpha_2.setText(_translate("MainWindow", "Home Alpha"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_9), _translate("MainWindow", "stage"))
        self.label_20.setText(_translate("MainWindow", "Exp. Time(s)："))
        self.lineEdit_exptime2.setText(_translate("MainWindow", "0.5"))
        self.label_21.setText(_translate("MainWindow", "Binning："))
        self.radioButton_binning2_1.setText(_translate("MainWindow", "1"))
        self.radioButton_binning2_2.setText(_translate("MainWindow", "2"))
        self.radioButton_binning2_4.setText(_translate("MainWindow", "4"))
        self.radioButton_binning2_8.setText(_translate("MainWindow", "8"))
        self.label_28.setText(_translate("MainWindow", "Camera："))
        self.pushButton_acquireimage.setText(_translate("MainWindow", "Acquire"))
        self.pushButton_screenup2.setText(_translate("MainWindow", "Screen Up"))
        self.pushButton_screendown2.setText(_translate("MainWindow", "Screen Down"))
        self.pushButton_beamblank.setText(_translate("MainWindow", "Beam Blank"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_10), _translate("MainWindow", "camera"))
        self.label_29.setText(_translate("MainWindow", "Scripy URL:"))
        self.pushButton_workpath_2.setText(_translate("MainWindow", "..."))
        self.pushButton_Add_2.setText(_translate("MainWindow", "Run Scripy"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_11), _translate("MainWindow", "advance"))
        self.label_3.setText(_translate("MainWindow", "Log"))
        self.label_2.setText(_translate("MainWindow", "Image Information"))
        self.label.setText(_translate("MainWindow", "Image List"))
        self.pushButton_choose_file.setToolTip(_translate("MainWindow", "open folder"))
        self.menu.setTitle(_translate("MainWindow", "Help"))
        self.menu_2.setTitle(_translate("MainWindow", "About"))
        self.menuUtils.setTitle(_translate("MainWindow", "Utils"))
        self.menuAfter_run.setTitle(_translate("MainWindow", "After run"))
        self.actionTutorial.setText(_translate("MainWindow", "Tutorial"))
        self.actionExamples.setText(_translate("MainWindow", "Examples"))
        self.actionAbout_this_software.setText(_translate("MainWindow", "About this software"))
        self.actionAuto_fous.setText(_translate("MainWindow", "Auto Focus"))
        self.actionAbout_3dED.setText(_translate("MainWindow", "About 3dED"))
        self.actionAbout_this_software_2.setText(_translate("MainWindow", "About this software"))
        self.actionImage_View.setText(_translate("MainWindow", "Image Viewer"))
        self.actionaaaa.setText(_translate("MainWindow", "Advanced Stage"))
        self.actionLog_Viewer.setText(_translate("MainWindow", "Log Viewer"))
        self.actionEmd2pts.setText(_translate("MainWindow", "emd2pets"))
        self.actionOpen_Valve.setText(_translate("MainWindow", "Open Valve"))
        self.actionBeam_Blank.setText(_translate("MainWindow", "Beam Blank"))

    # 绑定多选按钮
    def checked_button(self):
        self.binningButtonGroup = QtWidgets.QButtonGroup()
        self.binningButtonGroup.addButton(self.radioButton_binning2_1)
        self.binningButtonGroup.addButton(self.radioButton_binning2_2)
        self.binningButtonGroup.addButton(self.radioButton_binning2_4)
        self.binningButtonGroup.addButton(self.radioButton_binning2_8)

        # 设置第一个单选按钮为默认选中状态
        self.radioButton_binning2_1.setChecked(True)

        # step3中的binning复选框
        self.binningButtonGroup2 = QtWidgets.QButtonGroup()
        self.binningButtonGroup2.addButton(self.radioButton_binning1)
        self.binningButtonGroup2.addButton(self.radioButton_binning2)
        self.binningButtonGroup2.addButton(self.radioButton_binning4)
        self.binningButtonGroup2.addButton(self.radioButton_binning8)

        # 设置第一个单选按钮为默认选中状态
        self.radioButton_binning1.setChecked(True)

    def module_init(self):
        self.Microscope_menu_init()
        self.Particle_Searching_control1_init()
        # self.Optics_Condition_control2_init()
        self.Start_Running_control4_init()
        self.Microscope_Control_Stage_init()

        self.Step3_model()
        self.Microscope_Control_Setup_model()
        self.Microscope_Control_Stage_model()
        self.Microscope_Control_Camera_model()
        self.Microscope_Control_Advance_model()

        self.Step4_var()

    # 模块定义区--------------------------------------------------------------------------------------------
    def Microscope_Control_Setup_model(self):
        self.pushButton_openvalve.clicked.connect(self.on_OpenValve_button_click)
        self.pushButton_closevalve.clicked.connect(self.on_CloseValve_button_click)
        self.pushButton_screenup.clicked.connect(self.on_ScreenUp_click)
        self.pushButton_10.clicked.connect(self.on_ScreenDown_click)
        self.pushButton_getHT.clicked.connect(self.on_HighTension_get_click)
        self.pushButton_getvacuum.clicked.connect(self.on_vacuum_get_click)

    def Microscope_Control_Stage_model(self):
        self.pushButton_getalpha.clicked.connect(self.on_Alpha_get_click)
        self.pushButton_setalpha.clicked.connect(self.on_Alpha_set_click)
        self.pushButton_homealpha_2.clicked.connect(self.on_homeAlpha_click)
        self.pushButton_gotostartangle.clicked.connect(self.on_gotostartangle_click)
        self.pushButton_gotoendangle.clicked.connect(self.on_gotoEndangle_click)

    def Microscope_Control_Camera_model(self):
        self.pushButton_beamblank.clicked.connect(self.on_BeamBlank_click)
        self.pushButton_screenup2.clicked.connect(self.on_ScreenUp_click)
        self.pushButton_screendown2.clicked.connect(self.on_ScreenDown_click)
        self.pushButton_choose_file.clicked.connect(self.choose_file_path_of_record)
        # 连接 itemClicked 信号到槽函数
        self.listView.itemClicked.connect(self.on_item_clicked)

        # Acquire按钮
        self.pushButton_acquireimage.clicked.connect(self.on_Acquire_button)

        # 多选一按钮连接
        self.binningButtonGroup.buttonClicked.connect(self.on_binningButtonGroup_clicked)

    def Microscope_Control_Advance_model(self):
        self.pushButton_workpath_2.clicked.connect(self.on_select_flie_click)
        self.pushButton_Add_2.clicked.connect(self.run_script)

    def Step3_model(self):
        self.pushButton_workpath.clicked.connect(self.step3_on_select_flie_click)
        self.pushButton_findangle.clicked.connect(self.step3_find_max_min_angle)
        # 多选一按钮连接
        self.binningButtonGroup2.buttonClicked.connect(self.step3_select_Binning)
        # 失焦事件绑定
        self.lineEdit_exptime.editingFinished.connect(self.step3_Exposure_Time)
        self.lineEdit_startangle.editingFinished.connect((self.step3_Start_Angle))
        self.lineEdit_endangle.editingFinished.connect(self.step3_End_Angle)
        self.lineEdit_tiltspeed.editingFinished.connect(self.step3_step)
        self.lineEdit_tiltspeed_2.editingFinished.connect(self.step3_intensity_factor)
        self.lineEdit_tiltspeed_3.editingFinished.connect(self.step3_fineinc)
        self.lineEdit_tiltspeed_4.editingFinished.connect(self.step3_start_tilt)
        self.lineEdit_tiltspeed_5.editingFinished.connect(self.step3_Tilt_Max)

    def Step4_var(self):
        # online_correct = "online_correct"
        # offline_correct = "offline_correct"
        # no_correct = "no_correct"
        method_key = ""
        method_values = []
        for method in Methods_3DED:
            for key, values in method.items():
                method_key = key
                method_values = values
                break
        if self.comboBox_5.currentText() == method_key:
            self.comboBox_6.clear()
            flag = True
            for method_value in method_values:
                self.comboBox_6.addItem(method_value)
                if flag:
                    self.comboBox_6.setCurrentText(method_value)
                    flag = False
        self.lineEdit_tiltspeed_7.editingFinished.connect(self.step4_Free_Time)
        self.lineEdit_tiltspeed_8.editingFinished.connect(self.step4_drift_step)
        self.lineEdit_tiltspeed_9.editingFinished.connect(self.step4_Drift_Exposure_Time)
        self.comboBox.currentIndexChanged.connect(self.step4_drift_binning)
        self.comboBox_4.currentIndexChanged.connect(self.step4_beamstop)
        self.comboBox_5.currentIndexChanged.connect(self.step4_methods)
        self.comboBox_6.currentIndexChanged.connect(self.step4_Drift_Correction)
        self.checkBox.stateChanged.connect(self.on_checkbox_clicked)

    # setup部分的函数
    def on_OpenValve_button_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nOpen Valve button was called")
            self.microscope.set_column_valves_open(True)
        except:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nOpen Valve button is sending an exception")

    def on_CloseValve_button_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nClose Valve button was called")
            self.microscope.set_column_valves_open(False)
        except:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nClose Valve button is sending an exception")

    def on_ScreenUp_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nScreenUp button was called")
            self.microscope.set_screen_position("UP")
        except:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nScreenUp button is sending an exception")

    def on_ScreenDown_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nScreenDown button was called")
            self.microscope.set_screen_position("DOWN")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nScreenDown button is sending an exception")

    def on_HighTension_get_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe HighTension get button has been clicked")
            voltage = self.microscope.get_voltage()
            self.lcdNumber_HT.display(voltage)
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe voltage is {voltage}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe HighTension get button is sending an exception: {e}")

    def on_vacuum_get_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe vacuum get button has been clicked")
            vacuum = self.microscope.get_vacuum()
            # vacuum {'status': 'READY', 'column_valves_open': False, 'pvp_running': False, 'gauges(Pa)': {}}
            self.lineEdit_vacuumstates.setText(vacuum['status'])
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe vacuum is {vacuum['status']}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe vacuum get button is sending an exception: {e}")

    # stage部分函数
    def on_Alpha_get_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe Alpha get button has been clicked")
            self.a = self.microscope.get_stage_position()['a']
            self.a = math.degrees(self.a)
            self.lineEdit_alpha.setText(str(format(self.a, ".2f")))
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nalpha Angle is {self.a}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Alpha get button is sending an exception: {e}")

    def on_Alpha_set_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe Alpha set button has been clicked")
            degree_str = self.lineEdit_alpha.text()
            # 将字符串转换为浮点数
            degree_float = float(degree_str)

            # 将角度转换为弧度
            radian_float = math.radians(degree_float)

            self.a = str(radian_float)
            self.microscope.set_stage_position({"a": self.a})
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nSuccessfully set alpha Angle to {degree_float}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Alpha set button is sending an exception: {e}")

    def on_homeAlpha_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe homeAlpha button has been clicked")
            self.a = 0.0
            self.lineEdit_alpha.setText(str(self.a))
            self.microscope.set_stage_position({"a": self.a})
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nSuccessfully set alpha Angle to {self.a}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe homeAlpha button is sending an exception: {e}")

    def on_gotostartangle_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe start button has been clicked")
            self.a = self.lineEdit_startangle.text()
            self.lineEdit_alpha.setText(str(self.a))

            degree_str = self.lineEdit_alpha.text()
            # 将字符串转换为浮点数
            degree_float = float(degree_str)
            # 将角度转换为弧度
            radian_float = math.radians(degree_float)
            self.microscope.set_stage_position({"a": str(radian_float)})
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nSuccessfully set alpha Angle to {self.a}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe start button is sending an exception: {e}")

    def on_gotoEndangle_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe End button has been clicked")
            self.a = self.lineEdit_endangle.text()
            self.lineEdit_alpha.setText(str(self.a))
            degree_str = self.lineEdit_alpha.text()
            # 将字符串转换为浮点数
            degree_float = float(degree_str)
            # 将角度转换为弧度
            radian_float = math.radians(degree_float)

            self.microscope.set_stage_position({"a": str(radian_float)})
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nSuccessfully set alpha Angle to {self.a}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe End button is sending an exception: {e}")

    # camera部分
    def on_BeamBlank_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe BeamBlank button has been clicked")
            beam = self.microscope.get_beam_blanked()
            if beam:
                self.microscope.set_beam_blanked(False)
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe BeamBlank value is False")
            else:
                self.microscope.set_beam_blanked(True)
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe BeamBlank value is True")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe BeamBlank button is sending an exception: {e}")

    # 在你的 Ui_MainWindow 类里面创建一个新的方法：
    def on_binningButtonGroup_clicked(self, button):
        try:
            self.binning = button.text()
            # 根据选中的按钮设置第二组的按钮
            if self.binning == self.radioButton_binning1.text():
                self.radioButton_binning1.setChecked(True)
            elif self.binning == self.radioButton_binning2.text():
                self.radioButton_binning2.setChecked(True)
            elif self.binning == self.radioButton_binning4.text():
                self.radioButton_binning4.setChecked(True)
            elif self.binning == self.radioButton_binning8.text():
                self.radioButton_binning8.setChecked(True)
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nButton {button.text()} clicked.")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nButtonGroup has a exception")

    def adjust_image_size(self, img, binning):
        # 将 NumPy 数组转换为 PIL Image 对象
        if isinstance(img, np.ndarray):
            img = Image.fromarray(img)

        # 新的尺寸，这里设置为 256x256
        new_size = (256, 256)

        # 根据 binning 值调整图像大小
        if binning == 1:  # 缩小到 256x256
            resized_img = img.resize(new_size, Image.LANCZOS)  # 使用高质量的缩放
        elif binning == 2:  # 调整到 256x256
            resized_img = img.resize(new_size, Image.LANCZOS)
        elif binning == 4:  # 保持原样
            resized_img = img.resize(new_size, Image.LANCZOS)
        elif binning == 8:  # 放大到 256x256
            resized_img = img.resize(new_size, Image.BILINEAR)  # 使用双线性插值

        return resized_img

    def save_image(self, img):
        # 生成文件名
        timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"{self.image_counter:03}_{timestamp}.tif"

        # 设置保存路径
        save_path = "./save_img/"

        # 检查路径是否存在，如果不存在，则创建它
        if not os.path.exists(save_path):
            os.makedirs(save_path)

        full_path = os.path.join(save_path, filename)

        # 保存图像
        try:
            # 假设 img 是一个 PIL 图像对象
            # 如果 img 是一个 NumPy 数组，使用 Image.fromarray(img) 转换它
            img = np.array(img)

            # img.save(full_path)
            self.Start_Running_generate_image(full_path, img)
            # 在日志中添加一条信息，表明文件已保存
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nImage saved as {filename}")

            # 更新计数器
            self.image_counter += 1
        except Exception as e:
            # 如果保存失败，记录错误信息
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nFailed to save image: {e}")

    from PIL import Image, ImageEnhance, ImageOps

    from PIL import Image, ImageEnhance, ImageOps
    import numpy as np

    def adjust_contrast_brightness(self, img, contrast, brightness):

        # 如果输入是NumPy数组，先转换为PIL图像
        if isinstance(img, np.ndarray):
            img = Image.fromarray(img)

        # 如果图像是32位整型灰度图像，将其转换为8位灰度图像
        if img.mode == 'I':
            img = img.point(lambda i: i * (1 / 256)).convert('L')

        # 调整对比度和亮度
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(contrast)
        enhancer = ImageEnhance.Brightness(img)
        img = enhancer.enhance(brightness)

        # 将图像转换回原始的32位整型灰度格式
        img = img.point(lambda i: i * 256).convert('I')

        return img

    def on_Acquire_button(self):

        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nAcquire button was called")
            # 获取图像
            img = self.Start_Running_get_image_matrix()
            # 将图像从 NumPy 数组转换为 PIL 图像
            img = Image.fromarray(img)

            # 保存图像
            self.save_image(img)  # 确保 save_image 函数使用 PIL

        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nAcquire button is sending an exception {e}")

    # 定义缩放按钮
    def scale(self):
        # self.imgWindow = NewWindow(self.scenes[self.current_index])
        # self.imgWindow.show()
        pass

    # Advance 运行python脚本

    def on_select_flie_click(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nThe selectFile button has been clicked")
            root = tk.Tk()
            root.withdraw()
            self.path = filedialog.askopenfilename()
            self.lineEdit_workpath_2.setText(self.path)

        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe selectFile button is sending an exception: {e}")

    # 运行一个Python脚本
    def run_script(self):
        try:
            subprocess.run(["python", self.path], check=True)
        except subprocess.CalledProcessError as e:
            print(f"An error occurred while running the script: {e}")

    def checked_button(self):
        self.binningButtonGroup = QtWidgets.QButtonGroup()
        self.binningButtonGroup.addButton(self.radioButton_binning2_1, 1)
        self.binningButtonGroup.addButton(self.radioButton_binning2_2, 2)
        self.binningButtonGroup.addButton(self.radioButton_binning2_4, 4)
        self.binningButtonGroup.addButton(self.radioButton_binning2_8, 8)

        # 设置第一个单选按钮为默认选中状态
        self.radioButton_binning2_1.setChecked(True)

        # step3中的binning复选框
        self.binningButtonGroup2 = QtWidgets.QButtonGroup()
        self.binningButtonGroup2.addButton(self.radioButton_binning1, 1)
        self.binningButtonGroup2.addButton(self.radioButton_binning2, 2)
        self.binningButtonGroup2.addButton(self.radioButton_binning4, 4)
        self.binningButtonGroup2.addButton(self.radioButton_binning8, 8)

        # 添加选择绑定事件
        self.binningButtonGroup.buttonClicked.connect(self.on_binning_changed)
        self.binningButtonGroup2.buttonClicked.connect(self.on_binning_changed)

        button = self.binningButtonGroup.button(self.binning)
        button2 = self.binningButtonGroup2.button(self.binning)
        if button:
            button.setChecked(True)
            button2.setChecked(True)

    def on_binning_changed(self, button):
        # 获取选中的单选按钮的文本或值
        binning_value = button.text()  # 或其他用于标识按钮的属性
        # 更新 JSON 文件
        self.update_json_config("binning", int(binning_value))

    def load_image(self, image_list):
        pass

    def choose_file_path_of_record(self):
        try:
            file_dialog = QFileDialog()
            file_dialog.setFileMode(QFileDialog.DirectoryOnly)
            file_dialog.setOption(QFileDialog.DontUseNativeDialog)

            image_list = []
            if file_dialog.exec_() == QFileDialog.Accepted:
                self.listView.clear()
                folder_path = file_dialog.selectedFiles()[0]
                print("Selected folder:", folder_path)
                self.save_file = folder_path
                # 读取文件夹里的tif图片
                for file in os.listdir(folder_path):
                    if file.endswith(".tif"):
                        self.listView.addItem(self.save_file + '/' + file)
                        image_list.append(self.save_file + '/' + file)
            self.load_image(image_list)
        except Exception as e:
            print("Error:", e)

    def on_item_clicked(self, item):
        try:
            file_path = str(item.text())
            metadata_format = ''
            metadata_dict = json.loads(self.Start_Running_get_image_metadata(file_path))
            for key, value in metadata_dict.items():
                metadata_format += f'{key:15s} : {value}\n'
            # print(metadata_format)
            model = QtGui.QStandardItemModel(self.listView_2)
            item = QtGui.QStandardItem(metadata_format)
            model.appendRow(item)
            self.listView_2.setModel(model)
        except Exception as e:
            self.textBrowser_log.append(f"Error processing image: {e}")

    # step3 区域------------------------------------------------------------------------------
    # step3 部分代码
    def update_json_config(self, key, value):
        # 读取当前配置
        with open('params.json', 'r') as file:
            config = json.load(file)

        # 更新配置
        config[key] = value

        # 写回配置文件
        with open('params.json', 'w') as file:
            json.dump(config, file, indent=4)

    def step3_Exposure_Time(self):
        try:
            if self.lineEdit_exptime.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nExposure_Time of step3 area has been inputed")
                self.Exposure_Time = self.lineEdit_exptime.text()
                self.lineEdit_exptime2.setText(self.Exposure_Time)
                self.Exposure_Time = float(self.Exposure_Time)
                # 更新 JSON 配置文件
                self.update_json_config("Exposure_Time", self.Exposure_Time)
            self.lineEdit_exptime.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Exposure_Time of step3 area is sending an exception: {e}")

    def step3_Start_Angle(self):
        try:
            if self.lineEdit_startangle.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Angle of step3 area has been inputed")
                self.Start_Angle = self.lineEdit_startangle.text()
                self.Start_Angle = float(self.Start_Angle)
                # 更新 JSON 配置文件
                self.update_json_config("Start_Angle", self.Start_Angle)
            self.lineEdit_startangle.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Start_Angle of step3 area is sending an exception: {e}")

    def step3_End_Angle(self):
        try:
            if self.lineEdit_endangle.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nEnd Angle of step3 area has been inputed")
                self.End_Angle = self.lineEdit_endangle.text()
                self.End_Angle = float(self.End_Angle)
                self.update_json_config("End_Angle", self.End_Angle)
            self.lineEdit_endangle.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe End Angle of step3 area is sending an exception: {e}")

    def step3_step(self):
        try:
            if self.lineEdit_tiltspeed.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nStep of step3 area has been inputed")
                self.Degree_Speed = self.lineEdit_tiltspeed.text()
                self.Degree_Speed = float(self.Degree_Speed)
                self.update_json_config("Degree_Speed", self.Degree_Speed)
            self.lineEdit_tiltspeed.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Step of step3 area is sending an exception: {e}")

    def step3_intensity_factor(self):
        try:
            if self.lineEdit_tiltspeed_2.isModified():
                self.textBrowser_log.append(
                    f"{datetime.datetime.now()}\nintensity_factor of step3 area has been inputed")
                self.intensity_factor = self.lineEdit_tiltspeed_2.text()
                self.intensity_factor = float(self.intensity_factor)
                self.update_json_config("intensity_factor", self.intensity_factor)
            self.lineEdit_tiltspeed_2.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe intensity_factor of step3 area is sending an exception: {e}")

    def step3_fineinc(self):
        try:
            if self.lineEdit_tiltspeed_3.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nfineinc of step3 area has been inputed")
                self.fineinc = self.lineEdit_tiltspeed_3.text()
                self.fineinc = float(self.fineinc)
                self.update_json_config("fineinc", self.fineinc)
            self.lineEdit_tiltspeed_3.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe fineinc of step3 area is sending an exception: {e}")

    def step3_start_tilt(self):
        try:
            if self.lineEdit_tiltspeed_4.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nstart tilt of step3 area has been inputed")
                self.Start_tilt = self.lineEdit_tiltspeed_4.text()
                self.Start_tilt = float(self.Start_tilt)
                self.update_json_config("Start_tilt", self.Start_tilt)
            self.lineEdit_tiltspeed_4.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe start tilt of step3 area is sending an exception: {e}")

    def step3_Tilt_Max(self):
        try:
            if self.lineEdit_tiltspeed_5.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nTilt_Max of step3 area has been inputed")
                self.titl_max = self.lineEdit_tiltspeed_5.text()
                self.titl_max = float(self.titl_max)
                self.update_json_config("titl_max", self.titl_max)
            self.lineEdit_tiltspeed_5.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Tilt_Max of step3 area is sending an exception: {e}")

    def step3_Start_inc(self):
        try:
            if self.lineEdit_tiltspeed_6.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_inc of step3 area has been inputed")
                self.Start_inc = self.lineEdit_tiltspeed_6.text()
                self.Start_inc = float(self.Start_inc)
                self.update_json_config("Start_inc", self.Start_inc)
            self.lineEdit_tiltspeed_6.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Start_inc of step3 area is sending an exception: {e}")

    def step4_Free_Time(self):
        try:
            if self.lineEdit_tiltspeed_7.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\nFree_Time of step4 area has been inputed")
                self.Free_Time = self.lineEdit_tiltspeed_7.text()
                self.Free_Time = float(self.Free_Time)
                self.update_json_config("Free_Time", self.Free_Time)
            self.lineEdit_tiltspeed_7.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Free_Time of step4 area is sending an exception: {e}")

    def step4_drift_step(self):
        try:
            if self.lineEdit_tiltspeed_8.isModified():
                self.textBrowser_log.append(f"{datetime.datetime.now()}\ndrift_step of step4 area has been inputed")
                self.drift_step = self.lineEdit_tiltspeed_8.text()
                self.drift_step = float(self.drift_step)
                self.update_json_config("drift_step", self.drift_step)
            self.lineEdit_tiltspeed_8.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe drift_step of step4 area is sending an exception: {e}")

    def step4_Drift_Exposure_Time(self):
        try:
            if self.lineEdit_tiltspeed_9.isModified():
                self.textBrowser_log.append(
                    f"{datetime.datetime.now()}\nDrift_Exposure_Time of step4 area has been inputed")
                self.Drift_Exposure_Time = self.lineEdit_tiltspeed_9.text()
                self.Drift_Exposure_Time = float(self.Drift_Exposure_Time)
                self.update_json_config("Drift_Exposure_Time", self.Drift_Exposure_Time)
            self.lineEdit_tiltspeed_9.setModified(False)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Start_inc of step3 area is sending an exception: {e}")

    def step4_beamstop(self):
        try:
            self.beamstop = self.comboBox_4.currentText()
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nBeamstop of step4 area has been changed to {self.beamstop}")
            self.update_json_config("beamstop", self.beamstop)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe beamstop of step4 area is sending an exception: {e}")

    def step4_methods(self):
        try:
            self.methods = self.comboBox_5.currentText()
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nMethods of step4 area has been changed to {self.methods}")
            self.update_json_config("methods", self.methods)
            online_correct = "online_correct"
            offline_correct = "offline_correct"
            no_correct = "no_correct"
            method_key = ""
            method_values = []
            for method in Methods_3DED:
                for key, values in method.items():
                    method_key = key
                    method_values = values
                    break
            if self.methods == method_key:
                self.comboBox_6.clear()
                flag = True
                for method_value in method_values:
                    self.comboBox_6.addItem(method_value)
                    if flag:
                        self.comboBox_6.setCurrentText(method_value)
                        flag = False
            elif self.comboBox_6.count() < 3:
                self.comboBox_6.clear()
                self.comboBox_6.addItem(online_correct)
                self.comboBox_6.addItem(offline_correct)
                self.comboBox_6.addItem(no_correct)
                self.comboBox_6.setCurrentText(online_correct)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe methods of step4 area is sending an exception: {e}")

    def step4_Drift_Correction(self):
        try:
            self.Drift_Correction = self.comboBox_6.currentText()
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nDrift Correction of step4 area has been changed to {self.Drift_Correction}")
            self.update_json_config("Drift_Correction", self.Drift_Correction)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Drift Correction of step4 area is sending an exception: {e}")

    def on_checkbox_clicked(self, state):
        if state == QtCore.Qt.Checked:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nsave drift images button of step4 area has been click")
            self.drift_image_save = 1
            self.update_json_config("drift_image_save", 1)
        else:
            self.drift_image_save = 0
            self.update_json_config("drift_image_save", 0)

    def step4_drift_binning(self):
        try:
            self.drift_binning = self.comboBox.currentText()
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nDrift Binning of step4 area has been changed to {self.drift_binning}")
            self.update_json_config("drift_binning", self.drift_binning)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nThe Drift Binning of step4 area is sending an exception: {e}")

    def step3_select_Binning(self, button):
        try:
            self.binning = button.text()
            # 根据选中的按钮设置第二组的按钮
            if self.binning == self.radioButton_binning2_1.text():
                self.radioButton_binning2_1.setChecked(True)
            elif self.binning == self.radioButton_binning2_2.text():
                self.radioButton_binning2_2.setChecked(True)
            elif self.binning == self.radioButton_binning2_4.text():
                self.radioButton_binning2_4.setChecked(True)
            elif self.binning == self.radioButton_binning2_8.text():
                self.radioButton_binning2_8.setChecked(True)
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nButton {button.text()} clicked.")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nButtonGroup has a exception")

    def step3_find_max_min_angle(self):
        try:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\n find_max_min_angle button were excuted")
            # 计算最大最小角对象
            self.intensity_factor = float(self.lineEdit_tiltspeed_2.text())
            self.fineinc = float(self.lineEdit_tiltspeed_3.text())
            self.Start_tilt = float(self.lineEdit_tiltspeed_4.text())
            self.titl_max = float(self.lineEdit_tiltspeed_5.text())
            self.Start_inc = float(self.lineEdit_tiltspeed_6.text())
            self.tilt_range_finder = TiltRangeFinder(microscope=self.microscope, intensity_factor=self.intensity_factor,
                                                     fineInc=self.fineinc, start_tilt=self.Start_tilt,
                                                     start_inc=self.Start_inc,
                                                     tilt_max=self.titl_max)
            angle = self.tilt_range_finder.find_tilt_range()
            self.Start_Angle, self.End_Angle, self.Degree_Speed = angle
            self.lineEdit_startangle.setText(str(self.Start_Angle))
            self.lineEdit_endangle.setText(str(self.End_Angle))
            self.lineEdit_tiltspeed.setText(str(self.Degree_Speed))
            # 回到0度
            self.a = 0.0
            self.lineEdit_alpha.setText(str(self.a))
            self.microscope.set_stage_position({"a": self.a})

        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nfind_max_min_angle button has a exception, "
                                        f"The exception is {e}")

    def step3_on_select_flie_click(self):
        try:

            file_dialog = QFileDialog()
            file_dialog.setFileMode(QFileDialog.DirectoryOnly)
            file_dialog.setOption(QFileDialog.DontUseNativeDialog)

            # Show the folder selection dialog
            if file_dialog.exec_() == QFileDialog.Accepted:
                folder_path = file_dialog.selectedFiles()[0]
                self.update_json_config("filesavepath", folder_path)
                # Print the selected folder path
                print("Selected folder:", folder_path)
                self.output_dir_flag = True
                self.output_dir = folder_path
                self.lineEdit_workpath.setText(self.output_dir)

        except Exception as e:
            print("An error occurred:", e)

    # 菜单区
    def Microscope_menu_init(self):
        # 跳转到 Tutorial.pdf 文件
        self.actionTutorial.triggered.connect(self.Microscope_menu_goto_Tutorial)
        # 跳转到 Examples 文件夹
        self.actionExamples.triggered.connect(self.Microscope_menu_goto_Examples)
        # 打开 ET 窗口
        # self.menuAbout_3dED.triggered.connect(self.Microscope_menu_goto_ET)
        # 打开 software 窗口
        self.actionAbout_this_software_2.triggered.connect(self.Microscope_menu_goto_software)
        # auto focus
        self.actionAuto_fous.triggered.connect(self.Microscope_menu_auto_focus)
        self.actionImage_View.triggered.connect(self.Microscope_menu_goto_ImageView)
        self.actionaaaa.triggered.connect(self.Microscope_menu_goto_Advanced_Stage)
        self.actionLog_Viewer.triggered.connect(self.Microscope_menu_goto_Log_Viewer)
        self.actionEmd2pts.triggered.connect(self.Microscope_menu_goto_Emd2pts)
        self.actionOpen_Valve.triggered.connect(self.Microscope_menu_actionOpen_Valve)
        self.actionBeam_Blank.triggered.connect(self.Microscope_menu_actionBeam_Blank)

    def Microscope_menu_actionOpen_Valve(self):
        try:
            self.Start_Running_Open_Value = False if self.Start_Running_Open_Value else True
            self.textBrowser_log.append(f"Open_Value: {self.Start_Running_Open_Value}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\Microscope_menu_actionOpen_Valve button has a exception, "
                f"The exception is {e}")

    def Microscope_menu_actionBeam_Blank(self):
        try:
            self.Start_Running_Beam_Blank = False if self.Start_Running_Beam_Blank else True
            self.textBrowser_log.append(f"SBeam_Blank: {self.Start_Running_Beam_Blank}")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\Microscope_menu_actionBeam_Blank button has a exception, "
                f"The exception is {e}")

    def Microscope_menu_goto_Advanced_Stage(self):
        # 创建一个 QMainWindow 实例
        self.MicroscopeController_window = QtWidgets.QWidget()

        self.MicroscopeController = MicroscopeController()

        # 使用 ImageProcessor 设置 QMainWindow
        self.MicroscopeController.setupUi(self.MicroscopeController_window)

        # 显示窗口
        self.MicroscopeController_window.show()

    def Microscope_menu_goto_Log_Viewer(self):
        # 创建一个 QMainWindow 实例
        self.LogViewer_windom = QtWidgets.QWidget()

        # 创建 ImageProcessor 实例
        self.LogViewer = LogViewer()

        # 使用 ImageProcessor 设置 QMainWindow
        self.LogViewer.setupUi(self.LogViewer_windom)

        # 显示窗口
        self.LogViewer_windom.show()

    def Microscope_menu_goto_Emd2pts(self):
        # 创建一个 QMainWindow 实例
        self.Emd2Pet_window = QtWidgets.QWidget()

        # 创建 ImageProcessor 实例
        self.Emd2Pet = Emd2Pet()
        # 使用 ImageProcessor 设置 QMainWindow
        self.Emd2Pet.setupUi(self.Emd2Pet_window)

        # 显示窗口
        self.Emd2Pet_window.show()

    def Microscope_menu_goto_ImageView(self):
        # 创建一个 QMainWindow 实例
        self.image_processor_window = QtWidgets.QMainWindow()

        # 创建 ImageProcessor 实例
        self.image_processor_ui = ImageProcessor()

        # 使用 ImageProcessor 设置 QMainWindow
        self.image_processor_ui.show()

    def Microscope_menu_goto_Tutorial(self):
        # 链接Tutorial.pdf文件
        try:
            # 读取配置文件
            with open(
                    "configuration.json",
                    "r") as f:
                filepath = json.load(f)
            # 获取路径
            Tutorial_filepath = filepath["Tutorial_pdf_filepath"]
            QDesktopServices.openUrl(QUrl.fromLocalFile(Tutorial_filepath))
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}Microscope_menu_goto_Tutorial\n{e}")

    def Microscope_menu_goto_Examples(self):
        # 跳转至文件夹Examples
        try:
            # 读取配置文件
            with open(
                    "configuration.json",
                    "r") as f:
                filepath = json.load(f)
            # 获取路径
            Examples_filepath = filepath["Examples_filepath"]
            # 如果没有文件夹则新建文件夹
            if not os.path.exists(Examples_filepath):
                os.makedirs("Examples")
            os.startfile(Examples_filepath)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}Microscope_menu_goto_Tutorial\n{e}")

    def Microscope_menu_goto_ET(self):
        # 单独页面显示内容：“待定”
        print("Microscope_menu_goto_ET")
        try:
            dialog = QDialog()
            dialog.setWindowTitle('3dED')
            # 设置弹窗大小为固定宽高并居中显示
            dialog.resize(300, 200)
            dialog_position = QDesktopWidget().availableGeometry().center()
            dialog.move(dialog_position - dialog.rect().center())
            # 设置布局管理器以添加 QLabel
            vbox = QVBoxLayout(dialog)
            label = QLabel("ET")
            vbox.addWidget(label)
            dialog.exec_()
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}Microscope_menu_goto_About_ET\n{e}")

    def Microscope_menu_goto_software(self):
        # 单独页面显示内容
        try:
            dialog = QDialog()
            dialog.setWindowTitle('About')
            # 设置弹窗大小为固定宽高并居中显示
            dialog.resize(300, 200)
            dialog_position = QDesktopWidget().availableGeometry().center()
            dialog.move(dialog_position - dialog.rect().center())
            # 设置布局管理器以添加 QLabel
            vbox = QVBoxLayout(dialog)
            label = QLabel(
                "Electron Tomography \nfor \nThermoFisher Microscope\nVersion 1.0\n©2024 EM center of GIGCAS. All rights reserved.")
            label.setAlignment(Qt.AlignCenter)
            vbox.addWidget(label)
            dialog.exec_()
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}Microscope_menu_goto_About_the_software\n{e}")

    def Microscope_menu_auto_focus(self):
        # Auto focus
        try:
            self.Start_Running_image_acquisition_process_auto_focus()
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nAuto focus success!")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nMicroscope_menu_auto_focus\n{e}")

    # Microscope_Control_Stage 部分
    def Microscope_Control_Stage_init(self):
        # step size 的初始化
        self.Microscope_Control_Stage_step_size_init()
        # gotoList 按钮
        self.pushButton_stage_gotolist.clicked.connect(lambda: self.Microscope_Control_Stage_dir_button_clicked(dir=0))
        # up 按钮
        self.pushButton_stageup.clicked.connect(lambda: self.Microscope_Control_Stage_dir_button_clicked(dir=1))
        # left 按钮
        self.pushButton_stageleft.clicked.connect(lambda: self.Microscope_Control_Stage_dir_button_clicked(dir=2))
        # down 按钮
        self.pushButton_stagedown.clicked.connect(lambda: self.Microscope_Control_Stage_dir_button_clicked(dir=3))
        # right 按钮
        self.pushButton_stageright.clicked.connect(lambda: self.Microscope_Control_Stage_dir_button_clicked(dir=4))

    def Microscope_Control_Stage_step_size_init(self):
        # 复选框 step size 改变事件
        try:
            # 读取配置文件
            with open(
                    "configuration.json",
                    "r") as f:
                filepath = json.load(f)
            stepsize_scope = filepath["stepsize_scope"]
            for item in stepsize_scope:
                item = str(item)
                self.comboBox_stage_stepsize.addItem(item)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nMicroscope_Control_Stage_step_size_init have a exception\n{e}")

    def Microscope_Control_Stage_dir_button_clicked(self, dir):
        # 方向键 点击事件
        try:
            step_size = float(self.comboBox_stage_stepsize.currentText())
            if dir != 0:
                stage_position = self.microscope.get_stage_position()
                # 单位转换
                x = float(stage_position['x']) * m_to_um  # 米转微米
                y = float(stage_position['y']) * m_to_um
                z = float(stage_position['z']) * m_to_um
                a = math.degrees(float(stage_position['a']))  # 弧度转度
                b = math.degrees(float(stage_position['b']))
            else:
                # 读取列表的数据
                select_row = self.tableWidget.currentRow()
                # 如果没有选中的行则返回
                if select_row == -1:
                    return
                x = self.tableWidget.item(select_row, 1).text()
                y = self.tableWidget.item(select_row, 2).text()
                z = self.tableWidget.item(select_row, 3).text()
                a = self.tableWidget.item(select_row, 4).text()
                b = self.tableWidget.item(select_row, 5).text()

            if dir == 0:
                pass
            elif dir == 1 and x < self.Max_x:
                tmp = x + float(step_size)
                if tmp > self.Max_x:
                    tmp = self.Max_x
                x = tmp
            elif dir == 2 and y < self.Max_y:
                tmp = y + float(step_size)
                if tmp > self.Max_y:
                    tmp = self.Max_y
                y = tmp
            elif dir == 3 and x > self.Min_x:
                tmp = x - float(step_size)
                if tmp < self.Min_x:
                    tmp = self.Min_x
                x = tmp
            elif dir == 4 and y > self.Min_y:
                tmp = y - float(step_size)
                if tmp < self.Min_y:
                    tmp = self.Min_y
                y = tmp
            stage_position_str = f"x: {self.round_to_two_decimals(x)} um, y: {self.round_to_two_decimals(y)} um, z: {self.round_to_two_decimals(z)} um, a: {self.round_to_two_decimals(a)} degree, b: {self.round_to_two_decimals(b)} degree."
            # 单位转换
            x = float(x) / float(m_to_um) * 1.0
            y = float(y) / float(m_to_um) * 1.0
            z = float(z) / float(m_to_um) * 1.0
            a = math.radians(float(a))
            b = math.radians(float(b))
            stage_position = {}
            stage_position['x'] = x
            stage_position['y'] = y
            stage_position['z'] = z
            stage_position['a'] = a
            stage_position['b'] = b
            self.microscope.set_stage_position(pos=stage_position, method="GO")
            self.textBrowser_log.append(f"{datetime.datetime.now()}\n{stage_position_str}")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\ndir button exception occurred\n{e}")

    # 控制区1
    def Particle_Searching_control1_init(self):
        # 当前 stage_position 值
        self.Particle_Searching_stage_position = []
        self.Particle_Searching_set_x_y_Range()
        # tableWidget
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.verticalHeader().setHidden(True)
        self.tableWidget.setShowGrid(False)
        # self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)  # 设置不可手动修改单元格
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)  # 设置只能点击一行
        self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)  # 设置选择模式为当行选中
        self.tableWidget.itemClicked.connect(self.Particle_Searching_tableWidget_item_clicked)  # 点击事件
        # Add 按钮
        self.pushButton_Add.clicked.connect(self.Particle_Searching_add_button_clicked)
        # Update 按钮
        self.pushButton_update_stage.setEnabled(False)
        self.pushButton_update_stage.clicked.connect(self.Particle_Searching_update_button_clicked)
        # Remove 按钮
        self.pushButton_Remove.setEnabled(False)
        self.pushButton_Remove.clicked.connect(self.Particle_Searching_remove_button_clicked)
        # Save 按钮
        self.pushButton_save_particle.clicked.connect(self.Particle_Searching_save_button_clicked)
        # Open 按钮
        self.pushButton_open_particle.clicked.connect(self.Particle_Searching_open_button_clicked)
        # find 按钮
        self.pushButton_open_particle_2.clicked.connect(self.Particle_Searching_find_button_clicked)

    def Particle_Searching_set_x_y_Range(self):
        # 设置 x y 的范围
        self.Max_x = 1000.0
        self.Min_x = -1000.0
        self.Max_y = 1000.0
        self.Min_y = -1000.0

    def round_to_two_decimals(self, num):
        # 保留两位小数
        try:
            num = float(num)
            return "{:.2f}".format(num)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nround_to_two_decimals have a exception\n{e}")

    def Particle_Searching_tableWidget_item_clicked(self):
        # tableWidget 一行点击事件
        try:
            if self.Start_Running_Run_Thread_run_flag:
                return
            # 设置 update 按钮可用
            self.pushButton_update_stage.setEnabled(True)
            # 设置 remove 按钮可用
            self.pushButton_Remove.setEnabled(True)
            # label->stage_position[0]
            self.Particle_Searching_stage_position = self.Particle_Searching_tableWidget_get_row_data()
            global image_label
            image_label = self.Particle_Searching_stage_position[0]
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_tableWidget_item_clicked have a exception\n{e}")

    def Particle_Searching_tableWidget_get_row_data(self):
        # 获取 tableWidget 选中一行的数据
        try:
            # lable x y z a b start_angle end_angle
            row = self.tableWidget.currentRow()
            stage_position = []
            for col in range(self.tableWidget.columnCount()):
                item = self.tableWidget.item(row, col)
                if item is not None:
                    stage_position.append(item.text())
                else:
                    stage_position.append('')
            return stage_position
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_tableWidget_get_row_data have a exception\n{e}")

    def Particle_Searching_tableWidget_get_all_data(self):
        # 获取 tableWidget 的数据
        try:
            all_data = []
            row_count = self.tableWidget.rowCount()
            for row in range(row_count):
                # lable x y z a b start_angle end_angle
                stage_position = []
                for col in range(self.tableWidget.columnCount()):
                    item = self.tableWidget.item(row, col)
                    if item is not None:
                        stage_position.append(item.text())
                    else:
                        stage_position.append('')
                all_data.append(stage_position)
            return all_data
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_tableWidget_get_all_data have a exception\n{e}")

    def add_stage_position_to_tableWidget(self, stage_position):
        try:
            row_count = self.tableWidget.rowCount()
            label = str(row_count + 1).zfill(label_zfill)
            stage_position.insert(0, label)
            self.tableWidget.insertRow(row_count)
            # 假设总列数为 9
            total_columns = 9
            for index in range(total_columns):
                if index < len(stage_position):
                    data = stage_position[index]
                    if index != 0:  # 如果需要对数据进行处理
                        data = self.round_to_two_decimals(data)
                else:
                    data = ""  # 对于额外的列，设置为空字符串
                item = QTableWidgetItem(str(data))
                item.setTextAlignment(Qt.AlignCenter)
                # 设置每个单元格为可编辑
                item.setFlags(item.flags() | Qt.ItemIsEditable)
                self.tableWidget.setItem(row_count, index, item)
            self.tableWidget.scrollToBottom()

            if self.Particle_Searching_stage_position == []:
                self.Particle_Searching_stage_position = stage_position

        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\n{e}")

    def Particle_Searching_add_button_clicked(self):
        # Add 按钮点击事件
        try:
            # 调用get_stage_position()函数获取舞台位置
            stage_position = self.microscope.get_stage_position()
            # 单位转换
            x = stage_position['x'] * m_to_um  # 米转微米
            y = stage_position['y'] * m_to_um
            z = stage_position['z'] * m_to_um
            a = math.degrees(stage_position['a'])  # 弧度转度
            b = math.degrees(stage_position['b'])  # 弧度转度
            # 添加数据到 tableWidget
            self.add_stage_position_to_tableWidget([x, y, z, a, b])
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_add_button_clicked have a exception\n{e}")

    def Particle_Searching_update_button_clicked(self):
        # Update 按钮点击事件
        try:
            stage_position = self.microscope.get_stage_position()
            # 单位转换
            x = stage_position['x'] * m_to_um  # 米转微米
            y = stage_position['y'] * m_to_um
            z = stage_position['z'] * m_to_um
            a = math.degrees(stage_position['a'])  # 弧度转度
            b = math.degrees(stage_position['b'])
            stage_position = [x, y, z, a, b]
            select_row = self.tableWidget.currentRow()
            for index, data in enumerate(stage_position):
                item = self.tableWidget.item(select_row, index + 1)
                item.setText(self.round_to_two_decimals(data))
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_update_button_clicked have a exception\n{e}")

    def Particle_Searching_remove_button_clicked(self):
        # Remove 按钮点击事件
        try:
            select_row = self.tableWidget.currentRow()
            # 移除选中的行
            self.tableWidget.removeRow(select_row)
            if self.tableWidget.rowCount() == 0:
                pass
            else:
                # 重新排序tableWidget的select_row和之后的item
                for select_row in range(self.tableWidget.rowCount()):
                    label = str(select_row + 1).zfill(label_zfill)
                    item = QTableWidgetItem(label)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget.setItem(select_row, 0, item)
            self.Particle_Searching_stage_position = []
            # 清除选中状态
            self.tableWidget.clearSelection()
            if self.tableWidget.rowCount() == 0:
                # 设置 update 按钮不可用
                self.pushButton_update_stage.setEnabled(False)
                # 设置 remove 按钮不可用
                self.pushButton_Remove.setEnabled(False)
                # 设置 image_label 为 None
                global image_label
                image_label = None
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_remove_button_clicked have a exception\n{e}")

    def Particle_Searching_save_button_clicked(self):
        # Save 按钮点击事件
        try:
            # 获取当前行数
            row_count = self.tableWidget.rowCount()
            # 如果没有数据则返回
            if row_count == 0:
                return
            # 获取当前时间
            current_time = datetime.datetime.now()
            # 格式化时间为年-月-日 时:分:秒
            formatted_time = current_time.strftime("%Y-%m-%d-%H-%M-%S")
            file_name = f"{formatted_time}.csv"
            # 读取配置文件 获取保存的文件夹路径
            with open("configuration.json", "r") as f:
                import json
                file_path = json.load(f)
            folder_path = file_path["Particle_Searching"]
            # 如果没有文件夹则新建文件夹
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            folder_file_name = folder_path + "/" + file_name
            # 保存 stage_position 到 csv 文件里面
            with open(folder_file_name, 'w', newline='') as file:
                writer = csv.writer(file)
                for row in range(row_count):
                    stage_position = []
                    for col in range(self.tableWidget.columnCount()):
                        item = self.tableWidget.item(row, col)
                        if item is not None:
                            stage_position.append(item.text())
                        else:
                            stage_position.append('')
                    writer.writerow(stage_position)
                file.close()
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nsave the {file_name} success!")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_save_button_clicked have a exception\n{e}")

    def Particle_Searching_open_button_clicked(self):
        # Open 按钮点击事件
        try:
            root = tk.Tk()
            root.withdraw()
            # 打开文件对话框
            file_path = filedialog.askopenfilename()
            # 是否选中文件
            if file_path:
                # print("Selected file:", file_path)
                with open(file_path, 'r') as file:
                    reader = csv.reader(file)
                    for stage_position in reader:
                        row = self.tableWidget.rowCount()
                        self.tableWidget.insertRow(row)
                        for col, data in enumerate(stage_position):
                            # 设置 x y z a b
                            item = QTableWidgetItem(data)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget.setItem(row, col, item)
                            # 设置标签
                            row_count = self.tableWidget.rowCount()
                            item = QTableWidgetItem(str(row_count).zfill(label_zfill))
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget.setItem(row, 0, item)
                    file.close()
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_open_button_clicked have a exception\n{e}")

    def Particle_Searching_find_button_clicked(self):
        # find 按钮点击事件
        try:
            row_count = self.tableWidget.rowCount()
            if row_count == 0:
                self.lineEdit_exptime2_2.setText("")
                return
            # 获取 label
            label_target = self.lineEdit_exptime2_2.text()
            # 为空 或者 为0 或者为 非数字 直接返回
            if label_target.isdigit():
                label_target = int(label_target)
            else:
                self.lineEdit_exptime2_2.setText("")
                self.textBrowser_log.append(
                    f"{datetime.datetime.now()}\nParticle_Searching_find_button_clicked please input digit")
                return
            if not label_target:
                self.lineEdit_exptime2_2.setText("")
                return
            # 查找 tablewidget
            for row in range(row_count):
                label_tmp = self.tableWidget.item(row, 0).text()
                match = re.search(r'\d+', label_tmp)
                label_tmp = int(match.group())
                if label_target == label_tmp:
                    # 找到匹配的行
                    self.lineEdit_exptime2_2.setText("")
                    self.tableWidget.setCurrentCell(label_tmp - 1, 0)
                    return
            # 没找到匹配的行
            self.lineEdit_exptime2_2.setText("")
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_find_button_clicked out of range")
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nParticle_Searching_find_button_clicked button exception occurred\n{e}")

    # 控制区2
    # def Optics_Condition_control2_init(self):
    #     # magnification 放大倍数
    #     self.record_magnification = None
    #     # Get Optics From MicroScope 按钮
    #     # self.pushButton_get_optics.clicked.connect(self.Optics_Condition_get_optics_clicked)
    #
    #     # radioButton_Imaging 按钮
    #     # self.radioButton_Imaging.clicked.connect(self.Optics_Condition_radioButton_Imaging_clicked)
    #
    #     # radioButton_diffraction 按钮
    #     # self.radioButton_diffraction.clicked.connect(self.Optics_Condition_radioButton_diffraction_clicked)
    #
    #     # 设置 Spot Size 范围
    #     # self.spinBox_spotsize.setMinimum(-1000)
    #     # self.spinBox_spotsize.setMaximum(1000)
    #
    #     # Spot Size 改变事件
    #     # self.spinBox_spotsize.valueChanged.connect(self.Optics_Condition_spot_size_changed)
    #
    #     # Defocus 改变事件
    #     # self.lineEdit_defocus.textChanged.connect(self.Optics_Condition_defocus_changed)
    #
    #     # Save Record 按钮
    #     # self.pushButton_saverecord.clicked.connect(self.Optics_Condition_save_record_clicked)
    #
    #     # Display Record 按钮
    #     # self.pushButton_displayrecord.clicked.connect(self.Optics_Condition_display_record_clicked)
    #     # self.pushButton_displayrecord.setEnabled(False)
    #
    #     # 数组存储不同参数
    #     self.array_len = 8
    #     self.record_array = [[None for _ in range(self.array_len)] for _ in range(self.array_len)]
    #
    #     # 绑定 s1 按钮 pushButton
    #     self.pushButton.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=0))
    #     # 绑定 s2 按钮 pushButton_3
    #     self.pushButton_3.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=1))
    #     # 绑定 s3 按钮 pushButton_2
    #     self.pushButton_2.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=2))
    #     # 绑定 s4 按钮 pushButton_5
    #     self.pushButton_5.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=3))
    #     # 绑定 s5 按钮 pushButton_4
    #     self.pushButton_4.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=4))
    #     # 绑定 s6 按钮 pushButton_11
    #     self.pushButton_11.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=5))
    #     # 绑定 s7 按钮 pushButton_12
    #     self.pushButton_12.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=6))
    #     # 绑定 s8 按钮 pushButton_13
    #     self.pushButton_13.clicked.connect(lambda: self.Optics_Condition_S_clicked(index=7))
    #
    #     # 绑定 d1 按钮 pushButton_14
    #     self.pushButton_14.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=0))
    #     self.pushButton_14.setEnabled(False)
    #     # 绑定 d2 按钮 pushButton_9
    #     self.pushButton_9.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=1))
    #     self.pushButton_9.setEnabled(False)
    #     # 绑定 d3 按钮 pushButton_6
    #     self.pushButton_6.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=2))
    #     self.pushButton_6.setEnabled(False)
    #     # 绑定 d4 按钮 pushButton_8
    #     self.pushButton_8.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=3))
    #     self.pushButton_8.setEnabled(False)
    #     # 绑定 d5 按钮 pushButton_7
    #     self.pushButton_7.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=4))
    #     self.pushButton_7.setEnabled(False)
    #     # 绑定 d6 按钮 pushButton_15
    #     self.pushButton_15.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=5))
    #     self.pushButton_15.setEnabled(False)
    #     # 绑定 d7 按钮 pushButton_16
    #     self.pushButton_16.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=6))
    #     self.pushButton_16.setEnabled(False)
    #     # 绑定 d8 按钮 pushButton_17
    #     self.pushButton_17.clicked.connect(lambda: self.Optics_Condition_D_clicked(index=7))
    #     self.pushButton_17.setEnabled(False)
    #
    #     # Clear All 按钮
    #     self.pushButton_18.clicked.connect(self.Optics_Condition_clear_all_clicked)

    def Optics_Condition_get_optics_clicked(self):
        # Get Optics From MicroScope 按钮点击事件
        try:
            # 触发 get_projection_mode 自动获取模式名称
            mode_name = self.microscope.get_projection_mode()
            # 根据模式名称选择模式
            if mode_name.lower() == "IMAGING".lower():
                self.radioButton_Imaging.setChecked(True)
                self.radioButton_diffraction.setChecked(False)
                self.record_mode = "IMAGING"
            else:
                self.radioButton_Imaging.setChecked(False)
                self.radioButton_diffraction.setChecked(True)
                self.record_mode = "DIFFRACTION"

            # 触发 get_spot_size_index 获取 spot
            self.record_spot_size = int(self.microscope.get_spot_size_index())
            # self.spinBox_spotsize.setValue(self.record_spot_size)

            # 触发 get_defocus 获取 defocus
            self.record_defocus = float(self.microscope.get_defocus() * m_to_mm * defocus_factor)
            # self.lineEdit_defocus.setText(str(self.round_to_two_decimals(self.record_defocus)))

            # 触发 get_indicated_magnification 获取 magnification
            self.lcdNumber_magnification.setDigitCount(10)
            self.record_magnification = float(self.microscope.get_indicated_magnification())
            self.lcdNumber_magnification.display(self.record_magnification)

            # 触发 get_indicated_camera_length 获取 camera_length
            self.lcdNumber_intensity_3.setDigitCount(10)
            self.record_camera_length = float(self.microscope.get_indicated_camera_length())
            self.lcdNumber_intensity_3.display("{:.4f}".format((self.record_camera_length)))

            # 触发 get_intensity 获取 intensity
            self.lcdNumber_intensity.setDigitCount(10)
            self.record_intensity = float(self.microscope.get_intensity())
            self.lcdNumber_intensity.display("{:.4f}".format((self.record_intensity)))
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nOptics_Condition_get_optics_clicked button have a exception\n{e}")

    def Optics_Condition_radioButton_Imaging_clicked(self):
        # Mode Diffraction 按钮点击事件
        try:
            self.microscope.set_projection_mode(mode="IMAGING")
            self.record_mode = "IMAGING"
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nimage button have a exception\n{e}")

    def Optics_Condition_radioButton_diffraction_clicked(self):
        # Mode Imaging 按钮点击事件
        try:
            self.microscope.set_projection_mode(mode="DIFFRACTION")
            self.record_mode = "DIFFRACTION"
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\ndiffraction button have a exception\n{e}")

    def Optics_Condition_spot_size_changed(self):
        # Spot Size 改变事件
        try:
            self.record_spot_size = int(self.spinBox_spotsize.text())
            self.microscope.set_spot_size_index(self.record_spot_size)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}Optics_Condition_spot_size_changed\n{e}")

    def Optics_Condition_defocus_changed(self):
        # Defocus 改变事件
        try:
            self.record_defocus = float(self.lineEdit_defocus.text())
            record_defocus = self.record_defocus * mm_to_m / defocus_factor
            self.microscope.set_defocus(record_defocus)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}Optics_Condition_defocus_changed\n{e}")

    def Optics_Condition_save_record_clicked(self):
        # 将Get Optics From Microscope按钮所触发返回的数据分别存储到对应变量
        try:
            # 获取 Mode
            if self.radioButton_Imaging.isChecked():
                self.record_mode = "IMAGING"
            elif self.radioButton_diffraction.isChecked():
                self.record_mode = "DIFFRACTION"
            # 获取 spot size
            # self.record_spot_size = int(self.spinBox_spotsize.text().strip())

            # 获取 defocus
            # self.record_defocus = float(self.lineEdit_defocus.text().strip())

            # 获取 magnification
            self.record_magnification = float(self.lcdNumber_magnification.value())

            # 获取 camera_length
            self.record_camera_length = float(self.lcdNumber_intensity_3.value())

            # 获取 intensity
            self.record_intensity = float(self.lcdNumber_intensity.value())

            # 设置 Display Record 按钮可用
            self.pushButton_displayrecord.setEnabled(True)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nOptics_Condition_save_record_clicked button have a exception\n{e}")

    def get_record_magnification_index(self, magnification, camera_length):
        # 获取 magnification_index
        try:
            # 读取配置文件 configuration.json
            with open("configuration.json", "r") as f:
                data = json.load(f)
            magnification_data = json.loads(json.dumps(data["magnification_data"]))
            # 找到 magnification_index
            magnification_index = self.microscope.get_magnification_index()
            for m in magnification_data:
                # 如果是 IMAGING 模式下或者 DIFFRACTION 模式下的，则
                if self.record_mode == "IMAGING" and \
                        round(m['magnification'], 0) == round(magnification, 0):
                    magnification_index = m['index']
                    break
                if self.record_mode == "DIFFRACTION" and \
                        round(m['camera_length'], 0) == round(camera_length, 0):
                    magnification_index = m['index']
                    break
            return magnification_index
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nget_record_magnification_index have a exception\n{e}")

    def Optics_Condition_display_record(self, mode, spot_size, defocus, magnification, camera_length, intensity):
        # display
        try:
            # 清空 textBrowser_record
            self.textBrowser_record.setText("")

            # 数据处理
            defocus_str = self.round_to_two_decimals(defocus)
            camera_length_str = "{:.4f}".format(camera_length)
            intensity_str = "{:.4f}".format(intensity)

            # 添加到 textBrowser_record
            self.textBrowser_record.append(f"mode:      {mode}")
            self.textBrowser_record.append(f"spot size:    {spot_size}")
            self.textBrowser_record.append(f"defocus:      {defocus_str}")
            self.textBrowser_record.append(f"magnification:    {magnification}")
            self.textBrowser_record.append(f"camera_length:      {camera_length_str}")
            self.textBrowser_record.append(f"intensity:      {intensity_str}")

            # 执行 set_xx() 方法
            self.microscope.set_projection_mode(mode=mode)
            self.microscope.set_spot_size_index(index=spot_size)
            self.microscope.set_defocus(value=defocus * mm_to_m / defocus_factor)
            magnification_index = self.get_record_magnification_index(magnification=magnification,
                                                                      camera_length=camera_length)
            self.microscope.set_magnification_index(
                index=magnification_index)
            # 没有 set_camera_length 方法
            self.microscope.set_intensity(value=self.record_intensity)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nOptics_Condition_display_record have a exception\n{e}")

    def Optics_Condition_display_record_clicked(self):
        # Display Record 按钮
        try:
            # 执行 Optics_Condition_display_record
            self.Optics_Condition_display_record(mode=self.record_mode,
                                                 spot_size=self.record_spot_size,
                                                 defocus=self.record_defocus,
                                                 magnification=self.record_magnification,
                                                 camera_length=self.record_camera_length,
                                                 intensity=self.record_intensity)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nOptics_Condition_display_record_clicked button have a exception\n{e}")

    def Optics_Condition_S_clicked(self, index):
        # S 按钮点击事件
        try:
            # 获取参数
            self.record_array[index][0] = self.microscope.get_projection_mode()
            self.record_array[index][1] = int(self.microscope.get_spot_size_index())
            self.record_array[index][2] = float(self.microscope.get_defocus() * m_to_mm * defocus_factor)
            self.record_array[index][3] = float(self.microscope.get_indicated_magnification())
            self.record_array[index][4] = float(self.microscope.get_indicated_camera_length())
            self.record_array[index][5] = float(self.microscope.get_intensity())

            # 设置对应按钮可用
            if index == 0:
                self.pushButton_14.setEnabled(True)
            elif index == 1:
                self.pushButton_9.setEnabled(True)
            elif index == 2:
                self.pushButton_6.setEnabled(True)
            elif index == 3:
                self.pushButton_8.setEnabled(True)
            elif index == 4:
                self.pushButton_7.setEnabled(True)
            elif index == 5:
                self.pushButton_15.setEnabled(True)
            elif index == 6:
                self.pushButton_16.setEnabled(True)
            elif index == 7:
                self.pushButton_17.setEnabled(True)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nOptics_Condition_S_clicked\n{e}")

    def Optics_Condition_D_clicked(self, index):
        # D 按钮点击事件
        try:
            record_mode = self.record_array[index][0]
            record_spot_size = self.record_array[index][1]
            record_defocus = self.record_array[index][2]
            record_magnification = self.record_array[index][3]
            record_camera_length = self.record_array[index][4]
            record_intensity = self.record_array[index][5]

            # 显示到对应组件
            if record_mode.lower() == "IMAGING".lower():
                self.radioButton_Imaging.setChecked(True)
                self.radioButton_diffraction.setChecked(False)
            else:
                self.radioButton_Imaging.setChecked(False)
                self.radioButton_diffraction.setChecked(True)
            self.spinBox_spotsize.setValue(record_spot_size)
            # self.lineEdit_defocus.setText(self.round_to_two_decimals(record_defocus))
            self.lcdNumber_magnification.setDigitCount(10)
            self.lcdNumber_magnification.display(record_magnification)
            self.lcdNumber_intensity_3.setDigitCount(10)
            self.lcdNumber_intensity_3.display("{:.4f}".format((record_camera_length)))
            self.lcdNumber_intensity.setDigitCount(10)
            self.lcdNumber_intensity.display("{:.4f}".format((record_intensity)))

            # 执行 Optics_Condition_display_record
            self.Optics_Condition_display_record(mode=record_mode,
                                                 spot_size=record_spot_size,
                                                 defocus=record_defocus,
                                                 magnification=record_magnification,
                                                 camera_length=record_camera_length,
                                                 intensity=record_intensity)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\n{e}")

    def Optics_Condition_clear_all_clicked(self):
        # Clear All 按钮点击事件
        try:
            # 设置D不可用
            if self.pushButton_14.isEnabled():
                self.pushButton_14.setEnabled(False)
            if self.pushButton_9.isEnabled():
                self.pushButton_9.setEnabled(False)
            if self.pushButton_6.isEnabled():
                self.pushButton_6.setEnabled(False)
            if self.pushButton_8.isEnabled():
                self.pushButton_8.setEnabled(False)
            if self.pushButton_7.isEnabled():
                self.pushButton_7.setEnabled(False)
            if self.pushButton_15.isEnabled():
                self.pushButton_15.setEnabled(False)
            if self.pushButton_16.isEnabled():
                self.pushButton_16.setEnabled(False)
            if self.pushButton_17.isEnabled():
                self.pushButton_17.setEnabled(False)

            # 清空数组
            self.record_array = None
            self.record_array = [[None for _ in range(self.array_len)] for _ in range(self.array_len)]
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nClear all success")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nClear button have a exception\n{e}")

    # 控制区4
    def Start_Running_control4_init(self):
        #
        self.Start_Running_Open_Value = False
        self.Start_Running_Beam_Blank = False
        # Experimental Summary 按钮
        self.pushButton_summary.clicked.connect(self.Start_Running_experimental_summary_clicked)

        # single run 按钮
        self.pushButton_singlerun.clicked.connect(self.Start_Running_single_run_clicked)

        # batch run 按钮
        self.pushButton_batchrun.clicked.connect(self.Start_Running_batch_run_clicked)

        # stop 按钮
        self.pushButton_stop.clicked.connect(self.Start_Running_stop_clicked)
        self.pushButton_stop.setEnabled(False)

        # 定义基准图片 run结束 或者 stop后 设置为None
        self.base_image = None

        # 图像保存路径
        self.output_dir_flag = False
        self.Start_Running_Image_folder_path = None
        self.Start_Running_Run_Thread_run_flag = False
        # 设置run线程
        self.Start_Running_Stop_Signal = threading.Event()
        self.Start_Running_Run_Thread = None

        # 默认选中 Drift correction 和 Auto Focusing
        # self.checkBox.click()
        # self.checkBox_2.click()

        # 设置进度条
        self.progressBar_value = 0
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(100)
        self.progressBar.setValue(self.progressBar_value)

        # 预测时间定时器
        global image_forecast_time
        image_forecast_time = None
        self.Start_Running_forecast_time_timer = QTimer()
        self.Start_Running_forecast_time_timer.setInterval(100)  # 每隔 100 ms
        self.Start_Running_forecast_time_timer.timeout.connect(self.Start_Running_update_forecast_time)
        # 显示图片列表定时器
        self.Start_Running_load_image_arr = []
        self.Start_Running_load_image_drift_arr = []
        self.Start_Running_load_image_red_arr = []
        self.Start_Running_load_image_timer = QTimer()
        self.Start_Running_load_image_timer.setInterval(1000)  # 每隔 1000 ms
        self.Start_Running_load_image_timer.timeout.connect(self.Start_Running_load_image_list)
        # 设置只读
        self.listView_2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.save_file = None

    def Start_Running_get_run_condition(self):
        try:
            # 条件
            run_condition = []
            # 获取参数
            projection_mode = self.microscope.get_projection_mode()
            spot_size = int(self.microscope.get_spot_size_index())
            defocus = float(self.microscope.get_defocus() * m_to_mm * defocus_factor)
            defocus_str = self.round_to_two_decimals(defocus)
            magnification = float(self.microscope.get_indicated_magnification())
            intensity = float(self.microscope.get_intensity())
            intensity_str = "{:.4f}".format(intensity)

            run_condition.append(f"mode:{projection_mode}")
            run_condition.append(f"spot size:{spot_size}")
            run_condition.append(f"defocus:{defocus_str}")
            run_condition.append(f"magnification:{magnification}")
            run_condition.append(f"intensity:{intensity_str}")
            run_condition.append(f"exposure time:{self.Exposure_Time}")
            run_condition.append(f"binning:{self.binning}")

            run_data = self.Particle_Searching_stage_position
            if len(run_data) <= 9:
                Start_Angle = self.Start_Angle
                End_Angle = self.End_Angle
                Step = self.Degree_Speed
            else:
                Start_Angle = self.Start_Angle if run_data[6] == '' else float(run_data[6])
                End_Angle = self.End_Angle if run_data[7] == '' else float(run_data[7])
                Step = self.Degree_Speed if run_data[8] == '' else float(run_data[8])

            run_condition.append(f"start angle:{Start_Angle}")
            run_condition.append(f"end angle:{End_Angle}")
            run_condition.append(f"tilt step:{Step}")
            return "\n".join(run_condition)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nsummary button have a exception\n{e}")

    def Start_Running_experimental_summary_clicked(self):
        # Experimental Summary按钮点击事件
        try:
            self.listWidget_particle_searching.clear()
            self.listWidget_particle_searching.append(self.Start_Running_get_run_condition())
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nsummary button have a exception\n{e}")

    def Start_Running_get_image_matrix(self):
        # 获取图像矩阵
        try:
            param_dict = {}
            name = self.comboBox_3.currentText()
            param_dict["exposure(s)"] = self.Exposure_Time
            param_dict["binning"] = self.binning
            self.microscope.set_camera_param(name, param_dict, ignore_errors=False)
            # 执行acquire得到一张图片
            img = self.microscope.acquire(name)[self.comboBox_3.currentText()]
            return img
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_get_image_matrix\n{e}")

    def Start_Running_get_score(self, defocus):
        # 得分函数
        try:
            self.microscope.set_defocus(defocus)
            image = self.Start_Running_get_image_matrix()
            abs_diff = np.abs(np.diff(image.astype(float), axis=0))
            # 方法1: EAV分越大图像越清晰
            score = np.sum(abs_diff)
            # 方法2: 方差越大图像越清晰
            # score = np.var(image)
            # 方法3: 方差越大图像越清晰
            # score = np.var(image) * np.var(image)
            return score
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_get_variance\n{e}")

    def Start_Running_hill_climbing_search(self, defocus_current, step_size, iterations):
        # 爬山算法找最佳defocus
        try:
            for _ in range(iterations):
                # 获取当前状态的图像得分
                image_score_curr = self.Start_Running_get_score(defocus=defocus_current)
                # 在定义的步长上下文中探索新的defocus值
                defocus_new1 = defocus_current + step_size
                defocus_new2 = defocus_current - step_size
                # 获取新状态的图像得分
                image_score_new1 = self.Start_Running_get_score(defocus=defocus_new1)
                image_score_new2 = self.Start_Running_get_score(defocus=defocus_new2)
                # 比较并更新defocus值
                if image_score_new1 > image_score_curr and image_score_new1 >= image_score_new2:
                    defocus_current = defocus_new1
                elif image_score_new2 > image_score_curr and image_score_new2 > image_score_new1:
                    defocus_current = defocus_new2
                else:
                    # 如果没有提高，则认为已经达到了局部最大值
                    break
            return defocus_current
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_hill_climbing_search\n{e}")

    # 图像采集流程：b.进行Autofocus
    def Start_Running_image_acquisition_process_auto_focus(self):
        try:
            # 初始 defocus 值
            defocus_current = 0.0
            # 指定步长
            step_size = 0.1 * um_to_m
            # 指定迭代次数
            iterations = 1000
            defocus = self.Start_Running_hill_climbing_search(
                defocus_current=defocus_current,
                step_size=step_size,
                iterations=iterations
            )
            self.microscope.set_defocus(defocus)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_image_acquisition_process_auto_focus\n{e}")

    def Start_Running_get_pixel_size(self):
        try:
            # 获取显微镜相机的像素尺寸
            pixel_size = 1
            # 读取配置文件 configuration.json
            with open("configuration.json", "r") as f:
                data = json.load(f)
            pixel_data = json.loads(json.dumps(data["pixel_data"]))
            for item in pixel_data:
                # 四舍五入到整数比较，如果一样则赋值退出循环
                if round(item["magnification"], 0) == round(self.microscope.get_indicated_magnification(), 0):
                    pixel_size = float(item["pixel_size(nm)"]) * float(self.binning) * nm_to_m
                    break
            return pixel_size
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_get_pixel_size\n{e}")

    def Start_Running_get_image_shift(self, image1, image2):
        # 获取 image_shift
        try:
            # 对输入的图像进行均值归一化处理
            image1 = image1 - np.mean(image1)
            image2 = image2 - np.mean(image2)
            # 利用快速傅里叶变换（FFT）计算图像的自相关和互相关，得到相关性矩阵
            fftself = sig.fftconvolve(image1, image1[::-1, ::-1], mode='same')
            fftcomp = sig.fftconvolve(image1, image2[::-1, ::-1], mode='same')
            # 找到相关性矩阵中具有最大值的位置，即相关性的峰值位置
            selfcenter = np.unravel_index(np.argmax(fftself), fftself.shape)
            compcenter = np.unravel_index(np.argmax(fftcomp), fftcomp.shape)
            pixel_size = self.Start_Running_get_pixel_size()
            # 计算图像在 x 和 y 方向上的偏移量，乘以像素尺寸
            xsh = (compcenter[0] - selfcenter[0]) * pixel_size
            ysh = (-(compcenter[1] - selfcenter[1])) * pixel_size
            # 根据偏移量计算出 u 和 v 的值,这些值代表了图像在水平和垂直方向上的偏移量, image_shift 的系数应该要根据具体场景调试得到
            return (xsh, ysh)
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_get_image_shift\n{e}")

    # 图像采集流程：c. 漂移校正
    def Start_Running_image_acquisition_process_drift_correction(self):
        try:
            if self.base_image is None:
                # 直接获取第一张图像矩阵
                self.base_image = self.Start_Running_get_image_matrix()
            else:
                # 获取图像矩阵
                image = self.Start_Running_get_image_matrix()
                x, y = self.microscope.get_image_shift()
                # 单位转换
                x = x * nm_to_m
                y = y * nm_to_m
                u, v = self.Start_Running_get_image_shift(self.base_image, image)
                self.microscope.set_image_shift((x + u, y + v))
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_image_acquisition_process_drift_correction\n{e}")

    # 拍照 + 漂移校正
    def Start_Running_image_acquisition_process_get_image_drift_correction(self):
        try:
            img = self.Start_Running_get_image_matrix()
            label = str("None") if self.Particle_Searching_stage_position == [] else str(
                self.Particle_Searching_stage_position[0])
            # print(f"放大倍数: {self.record_magnification}")
            if self.base_image is None:
                # 直接获取第一张图像做基准
                pass
            else:
                # 是否还需要漂移校正
                while True:
                    currentstage = self.microscope.get_stage_position()
                    x = currentstage['x']
                    y = currentstage['y']
                    xsh, ysh = self.Start_Running_get_image_shift(np.array(self.base_image), np.array(img))
                    newx = x - xsh
                    newy = y + ysh
                    print(f"xsh:{xsh},ysh:{ysh}")
                    self.microscope.set_stage_position(x=newx, y=newy, method='GO')
                    # 在做完漂移矫正后更新一下新的图片,然后把飘逸矫正后的图片作为新的基准
                    img = self.Start_Running_get_image_matrix()
                    # 如果放大倍数小于 46000 ，直接跳出循环
                    if self.record_magnification is None:
                        self.Optics_Condition_get_optics_clicked()
                        self.Optics_Condition_save_record_clicked()
                    if float(self.record_magnification) < 46000.0:
                        break
                    xy_sh = 0.2 * 1e-7
                    if abs(xsh) <= xy_sh and abs(ysh) <= xy_sh:
                        break
            # 更换基准图片
            self.base_image = img
            # 保存图像到本地
            img_name = f"{self.Start_Running_Image_folder_path}/{label}_{str(self.Start_Running_Image_index).zfill(image_zfill)}.tif"
            # img_pil = Image.fromarray(img).convert('I;16')
            # img_pil.save(img_name)
            self.Start_Running_generate_image(img_name, img)
            # 添加信息到日志
            with open(self.Start_Running_Image_log, "a") as file:
                stage_position = self.microscope.get_stage_position()
                alpha = math.degrees(stage_position['a'])  # 弧度转度
                alpha = self.round_to_two_decimals(alpha)
                beta = math.degrees(stage_position['b'])  # 弧度转度
                beta = self.round_to_two_decimals(beta)
                file.write(f"{img_name} {alpha} {beta}\n")
            # 图片索引 +1
            self.Start_Running_Image_index = self.Start_Running_Image_index + 1
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_image_acquisition_process_drift_correction\n{e}")

    # 图像采集流程为：e. 拍照
    def Start_Running_image_acquisition_process_get_image(self):
        try:
            img = self.Start_Running_get_image_matrix()
            label = str("None") if self.Particle_Searching_stage_position == [] else str(
                self.Particle_Searching_stage_position[0])
            img_name = f"{self.Start_Running_Image_folder_path}/{label}_{str(self.Start_Running_Image_index).zfill(image_zfill)}.tif"
            self.Start_Running_generate_image(img_name=img_name, img=img)
            # 添加信息到日志
            with open(self.Start_Running_Image_log, "a") as file:
                stage_position = self.microscope.get_stage_position()
                alpha = math.degrees(stage_position['a'])  # 弧度转度
                alpha = self.round_to_two_decimals(alpha)
                beta = math.degrees(stage_position['b'])  # 弧度转度
                beta = self.round_to_two_decimals(beta)
                file.write(f"{img_name} {alpha} {beta}\n")
            self.Start_Running_Image_index = self.Start_Running_Image_index + 1
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nrun_capture_image:{e}")

    def Start_Running_generate_image(self, img_name, img):
        #
        try:
            metadata = {}
            # Names
            metadata['Image'] = str(self.comboBox_3.currentText())
            metadata['File'] = str(img_name)
            # Data Size
            metadata['Size (X)'] = str(img.shape[1])
            metadata['Size (Y)'] = str(img.shape[0])
            # Calibration
            metadata['Pixel Size (X)'] = f"{str(float(self.Start_Running_get_pixel_size()) * m_to_nm)}nm"
            metadata['Pixel Size (Y)'] = f"{str(float(self.Start_Running_get_pixel_size()) * m_to_nm)}nm"
            metadata['Total Size (X)'] = str(int(img.shape[1] * float(self.Start_Running_get_pixel_size()) * m_to_nm))
            metadata['Total Size (Y)'] = str(int(img.shape[0] * float(self.Start_Running_get_pixel_size()) * m_to_nm))
            # Acquisition
            # metadata['Detector Manufacturer'] = ''
            metadata['Camera Name'] = str(self.comboBox_3.currentText())
            metadata['Date'] = datetime.datetime.now().strftime("%a %b %d %H:%M:%S %Y")
            # metadata['Integration Time'] = ''
            metadata['Range (X)'] = f"0 to {img.shape[1]} pixels"
            metadata['Range (Y)'] = f"0 to {img.shape[0]} pixels"
            metadata['Binning'] = str(self.binning)
            # metadata['Image Correction'] = 'xxx'
            # metadata['Transfer OK'] = 'Yes'
            # metadata['Saturation Point'] = 'xxx'
            # metadata['Max Possible Pixel Value'] = 'xxx'
            # Microscope Info
            # metadata['Microscope'] = 'xxx'
            # metadata['User'] = 'xxx'
            # metadata['Gun type'] = 'xxx'
            # metadata['High tension'] = 'xxx'
            # metadata['Extraction voltage'] = 'xxx'
            # metadata['Gun lens'] = 'xxx'
            # metadata['Emission'] = 'xxx'
            metadata['Mode'] = f"{str(self.microscope.get_projection_mode())}"
            metadata[
                'Defocus'] = f"{str(self.round_to_two_decimals(self.microscope.get_defocus() * m_to_mm * defocus_factor))}"
            metadata[
                'Magnification'] = f"{str(self.round_to_two_decimals(self.microscope.get_indicated_magnification()))}"
            metadata['Spot size'] = f"{str(int(self.microscope.get_spot_size_index()))}"
            metadata['Intensity'] = f"{str(self.round_to_two_decimals(self.microscope.get_intensity()))}"
            # metadata['Objective lens'] = ''
            # metadata['Diffraction lens'] = str(self.microscope.get_diffraction_shift())
            metadata['Image shift X'] = f"{str(self.round_to_two_decimals(self.microscope.get_image_shift()[0]))}"
            metadata['Image shift Y'] = f"{str(self.round_to_two_decimals(self.microscope.get_image_shift()[1]))}"
            metadata[
                'Stage X'] = f"{str(self.round_to_two_decimals(self.microscope.get_stage_position()['x'] * m_to_um))}um"
            metadata[
                'Stage Y'] = f"{str(self.round_to_two_decimals(self.microscope.get_stage_position()['y'] * m_to_um))}um"
            metadata[
                'Stage Z'] = f"{str(self.round_to_two_decimals(self.microscope.get_stage_position()['z'] * m_to_um))}um"
            metadata[
                'Stage A'] = f"{self.round_to_two_decimals(math.degrees(self.microscope.get_stage_position()['a']))}degree"
            metadata[
                'Stage B'] = f"{self.round_to_two_decimals(math.degrees(self.microscope.get_stage_position()['b']))}degree"
            # metadata['C1 Aperture'] = ''
            # metadata['C2 Aperture'] = ''
            # metadata['OBJ Aperture'] = ''
            # metadata['SA Aperture'] = ''
            # metadata['Filter mode'] = ''
            img = (img * (2 ** 16 - 1)).astype(np.uint16)
            with tifffile.TiffWriter(img_name) as tif:
                # tif.save(img, metadata=metadata, photometric='MINISBLACK', bitspersample=16)
                tif.save(img, metadata=metadata, photometric='MINISWHITE', bitspersample=16)
            # print(self.Start_Running_get_image_metadata(img_name))
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_generate_image\n{e}")

    def Start_Running_get_image_metadata(self, img_name):
        #
        try:
            with tifffile.TiffFile(img_name) as tif:
                # 获取所有页面对象
                pages = tif.pages
                # 遍历页面对象并读取属性信息
                for page in pages:
                    description = page.tags.get("ImageDescription")  # 获取描述信息
                    return description.value if description else None
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_get_image_description\n{e}")

    def get_current_time(self):
        # 获取格式化的当前时间
        try:
            current_time = datetime.datetime.now()
            current_time = current_time.strftime("%Y-%m-%d-%H-%M-%S")
            return current_time
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nget_current_time have a exception\n{e}")

    def Start_Running_update_forecast_time(self):
        # 更新预测时间
        try:
            global image_forecast_time
            if self.Start_Running_Stop_Signal.is_set():
                image_forecast_time = None
                self.lineEdit.setText(f"0.0s")
                self.Start_Running_forecast_time_timer.stop()
                return
            if image_forecast_time is None:
                return
            current_time = float(self.lineEdit.text()[:-1])
            # if current_time < 0.0:
            #     return
            if current_time < 10.0:
                x = 3
            elif current_time < 100.0:
                x = 4
            elif current_time < 1000.0:
                x = 5
            elif current_time < 10000.0:
                x = 6
            elif current_time < 100000.0:
                x = 7
            elif current_time < 1000000.0:
                x = 8
            else:
                x = 9
            forecast_time = float(str(image_forecast_time)[:x])
            if current_time == forecast_time:
                current_time = float(str(str(image_forecast_time))[:x]) - 0.1
                if current_time <= 0:
                    # current_time = 0.0
                    # self.lineEdit.setText(f"{current_time}s")
                    return
                if current_time < 10.0:
                    x = 3
                elif current_time < 100.0:
                    x = 4
                elif current_time < 1000.0:
                    x = 5
                elif current_time < 10000.0:
                    x = 6
                elif current_time < 100000.0:
                    x = 7
                elif current_time < 1000000.0:
                    x = 8
                else:
                    x = 9
                current_time = str(current_time)[:x]
                image_forecast_time = float(current_time)
                self.lineEdit.setText(f"{current_time}s")
            else:
                image_forecast_time = float(str(forecast_time)[:x])
                self.lineEdit.setText(f"{forecast_time}s")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nupdate_forecast_time have a exception\n{e}")

    def Start_Running_load_image_list(self):
        # 显示文件夹的图片到组件
        try:
            self.Start_Running_update_progressBar()
            global image_working_path_drift, image_working_path_red
            # print(f"drift:{image_working_path_drift},red:{image_working_path_red}")
            folder_path_list = [image_working_path_drift, image_working_path_red]
            for folder_path in folder_path_list:
                if folder_path is None:
                    continue
                # 已显示的图片 self.Start_Running_load_image_drift_arr self.Start_Running_load_image_red_arr
                for file_name in os.listdir(folder_path):
                    file_path = os.path.join(folder_path, file_name)
                    if os.path.isfile(file_path) and file_path.lower().endswith(".tif"):
                        if folder_path == image_working_path_drift and file_path not in self.Start_Running_load_image_drift_arr:
                            self.Start_Running_load_image_drift_arr.append(file_path)
                            self.listView.addItem(file_path)
                            # print(file_path)
                        elif folder_path == image_working_path_red and file_path not in self.Start_Running_load_image_red_arr:
                            self.Start_Running_load_image_red_arr.append(file_path)
                            self.listView.addItem(file_path)
                            # print(file_path)
            # 当前线程结束后，最后再执行一遍
            if self.Start_Running_Stop_Signal.is_set():
                if self.Start_Running_load_image_flag:
                    self.Start_Running_load_image_flag = False
                else:
                    self.Start_Running_load_image_timer.stop()
                    self.Start_Running_load_image_drift_arr = []
                    self.Start_Running_load_image_red_arr = []
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_load_image have a exception\n{e}")

    def Start_Running_update_progressBar(self):
        # 修改进度条
        try:
            current_angle = math.degrees(self.microscope.get_stage_position()['a'])
            if self.Start_Running_Stop_Signal.is_set():
                if self.End_Angle - self.Step < current_angle < self.End_Angle + self.Step:
                    self.progressBar_value = 100
                    self.progressBar.setValue(int(self.progressBar_value))
                return
            if self.Start_Angle - self.Step <= current_angle <= self.Start_Angle + self.Step:
                self.Start_Running_progressBar_ready_begin = True
            if not self.Start_Running_progressBar_ready_begin:
                return
            all_angle = abs(self.End_Angle - self.Start_Angle)
            finish_angle = abs(current_angle - self.Start_Angle)
            progressBar_value = int((finish_angle / all_angle) * 100)
            if self.progressBar_value != progressBar_value:
                # print(f"current_angle: {current_angle},End_Angle: {self.End_Angle},progress:{progressBar_value}")
                # 修改进度条的值
                self.progressBar_value = progressBar_value
                self.progressBar.setValue(int(self.progressBar_value))
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_test have a exception\n{e}")

    def Start_Running_before_run(self):
        # 线程开始前执行
        try:
            global image_working_path_drift, image_working_path_red, image_update_flag
            image_update_flag = True
            image_working_path_drift, image_working_path_red = None, None
            # 清空 self.scenes
            self.scenes = []
            # 设置 stop 按钮可用
            self.pushButton_stop.setEnabled(True)
            # 设置 single run 按钮不可用
            self.pushButton_singlerun.setEnabled(False)
            # 设置 batch run 按钮不可用
            self.pushButton_batchrun.setEnabled(False)
            # 设置 progressBar 进度条为0
            self.progressBar_value = 0
            self.progressBar.setValue(self.progressBar_value)
            # 设置保存文件夹为空
            self.Start_Running_Image_folder_path = None
            # 设置基准图片为空
            self.base_image = None
            # 图片索引
            self.Start_Running_Image_index = 1
            #
            self.microscope.set_column_valves_open(True)
            self.microscope.set_screen_position('UP')
            self.microscope.set_beam_blanked(False)
            # 清除线程
            self.Start_Running_Stop_Signal.clear()
            if self.Start_Running_Run_Thread is not None:
                # 释放线程
                self.Start_Running_Run_Thread.join()
            # 清空图片列表和属性
            model = QtGui.QStandardItemModel(self.listView_2)
            item = QtGui.QStandardItem("")
            model.appendRow(item)
            self.listView_2.setModel(model)
            self.listView.clear()
            # 预测时间定时器
            self.Start_Running_all_time = []
            self.Start_Running_start_time = time.time()
            self.Start_Running_end_time = time.time()
            # 显示图像列表定时器
            self.Start_Running_load_image_arr = []
            self.Start_Running_load_image_drift_arr = []
            self.Start_Running_load_image_red_arr = []
            self.Start_Running_load_image_flag = True
            # 开启定时器
            self.Start_Running_forecast_time_timer.start()
            self.Start_Running_load_image_timer.start()
            # 进度条
            self.Start_Running_progressBar_ready_begin = False
            #
            self.Start_Running_Run_Thread_run_flag = True
            print("---before run---")
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nrun begin")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_before_run\n{e}")

    def Start_Running_after_run(self):
        # 线程结束后执行
        try:
            self.progressBar_value = 100
            self.progressBar.setValue(int(self.progressBar_value))
            # 设置 stop 按钮不可用
            self.pushButton_stop.setEnabled(False)
            # 设置 single run 按钮可用
            self.pushButton_singlerun.setEnabled(True)
            # 设置 batch run 按钮可用
            self.pushButton_batchrun.setEnabled(True)
            # 停止程序
            self.Start_Running_Stop_Signal.set()
            #
            if self.Start_Running_Open_Value:
                self.microscope.set_column_valves_open(False)
            if self.Start_Running_Beam_Blank:
                self.microscope.set_beam_blanked(True)
            self.microscope.set_screen_position('DOWN')
            #
            self.Start_Running_Run_Thread_run_flag = False
            print("---after run---")
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nrun end")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_after_run\n{e}")

    def Start_Running_get_run_parameter(self):
        try:
            global image_update_flag, startangle, endangle, degreespeed
            run_data = self.Particle_Searching_stage_position
            # 如果第一步和第三步为空，则执行step3_find_max_min_angle
            if run_data[6] != '' and run_data[7] != '' and run_data[8] != '':
                image_update_flag = False
                startangle, endangle, degreespeed = float(run_data[6]), float(run_data[7]), float(run_data[8])
                Start_Angle = float(run_data[6])
                End_Angle = float(run_data[7])
                Step = float(run_data[8])
            else:
                Start_Angle = float(self.Start_Angle)
                End_Angle = float(self.End_Angle)
                Step = float(self.Degree_Speed)
            # 第一步优先级比第三步要高
            alpha_dir = False if Start_Angle > End_Angle else True
            alpha = Start_Angle
            return Start_Angle, End_Angle, Step, alpha_dir, alpha
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nStart_Running_get_parameter:{e}")

    def Start_Running_sure_choose_file_path(self):
        try:
            global filesavepath
            if self.output_dir_flag:
                return True
            msg_box = QMessageBox()
            msg_box.setWindowTitle("Warning！")
            msg_box.setText("You didn't choose a file save path!!!\nWhether to save using the last folder used?")
            msg_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            msg_box.setDefaultButton(QMessageBox.Ok)
            # 显示对话框并获取用户的选择
            result = msg_box.exec_()
            flag = True if result == QMessageBox.Ok else False
            if flag:
                if not os.path.exists(filesavepath):
                    os.makedirs(filesavepath)
                    self.output_dir = filesavepath
            return flag
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_mes_box have a exception\n{e}")

    def Start_Running_single_run_clicked(self):
        # Run 按钮点击事件
        try:
            if not self.Start_Running_sure_choose_file_path():
                return
            self.Start_Running_before_run()
            # 连接线程
            self.Start_Running_Run_Thread = threading.Thread(target=self.Start_Running_single_run_thread)
            # 开启线程
            self.Start_Running_Run_Thread.start()
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nsinglerun button have a exception\n{e}")

    def Start_Running_single_run_thread(self):
        # run 线程
        try:
            # 保存当前工作路径
            self.update_json_config("current_path", os.path.dirname(os.path.abspath(__file__)))
            current_path = os.getcwd()
            self.Particle_Searching_stage_position = self.Particle_Searching_tableWidget_get_row_data()
            self.Start_Angle, self.End_Angle, self.Step, alpha_dir, alpha = self.Start_Running_get_run_parameter()
            self.microscope.set_stage_position({"a": math.radians(self.Start_Angle)})

            self.Start_Running_start_time = time.time()
            collector = credcollecting()
            update_input()
            module_value = self.comboBox_5.currentText()
            correct_value = self.comboBox_6.currentText()
            global thread_event, thread_event_is_exit
            thread_event_is_exit = False
            if module_value == "only_drift":
                self.messageBox.show_drift_correction_signal.emit()
                if thread_event is not None:
                    thread_event.clear()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                collector.only_drift_run()
            elif correct_value == 'online_correct' and module_value == 'red':
                # 第一个弹窗
                self.messageBox.show_drift_correction_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                t1, log, edpath, redpath = collector.red_online_correct_run1()
                # 第二个弹窗
                self.messageBox.show_ed_acquire_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                # run2
                collector.red_online_correct_run2(t1, log, edpath, redpath)
            elif correct_value == 'online_correct' and module_value == 'scred':
                # 第一个弹窗
                self.messageBox.show_drift_correction_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                t1, log, edpath, scredpath = collector.scred_online_correct_run1()
                # 第二个弹窗
                self.messageBox.show_ed_acquire_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                    # run2
                collector.scred_online_correct_run2(t1, log, edpath, scredpath)
            elif correct_value == 'online_correct' and module_value == 'cred':
                # 第一个弹窗
                self.messageBox.show_drift_correction_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                t1, log, edpath, credpath = collector.cred_online_correct_run1()
                # 第二个弹窗
                self.messageBox.show_ed_acquire_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                    # run2
                collector.cred_online_correct_run2(t1, log, edpath, credpath)
            elif correct_value == 'no_correct':
                module = getattr(collector, f"{module_value}_{correct_value}_run")
                self.messageBox.show_ed_acquire_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                module()
            else:
                module = getattr(collector, f"{module_value}_{correct_value}_run")
                # 弹窗
                self.messageBox.show_offline_correction_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                self.messageBox.show_ed_acquire_signal.emit()
                thread_event = threading.Event()
                thread_event.wait()
                if thread_event_is_exit:
                    self.Start_Running_after_run()
                    os.chdir(current_path)
                    return
                module()
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nsingle run success!")
            self.Start_Running_after_run()
            os.chdir(current_path)
            print("single run success!")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nsinglerun_thread:{e}")

    def Start_Running_batch_run_clicked(self):
        # Batch run 按钮 点击事件
        try:
            module_value = self.comboBox_5.currentText()
            correct_value = self.comboBox_6.currentText()
            if correct_value != "no_correct":
                return
            # 获取当前行数
            row_count = self.tableWidget.rowCount()
            # 如果没有数据则返回
            if row_count == 0:
                return
            if not self.Start_Running_sure_choose_file_path():
                return
            self.Start_Running_before_run()
            # 连接线程
            self.Start_Running_Run_Thread = threading.Thread(target=self.Start_Running_batch_run_thread)
            # 开启线程
            self.Start_Running_Run_Thread.start()
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nbatchrun button have a exception\n{e}")

    def Start_Running_batch_run_thread(self):
        # batch run 线程
        try:
            global image_update_flag
            tmp = self.Particle_Searching_stage_position
            # 每次循环运行时间
            all_time = []
            row_count = self.tableWidget.rowCount()
            # 获取 tableWidget 的全部数据
            all_data = self.Particle_Searching_tableWidget_get_all_data()
            is_Exit = False
            for row in range(row_count):
                # 保存当前工作路径
                self.update_json_config("current_path", os.path.dirname(os.path.abspath(__file__)))
                current_path = os.getcwd()
                image_update_flag = True
                self.Start_Running_start_time = time.time()
                start_time = time.time()
                # 获取 tableWidget 的每一行数据
                row_data = all_data[row]
                global image_label
                image_label = row_data[0]
                # 设置当前的 Particle_Searching_stage_position
                self.Particle_Searching_stage_position = row_data
                stage_position = {}
                # 如果接收到stop信号则停止
                if self.Start_Running_Stop_Signal.is_set():
                    return
                # 单位转换
                stage_position['x'] = float(row_data[1]) / float(1e6)
                stage_position['y'] = float(row_data[2]) / float(1e6)
                stage_position['z'] = float(row_data[3]) / float(1e6)
                stage_position['a'] = math.radians(float(row_data[4]))
                stage_position['b'] = math.radians(float(row_data[5]))
                if self.Start_Running_Stop_Signal.is_set():
                    return
                self.microscope.set_stage_position(pos=stage_position, method="GO")
                self.Start_Angle, self.End_Angle, self.Step, alpha_dir, alpha = self.Start_Running_get_run_parameter()
                if self.Start_Running_Stop_Signal.is_set():
                    return
                global thread_event, thread_event_is_exit, image_forecast_time
                thread_event_is_exit = False
                collector = credcollecting()
                update_input()
                module_value = self.comboBox_5.currentText()
                correct_value = self.comboBox_6.currentText()
                if module_value == "only_drift":
                    self.messageBox.show_drift_correction_signal.emit()
                    if thread_event is not None:
                        thread_event.clear()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        return
                    collector.only_drift_run()
                elif correct_value == 'online_correct' and module_value == 'red':
                    # 第一个弹窗
                    self.messageBox.show_drift_correction_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                    t1, log, edpath, redpath = collector.red_online_correct_run1()
                    # 第二个弹窗
                    self.messageBox.show_ed_acquire_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                    # run2
                    collector.red_online_correct_run2(t1, log, edpath, redpath)
                elif correct_value == 'online_correct' and module_value == 'scred':
                    # 第一个弹窗
                    self.messageBox.show_drift_correction_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                    t1, log, edpath, scredpath = collector.scred_online_correct_run1()
                    # 第二个弹窗
                    self.messageBox.show_ed_acquire_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                        # run2
                    collector.scred_online_correct_run2(t1, log, edpath, scredpath)
                elif correct_value == 'online_correct' and module_value == 'cred':
                    # 第一个弹窗
                    self.messageBox.show_drift_correction_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                    t1, log, edpath, credpath = collector.cred_online_correct_run1()
                    # 第二个弹窗
                    self.messageBox.show_ed_acquire_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                        # run2
                    collector.cred_online_correct_run2(t1, log, edpath, credpath)
                elif correct_value == 'no_correct':
                    module = getattr(collector, f"{module_value}_{correct_value}_run")
                    if not is_Exit:
                        self.messageBox.show_ed_acquire_signal.emit()
                        thread_event = threading.Event()
                        thread_event.wait()
                        if thread_event_is_exit:
                            self.Start_Running_after_run()
                            os.chdir(current_path)
                            return
                        is_Exit = True
                    module()
                else:
                    module = getattr(collector, f"{module_value}_{correct_value}_run")
                    # 弹窗
                    self.messageBox.show_offline_correction_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                    self.messageBox.show_ed_acquire_signal.emit()
                    thread_event = threading.Event()
                    thread_event.wait()
                    if thread_event_is_exit:
                        self.Start_Running_after_run()
                        os.chdir(current_path)
                        continue
                    module()
                # end_time = time.time()
                # all_time.append(float(end_time - start_time))
                # forecast_time = (sum(all_time) / len(all_time)) * (row_count - row - 1)
                # image_forecast_time = forecast_time
                os.chdir(current_path)
            self.Particle_Searching_stage_position = tmp
            self.Start_Running_after_run()
            print("batch run success!")
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nbatch run success!")
        except Exception as e:
            self.textBrowser_log.append(f"{datetime.datetime.now()}\nbatchrun_thread:{e}")

    def Start_Running_stop_clicked(self):
        # stop 按钮点击事件
        try:
            self.Start_Running_after_run()
            # 停止程序
            self.Start_Running_Stop_Signal.set()
            # 停止定时器
            self.Start_Running_load_image_timer.stop()
            self.Start_Running_forecast_time_timer.stop()
            self.lineEdit.setText("0.0s")
            # 设置进度条为0
            self.progressBar_value = 0
            self.progressBar.setValue(self.progressBar_value)
            # 释放线程
            self.Start_Running_Run_Thread.join()
            # 触发 set_column_valves_open(False)
            self.microscope.set_column_valves_open(False)
            self.microscope.set_screen_position('DOWN')
            self.microscope.set_beam_blanked(True)
        except Exception as e:
            self.textBrowser_log.append(
                f"{datetime.datetime.now()}\nStart_Running_stop_clicked button have a exception\n{e}")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
