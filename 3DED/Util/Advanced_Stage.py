# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Advance Stage.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math
import os
from temscript import NullMicroscope
from temscript import Microscope
from time import sleep
import psutil
from threading import Thread
import numpy as np
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QLineEdit, QPushButton, QFileDialog
from PyQt5.QtCore import pyqtSlot


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread

class GoScriptThread(QThread):
    def __init__(self, controller):
        super().__init__()
        self.controller = controller

    def run(self):
        # 将原先 execute_go_script 中的代码放在这里
        self.controller.execute_go_script()

class GoCorrectScriptThread(QThread):
    def __init__(self, controller):
        super().__init__()
        self.controller = controller

    def run(self):
        # 将原先 execute_go_correct_script 中的代码放在这里
        self.controller.execute_go_correct_script()

class MicroscopeController(object):
    def __init__(self):
        super().__init__()
        self.microscope = Microscope()
        # 创建线程实例
        self.go_script_thread = GoScriptThread(self)
        self.go_correct_script_thread = GoCorrectScriptThread(self)

    def setupUi(self, Form):
        Form.setObjectName("Advanced_Stage")
        Form.resize(700, 350)
        Form.setMinimumSize(QtCore.QSize(700, 350))
        Form.setStyleSheet("#Advanced_Stage{\n"
                           "    border-image: url(./img/LogViewer_BG.jpg);\n"
                           "}\n"
                           "\n"
                           "\n"
                           "QLabel{\n"
                           "    color: #4bbdda;\n"
                           "    font-weight: bold;\n"
                           "}\n"
                           "\n"
                           "QLineEdit{\n"
                           "    border: none;\n"
                           "    background: #00ffffff;\n"
                           "    border-bottom-style: solid;\n"
                           "    border-bottom-width: 1px;\n"
                           "    border-bottom-color: #abcdef;\n"
                           "    color: #fff;\n"
                           "}\n"
                           "\n"
                           "#checkBox{\n"
                           "    color: #4bbdda;\n"
                           "}\n"
                           "\n"
                           "\n"
                           "QPushButton{\n"
                           "    background-color:  qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(1, 32, 66, 255), stop:1 #aa4bbdda);\n"
                           "    border-radius: 5px;\n"
                           "    padding: 10px;\n"
                           "    font-weight: bold;\n"
                           "    color: #4bbdda;\n"
                           "\n"
                           "}\n"
                           "\n"
                           "QPushButton:hover{\n"
                           "    background-color: #789abc;\n"
                           "}\n"
                           "\n"
                           "QPushButton:pressed{\n"
                           "    background-color: #89abcd;\n"
                           "}\n"
                           "\n"
                           "#groupBox{\n"
                           "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc03070e, stop:1 #aa267ab8);\n"
                           "    border-radius: 5px;\n"
                           "    border:2px solid #4bbdda;\n"
                           "}\n"
                           "")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setMaximumSize(QtCore.QSize(800, 400))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_4.setContentsMargins(50, 20, 50, 20)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(20)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(30, 20, 30, 20)
        self.verticalLayout_2.setSpacing(20)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setMinimumSize(QtCore.QSize(120, 0))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setMinimumSize(QtCore.QSize(120, 0))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setMinimumSize(QtCore.QSize(120, 0))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_3.addWidget(self.lineEdit_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSpacing(20)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setMinimumSize(QtCore.QSize(120, 0))
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_4.addWidget(self.lineEdit_4)
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_4.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_5.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_5.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout_5.addWidget(self.pushButton_4)
        self.horizontalLayout_5.setStretch(0, 2)
        self.horizontalLayout_5.setStretch(1, 3)
        self.horizontalLayout_5.setStretch(2, 2)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        self.verticalLayout_3.setStretch(0, 2)
        self.verticalLayout_3.setStretch(1, 1)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.horizontalLayout_6.addWidget(self.groupBox)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.connect_Event()
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Advanced_Stage", "Advanced_Stage"))
        self.label.setText(_translate("Advanced_Stage", "Start Angle:"))
        self.label_2.setText(_translate("Advanced_Stage", "End Angle:"))
        self.label_3.setText(_translate("Advanced_Stage", "Degree Speed:"))
        self.label_4.setText(_translate("Advanced_Stage", "Drift File:"))
        self.pushButton.setText(_translate("Advanced_Stage", "Select Path"))
        self.pushButton_2.setText(_translate("Advanced_Stage", "Go"))
        self.pushButton_3.setText(_translate("Advanced_Stage", "Co with correction"))
        self.pushButton_4.setText(_translate("Advanced_Stage", "Refresh"))

    def start_execute_go_script(self):
        # 启动线程
        if not self.go_script_thread.isRunning():
            self.go_script_thread.start()

    def start_execute_go_correct_script(self):
        # 启动线程
        if not self.go_correct_script_thread.isRunning():
            self.go_correct_script_thread.start()

    def connect_Event(self):
        self.pushButton.clicked.connect(lambda _: self.select_file())
        # self.pushButton_2.clicked.connect(self.execute_go_script)
        # self.pushButton_3.clicked.connect(self.execute_go_correct_script)
        self.pushButton_4.clicked.connect(self.stop_execution)
        self.lineEdit.editingFinished.connect(self.enable_run)
        self.lineEdit_2.editingFinished.connect(self.enable_run)
        self.lineEdit_3.editingFinished.connect(self.enable_run)
        self.pushButton_2.clicked.connect(self.start_execute_go_script)
        self.pushButton_3.clicked.connect(self.start_execute_go_correct_script)


    def enable_run(self):
        start = self.lineEdit.text()
        End = self.lineEdit_2.text()
        Degree_Speed = self.lineEdit_3.text()
        if start and End and Degree_Speed:
            self.pushButton_2.setEnabled(True)
            self.pushButton_3.setEnabled(True)

    @pyqtSlot()
    def select_file(self):
        file_dialog = QFileDialog()
        # 设置为选择单个文件
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        # 移除不使用原生对话框的选项，使其在不同的操作系统上更加通用
        file_dialog.setOption(QFileDialog.DontUseNativeDialog)
        if file_dialog.exec_() == QFileDialog.Accepted:
            # 获取选中的文件路径
            file_path = file_dialog.selectedFiles()[0]
            # 设置文本框的内容为文件路径
            self.lineEdit_4.setText(file_path)

    def search_pid(self):
        pidlist = psutil.pids()
        for sub_pid in pidlist:
            process_info = psutil.Process(sub_pid)
            if process_info.name() == 'cmd.exe':
                return sub_pid
        return None
    
    def backgroundrotation(self, goalangle, degree_speed):
        arcgoalangle = math.radians(goalangle)
        rotation_speed = degree_speed / 29.332
        with open('backgroundtilt.py', 'w') as f:
            f.write('from temscript import null_microscope\n')
            f.write('from temscript import microscope\n')
            f.write('TEM = microscope.Microscope()\n')
            f.write(f'goalangle = {arcgoalangle}\n')
            f.write(f'rotationspeed = {rotation_speed}\n')
            f.write("TEM.set_stage_position(a=goalangle, method='GO', speed=rotationspeed)\n")

        def backgroundtilt():
            os.system("python backgroundtilt.py")

        Thread(target=backgroundtilt).start()
        pid = self.search_pid()
        if pid:
            os.system(f"taskkill /F /PID {pid}")
    
    def execute_go_script(self):
        self.is_running = True
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        self.pushButton_4.setEnabled(True)
        start_angle = float(self.lineEdit.text())
        end_angle = float(self.lineEdit_2.text())
        degree_speed = float(self.lineEdit_3.text())
        arcstartangle = math.radians(start_angle)
        self.microscope.set_stage_position(a=arcstartangle, method='GO', speed=1)
        sleep(3)
        self.backgroundrotation(end_angle, degree_speed)
        while not self.is_running:
            break

    def execute_go_correct_script(self):
        self.is_running = True
        self.pushButton_2.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        self.pushButton_4.setEnabled(True)
        start_angle = float(self.lineEdit.text())
        end_angle = float(self.lineEdit_2.text())
        degree_speed = float(self.lineEdit_3.text())
        arcstartangle = math.radians(start_angle)
        self.microscope.set_stage_position(a=arcstartangle, method='GO', speed=1)
        sleep(3)
        log = open("exp_log", "a+")
        print('Background tilt with drift correction start......', file=log, flush=True)
        driftfile = self.lineEdit_4.text()
        drift_value = np.loadtxt(driftfile)
        drift_step = abs(drift_value[0, 1] - drift_value[1, 1])
        drift_time = drift_step / degree_speed
        startstage = self.microscope.get_stage_position()
        startx = startstage['x']
        starty = startstage['y']
        print(1)
        drift_num = abs(start_angle - end_angle) / drift_step
        print(1)
        self.backgroundrotation(end_angle, degree_speed)
        print("drift_num:", abs(int(drift_num)))
        for i in range(1, abs(int(drift_num))):
            sleep(drift_time)
            drift_value = np.loadtxt(self.lineEdit_4.text())
            deltax = drift_value[i, 3] * 1e-9
            deltay = drift_value[i, 4] * 1e-9
            newx = startx - deltax
            newy = starty + deltay
            print(newx, newy)
            self.microscope.set_stage_position(x=newx, y=newy, method='GO')
        #    sleep(1)
            if not self.is_running:
                break
        log.close()


    def stop_execution(self):
        self.pushButton_2.setEnabled(True)
        self.pushButton_3.setEnabled(True)
        self.pushButton_4.setEnabled(False)
        self.is_running = False

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = MicroscopeController()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
