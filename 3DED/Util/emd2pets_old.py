# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'emd2pets.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QPushButton, QVBoxLayout, QHBoxLayout,
                             QLineEdit, QLabel, QComboBox, QFileDialog, QMessageBox, QCheckBox)
import math
import datetime
import os,sys
import json
import numpy as np
import h5py
from PIL import Image
import tkinter.messagebox

from PyQt5.QtCore import QThread, pyqtSignal


class FolderWorkerThread(QThread):
    finished = pyqtSignal()

    def __init__(self, input_path, output_path, beamstop, parent=None):
        super(FolderWorkerThread, self).__init__(parent)
        self.input_path = input_path
        self.output_path = output_path
        self.beamstop = beamstop

    def run(self):
        # 检查输入路径中的.emd文件
        input_path = self.input_path
        output_path = self.output_path
        beamstop_data = None
        with open('beamstop.json', 'r') as file:
            beamstop_data = json.load(file)
        os.chdir(output_path)
        print(output_path)
        beamstop = self.beamstop
        f_list = os.listdir(input_path)
        emd_files = [f for f in f_list if os.path.splitext(f)[1] == '.emd']

        if not emd_files:
            QMessageBox.information(None,
                                    'There is no *.emd Velox file in the provided folder, so the code will not work!')
            return
        print(output_path)

        for file in emd_files:
            filename = os.path.splitext(file)[0]

            # 提取数据
            def get_data(filename):
                full_filename = os.path.join(input_path, filename + '.emd')
                f = h5py.File(full_filename, 'r')
                data_group_name = list(f['Data/Image'].keys())
                images = f['Data/Image'][data_group_name[0]]['Data']
                image_numbers = int(images.shape[2])
                metadata = f['Data/Image'][data_group_name[0]]['Metadata']
                return images, metadata, image_numbers

            data = get_data(filename)
            image_numbers = int(data[2]) - 1  # 减去最后一帧
            metadata = data[1]
            images = data[0]

            # 创建输出文件夹
            now = datetime.datetime.now()
            foldertime = now.strftime("%Y%m%d-%H%M%S")
            newpath = os.path.join(output_path, filename + '_PETS2_' + foldertime)
            os.makedirs(newpath, exist_ok=True)
            os.chdir(newpath)
            print(output_path)
            # 获取像素尺度
            tempMetaData = metadata[:, 0]
            # 去掉不合法的数据
            validMetaDataIndex = np.where(tempMetaData > 0)
            metaData = tempMetaData[validMetaDataIndex].tobytes()
            # 将元数据json化
            metaDataJSON = json.loads(metaData.decode('utf-8', 'ignore'))
            pixel_size_m = metaDataJSON['BinaryResult']['PixelSize']['width']
            pixel_size = float(pixel_size_m) * 1e-10  # concert the unit from 1/m to 1/Angstron
            # ----------------写入第一个txt
            with open('pixel_size.txt', 'a+') as f:
                f.write(str(pixel_size) + ' 1/Angstron')
            # 获取binning得到bin,用来写入pts文件
            binning = metaDataJSON['Detectors']['Detector-0']['Binning']['width']
            if binning == 1:
                bin = 4

            elif binning == 2:
                bin = 2

            else:
                bin = 1

            if beamstop == 'no':
                beamstop = beamstop_data['no']

            else:
                beamstop = '\n'.join(beamstop_data[beamstop][binning])
            print(beamstop)
            # 更多逻辑...
            # 注意，所有的文件读写操作都应该使用 newpath 作为基础路径
            print(output_path)
            for i in range(1, image_numbers):
                tempMetaData = metadata[:, i]
                # Reduce to valid metadata
                validMetaDataIndex = np.where(tempMetaData > 0)
                metaData = tempMetaData[validMetaDataIndex].tobytes()
                metaDataJSON = json.loads(metaData.decode('utf-8', 'ignore'))
                tilt_alpha_arc = metaDataJSON['Stage']['AlphaTilt']
                tilt_beta_arc = metaDataJSON['Stage']['BetaTilt']
                tilt_alpha = float(tilt_alpha_arc) * 180 / math.pi
                tilt_beta = float(tilt_beta_arc) * 180 / math.pi
                with open('TiltAngles.txt', 'a+') as f:
                    f.write('\n' + str(tilt_alpha) + ' ' + str(tilt_beta))

            # Save tiff files
            # 保存tif图片
            os.makedirs("EDpatterns")
            os.chdir(os.getcwd() + "/EDpatterns")
            for i in range(1, image_numbers):
                img = Image.fromarray(images[:, :, i])
                if i < 10:
                    imgname = '0000' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i < 100:
                    imgname = '000' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i < 1000:
                    imgname = '00' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i < 10000:
                    imgname = '0' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i >= 10000:
                    imgname = '/' + str(i) + '.tif'
                    img.save(str(imgname))

                with open('FileNameList.txt', 'a+') as f:
                    f.write('\n' + ".\EDpatterns\\" + str(imgname))
                with open(newpath + '\FileNameList.txt', 'a+') as f:
                    f.write('\n' + ".\EDpatterns\\" + str(imgname))

            os.chdir(newpath)
            # Let's Generate the ImageList.txt file
            # 生成ImageList.txt
            with open('TiltAngles.txt') as xh:
                with open('FileNameList.txt') as yh:
                    with open('ImageList.txt', 'w') as zh:
                        xlines = xh.readlines()
                        ylines = yh.readlines()
                        for i in range(len(xlines)):
                            line = ylines[i].strip() + ' ' + xlines[i]
                            zh.write(line)

            # Let's Generate the PETS2 input file 生成pts文件
            f = open("new.pts", 'w')
            f.write("#####################")
            f.write("\n#                   #")
            f.write("\n#  PETS parameters  #")
            f.write("\n#                   #")
            f.write("\n#####################")
            f.write("\nlambda 0.0251")
            f.write("\nAperpixel " + str(pixel_size))
            f.write("\nphi 1.00")
            f.write("\nomega 270.0")
            f.write("\nnoiseparameters 3.5 38")
            f.write("\ngeometry continuous")
            f.write("\nreflectionsize 20")
            f.write("\nbin " + str(bin))
            f.write("\ndstarmax  1.8")
            f.write("\ndstarmaxps  1.8")
            f.write("\n")
            f.write("\nimagelist")
            f.write("\n")
            f.close()

            file1 = 'new.pts'
            file2 = 'ImageList.txt'

            def merge(file1, file2):
                f1 = open(file1, 'a', encoding='utf-8')
                with open(file2, 'r', encoding='utf-8') as f2:
                    for i in f2:
                        f1.write(i)

            merge(file1, file2)

            f = open("new.pts", 'a+')
            f.write("\nendimagelist")
            f.write("\n")
            f.write(beamstop)
            f.write("\n")
            f.write("\n")
            f.write("\nreconstruction")
            f.write("\nhk0   1 0 0 0 1 0 0 0 0")
            f.write("\nhk1   1 0 0 0 1 0 0 0 1")
            f.write("\nhk2   1 0 0 0 1 0 0 0 2")
            f.write("\nhk3   1 0 0 0 1 0 0 0 3")
            f.write("\nh0l   1 0 0 0 0 1 0 0 0")
            f.write("\nh1l   1 0 0 0 0 1 0 1 0")
            f.write("\nh2l   1 0 0 0 0 1 0 2 0")
            f.write("\nh3l   1 0 0 0 0 1 0 3 0")
            f.write("\n0kl   0 1 0 0 0 1 0 0 0")
            f.write("\n1kl   0 1 0 0 0 1 1 0 0")
            f.write("\n2kl   0 1 0 0 0 1 2 0 0")
            f.write("\n3kl   0 1 0 0 0 1 3 0 0")
            f.write("\nhhl   1 1 0 0 0 1 0 0 0")
            f.write("\nh+1hl   1 1 0 0 0 1 1 0 0")
            f.write("\nh+2hl   1 1 0 0 0 1 2 0 0")
            f.write("\nendreconstruction")
            f.close()
        print("ove")
        # # 弹出消息框通知用户转换完成
        self.finished.emit()


class FileWorkerThread(QThread):
    finished = pyqtSignal()

    def __init__(self, input_file, output_path, beamstop, parent=None):
        super(FileWorkerThread, self).__init__(parent)
        self.input_file = input_file
        self.output_path = output_path
        self.beamstop = beamstop

    def run(self):
        # 检查输入路径中的.emd文件
        input_path = self.input_file
        output_path = self.output_path
        with open('beamstop.json', 'r') as file:
            beamstop_data = json.load(file)
        os.chdir(output_path)
        beamstop = self.beamstop

        emd_files = [input_path]

        if not emd_files:
            QMessageBox.information(None,
                                    'There is no *.emd Velox file in the provided folder, so the code will not work!')
            return

        for file in emd_files:
            filename = os.path.splitext(file)[0]

            # 提取数据
            def get_data(filename):
                full_filename = os.path.join(input_path, filename + '.emd')
                f = h5py.File(full_filename, 'r')
                data_group_name = list(f['Data/Image'].keys())
                images = f['Data/Image'][data_group_name[0]]['Data']
                image_numbers = int(images.shape[2])
                metadata = f['Data/Image'][data_group_name[0]]['Metadata']
                return images, metadata, image_numbers

            data = get_data(filename)
            image_numbers = int(data[2]) - 1  # 减去最后一帧
            metadata = data[1]
            images = data[0]

            # 创建输出文件夹
            now = datetime.datetime.now()
            foldertime = now.strftime("%Y%m%d-%H%M%S")
            newpath = os.path.join(output_path, filename + '_PETS2_' + foldertime)
            os.makedirs(newpath, exist_ok=True)
            os.chdir(newpath)
            # 获取像素尺度
            tempMetaData = metadata[:, 0]
            # 去掉不合法的数据
            validMetaDataIndex = np.where(tempMetaData > 0)
            metaData = tempMetaData[validMetaDataIndex].tobytes()
            # 将元数据json化
            metaDataJSON = json.loads(metaData.decode('utf-8', 'ignore'))
            pixel_size_m = metaDataJSON['BinaryResult']['PixelSize']['width']
            pixel_size = float(pixel_size_m) * 1e-10  # concert the unit from 1/m to 1/Angstron
            # ----------------写入第一个txt
            with open('pixel_size.txt', 'a+') as f:
                f.write(str(pixel_size) + ' 1/Angstron')
            # 获取binning得到bin,用来写入pts文件
            binning = metaDataJSON['Detectors']['Detector-0']['Binning']['width']
            if binning == 1:
                bin = 4

            elif binning == 2:
                bin = 2

            else:
                bin = 1

            if beamstop == 'no':
                beamstop = beamstop_data['no']
            else:
                beamstop = '\n'.join(beamstop_data[beamstop][binning])
            # 更多逻辑...
            # 注意，所有的文件读写操作都应该使用 newpath 作为基础路径
            for i in range(1, image_numbers):
                tempMetaData = metadata[:, i]
                # Reduce to valid metadata
                validMetaDataIndex = np.where(tempMetaData > 0)
                metaData = tempMetaData[validMetaDataIndex].tobytes()
                metaDataJSON = json.loads(metaData.decode('utf-8', 'ignore'))
                tilt_alpha_arc = metaDataJSON['Stage']['AlphaTilt']
                tilt_beta_arc = metaDataJSON['Stage']['BetaTilt']
                tilt_alpha = float(tilt_alpha_arc) * 180 / math.pi
                tilt_beta = float(tilt_beta_arc) * 180 / math.pi
                with open('TiltAngles.txt', 'a+') as f:
                    f.write('\n' + str(tilt_alpha) + ' ' + str(tilt_beta))

            os.makedirs("EDpatterns")
            os.chdir(os.getcwd() + "/EDpatterns")
            for i in range(1, image_numbers):
                img = Image.fromarray(images[:, :, i])
                if i < 10:
                    imgname = '0000' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i < 100:
                    imgname = '000' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i < 1000:
                    imgname = '00' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i < 10000:
                    imgname = '0' + str(i) + '.tif'
                    img.save(str(imgname))
                elif i >= 10000:
                    imgname = '/' + str(i) + '.tif'
                    img.save(str(imgname))

                with open('FileNameList.txt', 'a+') as f:
                    f.write('\n' + ".\EDpatterns\\" + str(imgname))
                with open(newpath + '\FileNameList.txt', 'a+') as f:
                    f.write('\n' + ".\EDpatterns\\" + str(imgname))

            os.chdir(newpath)

            # Let's Generate the ImageList.txt file
            # 生成ImageList.txt
            with open('TiltAngles.txt') as xh:
                with open('FileNameList.txt') as yh:
                    with open('ImageList.txt', 'w') as zh:
                        xlines = xh.readlines()
                        ylines = yh.readlines()
                        for i in range(len(xlines)):
                            line = ylines[i].strip() + ' ' + xlines[i]
                            zh.write(line)

            # Let's Generate the PETS2 input file 生成pts文件
            f = open("new.pts", 'w')
            f.write("#####################")
            f.write("\n#                   #")
            f.write("\n#  PETS parameters  #")
            f.write("\n#                   #")
            f.write("\n#####################")
            f.write("\nlambda 0.0251")
            f.write("\nAperpixel " + str(pixel_size))
            f.write("\nphi 1.00")
            f.write("\nomega 270.0")
            f.write("\nnoiseparameters 3.5 38")
            f.write("\ngeometry continuous")
            f.write("\nreflectionsize 20")
            f.write("\nbin " + str(bin))
            f.write("\ndstarmax  1.8")
            f.write("\ndstarmaxps  1.8")
            f.write("\n")
            f.write("\nimagelist")
            f.write("\n")
            f.close()

            file1 = 'new.pts'
            file2 = 'ImageList.txt'

            def merge(file1, file2):
                f1 = open(file1, 'a', encoding='utf-8')
                with open(file2, 'r', encoding='utf-8') as f2:
                    for i in f2:
                        f1.write(i)

            merge(file1, file2)
            f = open("new.pts", 'a+')
            f.write("\nendimagelist")
            f.write("\n")
            f.write(beamstop)
            f.write("\n")
            f.write("\nreconstruction")
            f.write("\nhk0   1 0 0 0 1 0 0 0 0")
            f.write("\nhk1   1 0 0 0 1 0 0 0 1")
            f.write("\nhk2   1 0 0 0 1 0 0 0 2")
            f.write("\nhk3   1 0 0 0 1 0 0 0 3")
            f.write("\nh0l   1 0 0 0 0 1 0 0 0")
            f.write("\nh1l   1 0 0 0 0 1 0 1 0")
            f.write("\nh2l   1 0 0 0 0 1 0 2 0")
            f.write("\nh3l   1 0 0 0 0 1 0 3 0")
            f.write("\n0kl   0 1 0 0 0 1 0 0 0")
            f.write("\n1kl   0 1 0 0 0 1 1 0 0")
            f.write("\n2kl   0 1 0 0 0 1 2 0 0")
            f.write("\n3kl   0 1 0 0 0 1 3 0 0")
            f.write("\nhhl   1 1 0 0 0 1 0 0 0")
            f.write("\nh+1hl   1 1 0 0 0 1 1 0 0")
            f.write("\nh+2hl   1 1 0 0 0 1 2 0 0")
            f.write("\nendreconstruction")
            f.close()

        self.finished.emit()

class Emd2Pet(object):
    def setupUi(self, Form):
        Form.setObjectName("Emd2Pet")
        Form.resize(725, 450)
        Form.setMinimumSize(QtCore.QSize(725, 450))
        Form.setStyleSheet("#Emd2Pet{\n"
                           "    border-image: url(./img/LogViewer_BG.jpg);\n"
                           "\n"
                           "}\n"
                           "\n"
                           "\n"
                           "QLabel{\n"
                           "    color: #4bbdda;\n"
                           "    font-weight: bold;\n"
                           "}\n"
                           "\n"
                           "QLineEdit{\n"
                           "    border: none;\n"
                           "    background: #00ffffff;\n"
                           "    border-bottom-style: solid;\n"
                           "    border-bottom-width: 1px;\n"
                           "    border-bottom-color: #abcdef;\n"
                           "    color: #fff;\n"
                           "}\n"
                           "\n"
                           "#comboBox{\n"
                           "    border: none;\n"
                           "    background: #00ffffff;\n"
                           "    border-bottom-style: solid;\n"
                           "    border-bottom-width: 1px;\n"
                           "    border-bottom-color: #abcdef;    \n"
                           "    color: #4bbdda;\n"
                           "    font-weight: bold;\n"
                           "}\n"
                           "\n"
                           "#checkBox{\n"
                           "    color: #4bbdda;\n"
                           "}\n"
                           "\n"
                           "\n"
                           "QPushButton{\n"
                           "    background-color:  qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(1, 32, 66, 255), stop:1 #aa4bbdda);\n"
                           "    border-radius: 5px;\n"
                           "    padding: 10px;\n"
                           "    font-weight: bold;\n"
                           "    color: #4bbdda;\n"
                           "\n"
                           "}\n"
                           "\n"
                           "QPushButton:hover{\n"
                           "    background-color: #789abc;\n"
                           "}\n"
                           "\n"
                           "QPushButton:pressed{\n"
                           "    background-color: #89abcd;\n"
                           "}\n"
                           "\n"
                           "#groupBox{\n"
                           "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc03070e, stop:1 #aa267ab8);\n"
                           "    border-radius: 5px;\n"
                           "    border:2px solid #4bbdda;\n"
                           "}\n"
                           "\n"
                           "\n"
                           "")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setMaximumSize(QtCore.QSize(800, 400))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_4.setContentsMargins(50, 20, 50, 20)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(20)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_2.setSpacing(30)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setMinimumSize(QtCore.QSize(100, 0))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_3.addWidget(self.lineEdit_3)
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_3.addWidget(self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_3.addWidget(self.pushButton_8)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setMinimumSize(QtCore.QSize(100, 0))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(7)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setMinimumSize(QtCore.QSize(100, 0))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(120, 0))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_2.addWidget(self.pushButton_6)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_2.addWidget(self.checkBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSpacing(30)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setMinimumSize(QtCore.QSize(120, 0))
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_4.addWidget(self.comboBox)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(11)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 55))
        self.pushButton_2.setMaximumSize(QtCore.QSize(16777215, 70))
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_5.addWidget(self.pushButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        self.verticalLayout_3.setStretch(0, 2)
        self.verticalLayout_3.setStretch(1, 1)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.horizontalLayout_6.addWidget(self.groupBox)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.connect_Event()
        self.Form = Form


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Emd2Pet", "Emd2Pets"))
        self.label_3.setText(_translate("Emd2Pet", "Input File:"))
        self.pushButton_7.setText(_translate("Emd2Pet", "Browse..."))
        self.pushButton_8.setText(_translate("Emd2Pet", "Show URL"))
        self.label.setText(_translate("Emd2Pet", "Input Folder:"))
        self.pushButton_5.setText(_translate("Emd2Pet", "Browse..."))
        self.label_2.setText(_translate("Emd2Pet", "Output Folder:"))
        self.pushButton_6.setText(_translate("Emd2Pet", "Browse..."))
        self.checkBox.setText(_translate("Emd2Pet", "Same as Input"))
        self.label_4.setText(_translate("Emd2Pet", "Beamstop:"))
        self.comboBox.setItemText(0, _translate("Emd2Pet", "full"))
        self.comboBox.setItemText(1, _translate("Emd2Pet", "half"))
        self.comboBox.setItemText(2, _translate("Emd2Pet", "no"))
        self.pushButton_2.setText(_translate("Emd2Pet", "Run on Folder / File"))

    def connect_Event(self):
        self.checkBox.stateChanged.connect(self.onCheckBoxStateChanged)
        self.pushButton_2.clicked.connect(self.run)
        self.pushButton_7.clicked.connect(self.browseInputFile)
        self.pushButton_5.clicked.connect(self.browseInputFolder)
        self.pushButton_6.clicked.connect(self.browseOutputFolder)
        self.pushButton_8.clicked.connect(self.showFileURL)
        self.lineEdit.textChanged.connect(self.checkRunButtonState)
        self.lineEdit_2.textChanged.connect(self.checkRunButtonState)
        self.lineEdit_3.textChanged.connect(self.checkRunButtonState)

    def checkRunButtonState(self):
        input_folder = self.lineEdit.text()
        output_folder = self.lineEdit_2.text()
        input_file = self.lineEdit_3.text()

        # 检查文件夹运行按钮的状态
        if input_folder and output_folder or input_file and output_folder:
            self.pushButton_2.setEnabled(True)
        else:
            self.pushButton_2.setEnabled(False)

    def browseInputFolder(self):
        directory = self.browseDirectory()
        if directory:
            self.lineEdit.setText(directory)

    def browseInputFile(self):
        file_dialog = QFileDialog(self.Form)
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setOption(QFileDialog.DontUseNativeDialog)
        file_dialog.setNameFilter("All Files (*)")
        if file_dialog.exec_():
            file_path = file_dialog.selectedFiles()[0]
            self.lineEdit_3.setText(file_path)  # 假设 lineEditInputFile 是用来显示文件路径的文本框

    def browseOutputFolder(self):
        directory = self.browseDirectory()
        if directory:
            self.lineEdit_2.setText(directory)

    def browseDirectory(self):
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.DirectoryOnly)
        file_dialog.setOption(QFileDialog.DontUseNativeDialog)
        if file_dialog.exec_():
            return file_dialog.selectedFiles()[0]

    def showFileURL(self):
        file_url = self.lineEdit_3.text()
        QMessageBox.information(self.Form, "File URL", file_url)

    def onCheckBoxStateChanged(self):
        input_file = self.lineEdit_3.text()
        input_folder = self.lineEdit.text()

        # 如果 input file 有值，设置 output folder 为 input file 的当前目录
        if input_file:
            output_folder = os.path.dirname(input_file)
            self.lineEdit_2.setText(output_folder)
        # 否则，如果 input folder 有值，设置 output folder 为 input folder 的值
        elif input_folder:
            self.lineEdit_2.setText(input_folder)
        # 如果两者都没有值，清空 output folder
        else:
            self.lineEdit_2.clear()


    def run(self):
        input_path = self.lineEdit.text()
        output_path = self.lineEdit_2.text()
        input_file = self.lineEdit_3.text()  # 获取文件路径
        if input_file and output_path:
            self.pushButton_2.setEnabled(False)
            _translate = QtCore.QCoreApplication.translate
            self.pushButton_2.setText(_translate("Emd2Pet", "Running..."))
            self.runFile()
        else:
            self.pushButton_2.setEnabled(False)
            _translate = QtCore.QCoreApplication.translate
            self.pushButton_2.setText(_translate("Emd2Pet", "Running..."))
            self.runOnFolder()


    def runOnFolder(self):
        input_path = self.lineEdit.text()
        output_path = self.lineEdit_2.text()
        beamstop = self.comboBox.currentText()

        # 创建并启动文件夹处理工作线程
        self.folder_worker_thread = FolderWorkerThread(input_path, output_path, beamstop)
        self.folder_worker_thread.finished.connect(self.on_conversion_complete)
        self.folder_worker_thread.start()

    def runFile(self):
        input_file = self.lineEdit_3.text()  # 获取文件路径
        output_path = self.lineEdit_2.text()
        beamstop = self.comboBox.currentText()

        # 创建并启动单个文件处理工作线程
        self.file_worker_thread = FileWorkerThread(input_file, output_path, beamstop)
        self.file_worker_thread.finished.connect(self.on_conversion_complete)
        self.file_worker_thread.start()

    def on_conversion_complete(self):
        QMessageBox.information(None, 'Conversion Complete', 'Conversion Finished!')
        self.pushButton_2.setEnabled(True)
        _translate = QtCore.QCoreApplication.translate
        self.pushButton_2.setText(_translate("Emd2Pet", "Run on Folder / Run File"))

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Emd2Pet()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
