# -*- coding: utf-8 -*-
import re
import threading
import time

# Form implementation generated from reading ui file 'driftShift.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QPushButton, QVBoxLayout, QHBoxLayout,
                             QLineEdit, QLabel, QComboBox, QFileDialog, QMessageBox, QCheckBox)
import math
import datetime
import os, sys
import json
import numpy as np
from PIL import Image
import tkinter.messagebox
from PyQt5.QtCore import QThread, pyqtSignal, QTimer
from tifffile import tifffile
import scipy.signal as sig


class Drift_Shift(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setFixedSize(725, 450)
        Form.setMinimumSize(QtCore.QSize(725, 450))
        Form.setStyleSheet("#Form{\n"
"    border-image: url(./img/LogViewer_BG.jpg);\n"
"\n"
"}\n"
"\n"
"\n"
"QLabel{\n"
"    color: #4bbdda;\n"
"    font-weight: bold;\n"
"}\n"
"\n"
"QLineEdit{\n"
"    border: none;\n"
"    background: #00ffffff;\n"
"    border-bottom-style: solid;\n"
"    border-bottom-width: 1px;\n"
"    border-bottom-color: #abcdef;\n"
"    color: #fff;\n"
"}\n"
"\n"
"#comboBox{\n"
"    border: none;\n"
"    background: #00ffffff;\n"
"    border-bottom-style: solid;\n"
"    border-bottom-width: 1px;\n"
"    border-bottom-color: #abcdef;    \n"
"    color: #4bbdda;\n"
"    font-weight: bold;\n"
"}\n"
"\n"
"#checkBox{\n"
"    color: #4bbdda;\n"
"}\n"
"\n"
"\n"
"QPushButton{\n"
"    background-color:  qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(1, 32, 66, 255), stop:1 #aa4bbdda);\n"
"    border-radius: 5px;\n"
"    padding: 10px;\n"
"    font-weight: bold;\n"
"    color: #4bbdda;\n"
"\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color: #789abc;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: #89abcd;\n"
"}\n"
"\n"
"#groupBox{\n"
"        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #cc03070e, stop:1 #aa267ab8);\n"
"    border-radius: 5px;\n"
"    border:2px solid #4bbdda;\n"
"}\n"
"\n"
"\n"
"")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setMaximumSize(QtCore.QSize(800, 400))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_4.setContentsMargins(50, 20, 50, 20)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(20)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_2.setSpacing(30)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setMinimumSize(QtCore.QSize(100, 0))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(7)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setMinimumSize(QtCore.QSize(100, 0))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(120, 0))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_2.addWidget(self.pushButton_6)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSpacing(30)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(11)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_5.addWidget(self.checkBox)
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 55))
        self.pushButton_2.setMaximumSize(QtCore.QSize(16777215, 70))
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_5.addWidget(self.pushButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        self.verticalLayout_3.setStretch(0, 2)
        self.verticalLayout_3.setStretch(1, 1)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_4.addWidget(self.label_3)
        self.horizontalLayout_6.addWidget(self.groupBox)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.connect_Event()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "XY_Shift"))
        self.label.setText(_translate("Form", "Input Folder:"))
        self.pushButton_5.setText(_translate("Form", "Browse..."))
        self.label_2.setText(_translate("Form", "Output Folder:"))
        self.pushButton_6.setText(_translate("Form", "Browse..."))
        self.checkBox.setText(_translate("Form", "Same as Input"))
        self.pushButton_2.setText(_translate("Form", "Run"))
        self.label_3.setText(_translate("Form", "TextLabel"))

    def connect_Event(self):
        self.label_3.setText("Ready!")
        self.checkBox.stateChanged.connect(self.onCheckBoxStateChanged)
        self.pushButton_2.clicked.connect(self.run)
        self.pushButton_5.clicked.connect(self.browseInputFolder)
        self.pushButton_6.clicked.connect(self.browseOutputFolder)
        self.lineEdit.textChanged.connect(self.checkRunButtonState)
        self.lineEdit_2.textChanged.connect(self.checkRunButtonState)

    def onCheckBoxStateChanged(self):
        input_folder = self.lineEdit.text()
        if input_folder:
            self.output_dir = input_folder
            self.lineEdit_2.setText(input_folder)
        # 如果两者都没有值，清空 output folder
        else:
            self.lineEdit_2.clear()

    def browseInputFolder(self):
        directory = self.browseDirectory()
        if directory:
            self.input_dir = directory
            self.lineEdit.setText(directory)

    def browseOutputFolder(self):
        directory = self.browseDirectory()
        if directory:
            self.output_dir = directory
            self.lineEdit_2.setText(directory)

    def browseDirectory(self):
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.DirectoryOnly)
        file_dialog.setOption(QFileDialog.DontUseNativeDialog)
        if file_dialog.exec_():
            return file_dialog.selectedFiles()[0]

    def checkRunButtonState(self):
        input_folder = self.lineEdit.text()
        output_folder = self.lineEdit_2.text()
        # 检查文件夹运行按钮的状态
        if input_folder and output_folder:
            self.pushButton_2.setEnabled(True)
        else:
            self.pushButton_2.setEnabled(False)

    def run(self):
        try:
            # 禁用运行按钮以防止多次点击
            self.pushButton_2.setEnabled(False)
            # 创建并启动线程
            self.run_thread = threading.Thread(target=self.run_thread_func)
            self.run_thread.start()
        except Exception as e:
            print(e)

    def handle_tif(self, img_name):
        try:
            img_name = os.path.basename(img_name)
            pos1 = img_name.find('_')
            pos2 = img_name.find('.')
            return img_name[pos1 + 1:pos2]
        except Exception as e:
            print(e)

    def run_thread_func(self):
        try:
            self.label_3.setText("Running...")
            print("run before")
            # 获取输出目录
            output_folder = self.lineEdit_2.text()
            # print(f"output_folder: {output_folder}")
            # 读取图像名称列表
            image_list = self.get_image_list()
            # 获取像素
            pixel_size = self.get_pixel_size(image_list[0])
            pixel_size_num = re.search(r'\d+(\.\d+)?', pixel_size)
            pixel_size_num = float(pixel_size_num.group())
            with open(output_folder + '/xy_shift.csv', "w") as file:
                file.write(f"image1,image2,xsh,ysh,pixel_xsh,pixel_ysh\n")
                for i in range(len(image_list) - 1):
                    image1_name = image_list[i + 1]
                    image1 = tifffile.imread(image1_name)
                    image1_name = self.handle_tif(image1_name)

                    image2_name = image_list[i]
                    image2 = tifffile.imread(image2_name)
                    image2_name = self.handle_tif(image2_name)
                    xsh, pixel_xsh, ysh, pixel_ysh = self.get_two_image_shift(image1, image2, pixel_size_num)
                    file.write(
                        f"{image1_name},{image2_name},{round(xsh, 3)},{round(ysh, 3)},{round(pixel_xsh, 3)},{round(pixel_ysh, 3)}\n")
            print("run after")
            self.label_3.setText("The xy_shift.csv file was successfully generated!")
            time.sleep(3)
            self.label_3.setText("Ready!")
            self.pushButton_2.setEnabled(True)
        except Exception as e:
            print(e)

    def get_image_list(self):
        try:
            # 读取图像列表
            image_list = []
            folder_path = self.lineEdit.text()
            # print(f"iutput_folder: {folder_path}")
            for file_name in os.listdir(folder_path):
                if file_name.endswith('.tif'):
                    tif_path = os.path.join(folder_path, file_name)
                    image_list.append(tif_path)
            return image_list
        except Exception as e:
            print(e)

    def get_two_image_shift(self, image1, image2, pixel_size):
        try:
            # 对输入的图像进行均值归一化处理
            image1 = image1 - np.mean(image1)
            image2 = image2 - np.mean(image2)
            # 利用快速傅里叶变换（FFT）计算图像的自相关和互相关，得到相关性矩阵
            fftself = sig.fftconvolve(image1, image1[::-1, ::-1], mode='same')
            fftcomp = sig.fftconvolve(image1, image2[::-1, ::-1], mode='same')
            # 找到相关性矩阵中具有最大值的位置，即相关性的峰值位置
            selfcenter = np.unravel_index(np.argmax(fftself), fftself.shape)
            compcenter = np.unravel_index(np.argmax(fftcomp), fftcomp.shape)
            # pixel_size = pixel_size
            # 计算图像在 x 和 y 方向上的偏移量，乘以像素尺寸
            pixel_xsh = (compcenter[0] - selfcenter[0])
            pixel_ysh = (-(compcenter[1] - selfcenter[1]))
            xsh = (compcenter[0] - selfcenter[0]) * pixel_size
            ysh = (-(compcenter[1] - selfcenter[1])) * pixel_size
            # 根据偏移量计算出 u 和 v 的值,这些值代表了图像在水平和垂直方向上的偏移量, image_shift 的系数应该要根据具体场景调试得到
            return xsh, pixel_xsh, ysh, pixel_ysh
        except Exception as e:
            print(e)

    def get_pixel_size(self, img_name):
        try:
            with tifffile.TiffFile(img_name) as tif:
                # 获取所有页面对象
                pages = tif.pages
                # 遍历页面对象并读取属性信息
                for page in pages:
                    description = page.tags.get("ImageDescription")  # 获取描述信息
                    if description:
                        metadata_str = description.value
                        break
            metadata_dict = json.loads(metadata_str)
            for key, value in metadata_dict.items():
                if key == "Pixel Size (X)":
                    return value
        except Exception as e:
            print(e)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Drift_Shift()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
