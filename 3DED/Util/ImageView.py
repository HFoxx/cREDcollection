# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ImageView.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import json
import sys
import os
import numpy as np
import tifffile
import cv2
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMenu, QAction, QFileDialog, QListWidget, QGraphicsPixmapItem,
                             QGraphicsScene, QTextEdit, QWidget, QHBoxLayout, QVBoxLayout, QGraphicsView,QListWidgetItem)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QImage, QPixmap
from PIL import Image
from PyQt5.QtWidgets import QGraphicsLineItem, QGraphicsTextItem
from PyQt5.QtCore import Qt, QPointF
from PyQt5.QtGui import QPen, QColor,QFont
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QStandardItemModel, QStandardItem
import math


def scale_image_16bit_to_8bit(img_16bit):
    img_8bit = ((img_16bit - img_16bit.min()) / (img_16bit.max() - img_16bit.min()) * 255).astype('uint8')
    return img_8bit


def load_image(image_path):
    """加载16位灰度图像"""
    return Image.open(image_path)

def invert_image(image):
    """反转图像"""
    img_array = np.array(image, dtype=np.uint16)
    inverted = 65535 - img_array
    return Image.fromarray(inverted.astype(np.uint16))

def auto_level(ret, min_number, max_number, thre):
    """自动调整最小和最大阈值"""
    max_gray = max(ret)
    sflag, eflag = False, False
    while not sflag or not eflag:
        if ret[min_number] < max_gray * thre:
            min_number += 1
        else:
            sflag = True
        if ret[max_number] < max_gray * thre:
            max_number -= 1
        else:
            eflag = True
    return min_number, max_number

def adjust_contrast(image, thre):
    """调整图像对比度"""
    img_array = np.array(image, dtype=np.uint16)

    # 计算直方图
    histogram, _ = np.histogram(img_array, bins=65536, range=(0, 65535))

    # 自动调整阈值
    min_val, max_val = auto_level(histogram, 0, 65535, thre)

    # 避免除以零
    if max_val - min_val == 0:
        return image, min_val, max_val

    # 线性亮度调整
    adjusted = np.clip((img_array - min_val) * (65535 / (max_val - min_val)), 0, 65535)

    return Image.fromarray(adjusted.astype(np.uint16)), min_val, max_val

def convert_to_8bit(image, gamma=1):
    """将16位图像转换为8位图像，应用伽马校正"""
    img_array = np.array(image, dtype=np.uint16)

    # 应用伽马校正
    gamma_img = ((img_array / np.max(img_array)) ** gamma * np.max(img_array)).astype('uint16')

    # 转换为8位以便可视化
    gamma_img_8bit = ((gamma_img - gamma_img.min()) / (gamma_img.max() - gamma_img.min()) * 255).astype('uint8')

    return Image.fromarray(gamma_img_8bit)


class ImageLoadingThread(QThread):
    image_loaded = pyqtSignal(str, np.ndarray)  # 发送文件路径和加载的图像

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        try:
            # 在这里执行耗时的图像加载操作
            image = tifffile.imread(self.file_path)
            # 发出信号，携带加载的图像
            self.image_loaded.emit(self.file_path, image)
        except Exception as e:
            print(f"Error loading image {self.file_path}: {e}")

class FolderLoadingThread(QThread):
    folder_loaded = pyqtSignal(dict)

    def __init__(self, folder_path):
        super().__init__()
        self.folder_path = folder_path

    def run(self):
        loaded_images = {}
        try:
            for file in os.listdir(self.folder_path):
                if file.endswith('.tif'):
                    file_path = os.path.join(self.folder_path, file)
                    try:
                        image = tifffile.imread(file_path)
                        loaded_images[file_path] = image
                    except Exception as e:
                        print(f"Error loading image {file}: {e}")
        except Exception as e:
            print(f"Error loading folder {self.folder_path}: {e}")
        self.folder_loaded.emit(loaded_images)


class ImageProcessor1(object):
    def __init__(self):
        super().__init__()
        with open("./params.json", "r") as f:
            data = json.load(f)
        self.path = data['filesavepath']
        print(self.path)
        self.current_folder_path = ''
        self.original_image = None
        self.loaded_images = {}
        self.image_loading_threads = []
        self.current_image_path = ''  # 新增成员变量，用于存储当前图像路径


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(960, 556)
        MainWindow.setMinimumSize(QtCore.QSize(960, 555))
        MainWindow.setStyleSheet("*{\n"
                                 "    background-color: transparent;\n"
                                 "    color: #fff;\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "#MainWindow{\n"
                                 "    border-image: url(./img/ImageView_BG.jpg);\n"
                                 "    background-color :#002551;\n"
                                 "}\n"
                                 "\n"
                                 "\n"
                                 "#listView,\n"
                                 "#listView_2 {\n"
                                 "    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(0, 22, 54, 220), stop:1 rgba(29, 70, 100, 200));\n"
                                 "    border-radius: 5px;\n"
                                 "    border:1px solid #06a7f0;\n"
                                 "}\n"
                                 "\n"
                                 "#graphicsView{\n"
                                 "        background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #0c234b, stop:1 #aa267ab8);\n"
                                 "    border-radius: 5px;\n"
                                 "    border:2px solid #06a7f0;\n"
                                 "}\n"
                                 "\n"
                                 "QMenu{\n"
                                 "    background-color: #fff;\n"
                                 "    border-radius: 5px;\n"
                                 "}\n"
                                 "QMenu::item{\n"
                                 "  padding:11px 32px;\n"
                                 "  color:rgba(51,51,51,1);\n"
                                 "  font-size:14px;\n"
                                 "}\n"
                                 "QMenu::item:hover,\n"
                                 "QMenu::item:selected{\n"
                                 "    background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 #aa0c234b, stop:1 #aa267ab8);\n"
                                 "    color: #fff;\n"
                                 "}\n"
                                 "\n"
                                 "")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(30, 11, 30, 11)
        self.horizontalLayout.setSpacing(20)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setSpacing(11)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout_6.addLayout(self.verticalLayout_2)
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setObjectName("listView")
        self.verticalLayout_6.addWidget(self.listView)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_6.addLayout(self.verticalLayout_3)
        self.horizontalLayout.addLayout(self.verticalLayout_6)
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setObjectName("graphicsView")
        self.horizontalLayout.addWidget(self.graphicsView)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setSpacing(11)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_7.addLayout(self.verticalLayout_4)
        self.listView_2 = QtWidgets.QListView(self.centralwidget)
        self.listView_2.setObjectName("listView_2")
        self.verticalLayout_7.addWidget(self.listView_2)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_7.addLayout(self.verticalLayout_5)
        self.horizontalLayout.addLayout(self.verticalLayout_7)
        self.horizontalLayout.setStretch(0, 3)
        self.horizontalLayout.setStretch(1, 4)
        self.horizontalLayout.setStretch(2, 3)
        self.verticalLayout_8.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 960, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionopen_Image = QtWidgets.QAction(MainWindow)
        self.actionopen_Image.setObjectName("actionopen_Image")
        self.actionOpen_Folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_Folder.setObjectName("actionOpen_Folder")
        self.actionOpen_current = QtWidgets.QAction(MainWindow)
        self.actionOpen_current.setObjectName("actionOpen_current")
        self.menu.addAction(self.actionopen_Image)
        self.menu.addAction(self.actionOpen_Folder)
        self.menu.addAction(self.actionOpen_current)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.connect_Event()
        self.listView_model = QStandardItemModel()  # 创建模型
        self.listView.setModel(self.listView_model)  # 设置模型

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "open"))
        self.actionopen_Image.setText(_translate("MainWindow", "open Image"))
        self.actionOpen_Folder.setText(_translate("MainWindow", "Open Folder"))
        self.actionOpen_current.setText(_translate("MainWindow", "Open current"))

    def connect_Event(self):
        self.listView.clicked.connect(self.load_image_from_list)
        self.actionopen_Image.triggered.connect(self.load_single_image)
        self.actionOpen_Folder.triggered.connect(self.load_folder)
        self.actionOpen_current.triggered.connect(self.load_current_folder)

    def load_single_image(self):
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("TIF images (*.tif)")
        file_dialog.setOption(QFileDialog.DontUseNativeDialog)
        if file_dialog.exec_() == QFileDialog.Accepted:
            file_path = file_dialog.selectedFiles()[0]
            if file_path:
                with tifffile.TiffFile(file_path) as tif:
                    image = Image.open(file_path)
                    metadata = tif.pages[0].tags.get('ImageDescription').value
                self.loaded_images[file_path] = {'image': image, 'metadata': metadata}
                self.load_image(file_path)  # 此处调用下一个函数

    def load_folder(self):
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.DirectoryOnly)
        file_dialog.setOption(QFileDialog.DontUseNativeDialog)
        if file_dialog.exec_() == QFileDialog.Accepted:
            folder_path = file_dialog.selectedFiles()[0]
            if folder_path:
                self.current_folder_path = folder_path
                self.listView_model.clear()

                self.loaded_images.clear()
                self.folder_loading_thread = FolderLoadingThread(folder_path)
                self.folder_loading_thread.folder_loaded.connect(self.process_folder_loading)
                self.folder_loading_thread.start()

    def load_current_folder(self):
        self.current_folder_path = self.path
        print(self.path)
        self.listView_model.clear()

        self.loaded_images.clear()
        self.folder_loading_thread = FolderLoadingThread(self.current_folder_path)
        self.folder_loading_thread.folder_loaded.connect(self.process_folder_loading)
        self.folder_loading_thread.start()


    def process_folder_loading(self, loaded_images):
        self.listView_model.clear()  # 清空模型

        for file_path, data in loaded_images.items():
            with tifffile.TiffFile(file_path) as tif:
                metadata = tif.pages[0].tags.get('ImageDescription').value
            self.loaded_images[file_path] = {'image': data, 'metadata': metadata}

            # 创建一个项并添加到模型中
            item = QStandardItem(os.path.basename(file_path))
            self.listView_model.appendRow(item)

    def image_loaded(self, file_path, image):
        with tifffile.TiffFile(file_path) as tif:
            metadata = tif.pages[0].tags.get('ImageDescription').value
        self.loaded_images[file_path] = {'image': image, 'metadata': metadata}
        self.process_and_display_image(image)
        self.display_metadata(file_path)

    def on_all_images_loaded(self):
        # 所有图像加载完成后的处理
        print("All images loaded.")

    def load_image(self, file_path):
        if file_path in self.loaded_images:
            image_data = self.loaded_images[file_path]
            self.process_and_display_image(image_data, file_path)  # 现在也传递 file_path
            self.display_metadata(file_path)
        else:
            print(f"Image not found in loaded images: {file_path}")

    def process_and_display_image_threadsafe(self, file_path, image):
        self.loaded_images[file_path] = image
        self.display_metadata(file_path)
        self.display_image_in_graphics_view(image, file_path)

    # def auto_adjust_brightness_contrast(self, img_16bit):
    #     # 将16位图像转换为8位
    #     img_8bit = self.scale_image_16bit_to_8bit(img_16bit)
    #     # 自动调整亮度和对比度
    #     # 直方图计算和调整代码
    #
    #     return img_16bit_equalized
    #
    def load_image_from_list(self):
        # 获取当前选中项的索引
        current_index = self.listView.currentIndex()

        # 检查索引是否有效
        if current_index.isValid():
            # 从模型中获取文件名
            file_name = self.listView_model.data(current_index, QtCore.Qt.DisplayRole)
            file_path = os.path.join(self.current_folder_path, file_name)

            if file_path in self.loaded_images:
                self.load_image(file_path)
            else:
                # 如果尚未加载该图像，则创建一个新的加载线程
                image_loading_thread = ImageLoadingThread(file_path)
                image_loading_thread.image_loaded.connect(self.image_loaded)
                self.image_loading_threads.append(image_loading_thread)
                image_loading_thread.start()

    def process_and_display_image(self, image_data, file_path):
        self.current_image_path = file_path
        image = image_data['image']

        # 将PIL图像转换为NumPy数组
        img_16bit = np.array(image, dtype=np.uint16)

        # 反转图像
        # img_inverted = invert_image(img_16bit)

        # 调整对比度
        img_contrast_adjusted, _, _ = adjust_contrast(img_16bit, thre=0.0008)

        # 转换为8位图像
        img_8bit = convert_to_8bit(img_contrast_adjusted, gamma=1)
        img_8bit = np.array(img_8bit, dtype=np.uint8)

        # 显示处理后的图像
        self.display_image_in_graphics_view(img_8bit, file_path)

    def add_ruler_to_scene(self, scene, width, height, file_path):
        # 读取元数据中的像素大小信息
        metadata = self.loaded_images[file_path]['metadata']
        metadata = json.loads(metadata)
        for s in ['nm', '1/A']:
            if s in metadata['Pixel Size (X)']:
                util = " "+s
                pixel_size = float(metadata['Pixel Size (X)'].replace(s, ''))

        # 标尺的起点和终点
        ruler_start_x = (width) / 4 # 标尺的水平起始位置
        ruler_y = height + (width*(150/2048))  # 标尺的垂直位置 2048/150=x/y  y=x*150/2048
        ruler_length = float((width * 0.25 * pixel_size) /pixel_size)  # 标尺的长度（像素）
        # ruler length (shape[0] * 0.25 * pixel size ) /100 * 100  / pixel size
        ruler_width = float((width*(25/2048)))  # 标尺的宽度（像素）

        start_point = QPointF(ruler_start_x, ruler_y)
        end_point = QPointF(ruler_start_x + ruler_length, ruler_y)

        # 创建标尺线条
        line = QGraphicsLineItem(start_point.x(), start_point.y(), end_point.x(), end_point.y())
        line.setPen(QPen(QColor(Qt.red), ruler_width))  # 设置线条颜色为红色，宽度为ruler_width

        # 添加标尺线条到场景
        scene.addItem(line)

        # 创建并添加标签
        actual_length = str(math.ceil(float((width * 0.25 * pixel_size)))) + util  # 假设200像素代表20毫米
        label = QGraphicsTextItem(actual_length)
        label.setDefaultTextColor(QColor(Qt.red))
        label.setFont(QFont("Arial", width*(40/2048)))  # 设置字体和大小
        label.setPos(end_point.x() - ruler_length/2, end_point.y() - width*(50/2048) -20)  # 调整标签位置
        scene.addItem(label)

    def display_image_in_graphics_view(self, img_8bit, file_path):
        height, width = img_8bit.shape
        qImg = QImage(img_8bit.data.tobytes(), width, height, width, QImage.Format_Grayscale8)
        pixmap = QPixmap.fromImage(qImg)
        graphics_item = QGraphicsPixmapItem(pixmap)
        scene = QGraphicsScene()
        scene.addItem(graphics_item)

        # 留出额外空间以显示标尺
        scene.setSceneRect(0, 0, width, height + 80)  # 标尺高度为80像素

        # 添加红色标尺
        self.add_ruler_to_scene(scene, width, height, file_path)  # 传递file_path

        self.graphicsView.setScene(scene)
        self.graphicsView.fitInView(scene.itemsBoundingRect(), Qt.KeepAspectRatio)

    def display_metadata(self, file_path):
        model = QStandardItemModel()  # 创建一个新的 model
        try:
            with tifffile.TiffFile(file_path) as tif:
                # 假设 metadata 是 JSON 格式存储在 ImageDescription 中
                metadata_str = tif.pages[0].tags.get('ImageDescription').value
                metadata = json.loads(metadata_str)  # 加载 JSON 数据

                for key, value in metadata.items():
                    line = f"{key}: {value}"
                    item = QStandardItem(line)
                    model.appendRow(item)
        except Exception as e:
            item = QStandardItem(f"Error reading metadata: {e}")
            model.appendRow(item)

        self.listView_2.setModel(model)  # 将 model 设置给 listView

    def resizeEvent(self, event):
        # 当窗口大小改变时被调用
        if self.current_image_path:
            # 重新加载和显示当前图像
            self.load_image(self.current_image_path)
        super(ImageProcessor, self).resizeEvent(event)  # 调用父类的 resizeEvent 方法

class ImageProcessor(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = ImageProcessor1()
        self.ui.setupUi(self)

    def resizeEvent(self, event):
        # 当窗口大小改变时被调用
        if self.ui.current_image_path:
            # 重新加载和显示当前图像
            self.ui.load_image(self.ui.current_image_path)
        super().resizeEvent(event)  # 调用父类的 resizeEvent 方法


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = ImageProcessor()
    mainWindow.show()
    sys.exit(app.exec_())
